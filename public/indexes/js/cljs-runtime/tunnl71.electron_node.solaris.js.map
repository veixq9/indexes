{"version":3,"sources":["tunnl71/electron_node/solaris.cljs"],"mappings":";;;AAmBA,AAoCA","names":[],"sourcesContent":["(ns tunnl71.electron-node.solaris\n  (:require\n   ;; [web-audio-api]\n   [reagent.core :as r]\n   [reagent.dom :as rd]\n   [web-audio-daw :as wad]\n\n\n   ;; [\"fs\" :as fs]\n   [\"path\" :as path]\n\n\n   tunnl71.electron-node.signals\n   [tunnl71.electron-node.helpers :as h :refer [audio-context new-source! now node:stereo-panner just-play! connect]]\n   \n\n   ))\n\n\n(comment\n  (def source\n    (just-play! \"/home/veix/Downloads/Solaris Ft Rubey\uff08a song for Andrei Tarkovsky\uff09.mp3\" {:when 0 :offset 30 :duration 20}))\n\n  (def source\n    (new-source! \"/home/veix/Downloads/Solaris Ft Rubey\uff08a song for Andrei Tarkovsky\uff09.mp3\")\n    \n    )\n\n  (set! (-> @source (.valueOf) .-playbackRate .-value) 1)\n  (connect @source [])\n  (-> @source .start)\n  \n  (-> audio-context (.resume))\n  (-> audio-context (.suspend))\n  (set! (-> @source (.valueOf) .-playbackRate .-value) 2)\n  \n\n  )\n\n\n\n#_(defn alternate-stereo-pan\n    [{:keys [dt] :or {dt 0.5}}]\n    (doall (take 100 (map (fn [v t]\n                            (-> node:stereo-panner (.valueOf) (.-pan) (.setValueAtTime v t)))\n                          (tunnl71.electron-node.signals/cos Math/PI )\n                          (iterate (partial + dt) (now))))))\n\n#_(defn just-play!\n  [source-path {:keys [when offset duration]}]\n  (js/setTimeout #(-> @(new-source! source-path) (.start when offset duration))\n                 2000))\n\n\n\n(comment\n  (-> decoded-source (.start 0 0 10))\n\n  ;; web api\n  (do\n\n    (def audio-context (new js/AudioContext ))\n    (defn now []\n      audio-context.currentTime)\n    \n\n    ;;(def v-effect (-> (new js/Audio \"/home/veix/Downloads/Solaris Ft Rubey\uff08a song for Andrei Tarkovsky\uff09.mp3\")))\n    #_(def media-element-source (-> audio-context (.createMediaElementSource v-effect)))\n\n\n\n\n    (defn new-source! []\n      (def decoded-source)\n      (-> (js/fetch\n\n           \"/home/veix/Downloads/Solaris Ft Rubey\uff08a song for Andrei Tarkovsky\uff09.mp3\")\n          (.then (fn [result]\n                   (-> (-> result (.arrayBuffer))\n                       (.then (fn [ab]\n                                (println ab)\n                                (.decodeAudioData audio-context ab)))\n\n                       (.then (fn [decoded]\n                                (println \"decoded\" decoded)\n                                (def decoded-source (new js/AudioBufferSourceNode audio-context (clj->js {:buffer  decoded})))))))))\n\n\n\n\n      \n\n      \n\n      \n\n      \n      \n      (def gain-node (-> audio-context (.createGain )))\n      ;; (-> gain-node (.-gain) (.setValueAtTime 0 audio-context.currentTime))\n      (set! (-> gain-node (.-gain) (.-value)) 0.5)\n      #_(do (-> gain-node (.-gain) (.linearRampToValueAtTime 0 (+ audio-context.currentTime 15)))\n            (-> gain-node (.-gain) (.linearRampToValueAtTime 0 (+ audio-context.currentTime 2)))\n\n            (-> gain-node (.-gain) (.linearRampToValueAtTime 1 (+ audio-context.currentTime 20)))\n            (-> gain-node (.-gain) (.linearRampToValueAtTime 0 (+ audio-context.currentTime 2))))\n\n\n      (defn gain!\n        [target dt]\n        (-> gain-node (.-gain) (.linearRampToValueAtTime target (+ audio-context.currentTime dt))))\n\n\n      (comment\n        (gain! 0.0 10)\n        (gain! 1.0 10)\n        )\n\n      ;; panner\n      (def panner (-> audio-context (.createPanner (clj->js {:panningModel \"equalpower\"\n                                                             ;; :distanceModel \"inverse\"\n                                                             ;; :refDistance 1\n                                                             ;; :maxDistance 10000\n                                                             ;; :rollOfFactor 1\n                                                             ;; :coneInnerAngle 360\n                                                             ;; :coneOuterAngle 0\n                                                             ;; :coneOuterGain 0\n                                                             }))))\n\n      (def stereo-panner (-> audio-context (.createStereoPanner )))\n\n\n\n      (-> panner (.-orientationX) (.setValueAtTime 1 audio-context.currentTime))\n      (-> panner (.-orientationY) (.setValueAtTime 0 audio-context.currentTime))\n      (-> panner (.-orientationZ) (.setValueAtTime 0 audio-context.currentTime))\n\n\n      (-> panner (.setPosition 0 0 10))\n      (-> panner (.setPosition 0 0 0))\n      (-> panner (.setOrientation 100 22 -100))\n\n\n      \n      (-> panner (.-orientationX)  .-value)\n      (-> panner (.-positionX) (.-value))\n\n\n      ;; listener\n      (def listener (-> audio-context (.-listener)))\n\n      (-> listener (.-forwardX) .-value)\n      (-> listener (.-forwardY) .-value)\n      (-> listener (.-forwardZ) .-value)\n      (-> listener (.-upX) .-value)\n      (-> listener (.-upY) .-value)\n      (-> listener (.-upZ) .-value)\n      \n\n      ;; (-> media-element-source (.connect gain-node))\n      (js/setTimeout #(do\n                        (-> decoded-source (.connect panner))\n                        (-> gain-node (.connect panner))\n\n                        (-> panner (.connect stereo-panner))\n                        (-> stereo-panner (.connect audio-context.destination))\n                        )\n                     \"2000\"\n                     )\n\n\n      \n\n\n\n      (set! (-> listener (.-upZ) .-value) -100)\n      (set! (-> listener (.-forwardX) .-value) -100)\n      (set! (-> panner (.-positionX) .-value) 0)\n\n      \n\n\n      )\n\n\n\n\n\n    (defn add-pann-effect!\n      ([{:keys [n dt dx dy dz x0 y0 z0 amplitude] :or {n 1 dt 0.1 dz 0.1 dx 0.1 dy 0.1 x0 panner.positionX.value\n                                                       y0 panner.positionX.value\n                                                       z0 panner.positionZ.value0\n                                                       amplitude 32\n                                                       }}]\n       (let [\n             t0 (now)\n             ts (iterate #(+ % dt) t0)\n\n             dws (fn [d] (cycle (concat (repeat amplitude d) (map - (repeat amplitude d)) (map - (repeat amplitude d)) (repeat amplitude d))))\n             dxs (dws dx)\n             dys (dws dy)\n             dzs (dws dz)\n             xs (reductions + x0 dxs)\n             ys (reductions + y0 dys)\n             zs (reductions + z0 dzs)\n\n             ;; ys (cycle (take 4 (iterate (partial + dy) y0)))\n             ]\n         (doall (take n\n                      (map (fn [[x y z] t]\n                             (-> panner (.-positionX) (.setValueAtTime x t))\n                             (-> panner (.-positionY) (.setValueAtTime y t))\n                             (-> panner (.-positionZ) (.setValueAtTime z t)))\n                           (map vector xs ys zs) ts)\n                      #_(map (fn [v t]\n                               (-> panner (.-positionZ) (.setValueAtTime v t)))\n                             zs ts))))))\n\n\n    (defn just-play!\n      [{:keys [when offset duration]}]\n      (new-source!)\n      (js/setTimeout #(-> decoded-source (.start when offset duration))\n                     2000))\n    \n    \n    (comment\n\n      (-> audio-context (.resume 0))\n      (-> audio-context (.suspend))\n      \n      (js/setTimeout #(print \"shit\")\n                     2000)\n      (just-play! {:when 0 :offset 108 :duration 20})\n\n      (-> decoded-source (.start 1))\n      (-> decoded-source (.stop))\n      \n      (-> stereo-panner (.valueOf) (.-pan) (.-value))\n      (-> stereo-panner (.valueOf) (.-pan) (.setValueAtTime  1 (now)))\n      (set! (-> stereo-panner (.valueOf) (.-pan) ) 0)\n      (-> stereo-panner (.valueOf) (.-pan) (.setValueAtTime 0 (now)))\n      (-> stereo-panner (.valueOf) (.-pan) (.setValueAtTime -1 (now) ))\n\n      (just-play! {:when 0 :offset 108 :duration 20})\n      (just-play! {:when 0 :offset 108})\n      \n\n      (take 100 (tunnl71.electron-node.signals/cos Math/PI  ))\n      (-> panner (.-panningModel))\n      (do\n        (js/clearInterval interval)\n        (add-pann-effect! {:n 100  :dx 1 :dy 0 :dz 0 :dt 0.2 :x0 0 :y0 0 :z0 0 :amplitude 32})\n        (enable-console-print!)\n        (def interval (js/setInterval #(do (println \"x \" (-> panner.positionX.value)\n                                                    \"\\ny \"(-> panner (.-positionY) .-value)\n                                                    \"\\nz \" panner.positionZ.value))\n                                      \"100\")))\n\n      (js/clearInterval interval)\n      (js/clearInterval 74)\n      (js/clearInterval 68)\n      \n      \n\n\n      (new-source!)\n      (add-pann-effect! 20)\n      (-> decoded-source (.start 100))\n\n      (-> v-effect (.play 0))\n      \n      (-> v-effect (.pause))\n      (-> v-effect (.))\n\n\n      (-> media-element-source (.))\n      \n      (-> media-element-source (.start audio-context.currentTime 10 20))\n      (-> media-element-source (. audio-context.currentTime 10 20)))))\n\n"]}