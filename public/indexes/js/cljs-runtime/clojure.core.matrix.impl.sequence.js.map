{"version":3,"sources":["clojure/core/matrix/impl/sequence.cljc"],"mappings":"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","names":["cljs.core/PROTOCOL_SENTINEL","cljs.core/ISeq","m","length","clojure.core.matrix.protocols/new-vector","rows","columns","clojure.core.matrix.protocols/new-matrix","dims","clojure.core.matrix.protocols/new-matrix-nd","data","clojure.core.matrix.protocols/coerce-param","x","x__28676__auto__","clojure.core.matrix.protocols/get-0d","cljs.core.nth","y","row","clojure.core.matrix.protocols/get-1d","indexes","temp__5802__auto__","cljs.core/seq","next-indexes","cljs.core/next","mv","cljs.core/first","clojure.core.matrix.protocols/get-nd","v","clojure.core.matrix.protocols/set-1d","clojure.core.matrix.protocols/convert-to-nested-vectors","column","clojure.core.matrix.protocols/set-2d","clojure.core.matrix.protocols/set-nd","new-shape","clojure.core.matrix.protocols/broadcast","a","clojure.core.matrix.protocols/get-shape","i","cljs.core/vec","clojure.core.matrix.protocols/get-columns","dimension","ldimension","cljs.core/long","clojure.core.matrix.protocols/get-major-slice-seq","cljs.core.ex_info","p1__36829#","cljs.core.mapv","clojure.core.matrix.protocols/get-slice","cljs.core.range","clojure.core.matrix.protocols/dimension-count","clojure.core.matrix.protocols/dimensionality","js/console.log","cljs.core/cons","cljs.core/count","cljs.core.mapcat","clojure.core.matrix.protocols/element-seq","f","p1__36830#","clojure.core.matrix.protocols/element-map","vec__36836","clojure.core.matrix.protocols/broadcast-compatible","p1__36831#","p2__36832#","more","vec__36839","seq__36840","first__36841","cljs.core.apply","p1__36833#","p2__36834#","p3__36835#","cljs.core.map","cljs.core.reduce","init","ms","p1__36844#","rest__36845#","clojure.core.matrix.protocols/element-map-indexed","as","vec__36850","p1__36846#","rest__36847#","vec__36854","seq__36855","first__36856","mr","p1__36848#","rest__36849#"],"sourcesContent":["(ns clojure.core.matrix.impl.sequence\n  \"Namepace implementing selected core.matrix protocols for clojure sequences.\n\n   Useful if you want to pass Clojure sequences directly to core.matrix functions.\n\n   WARNING: because they lack efficient indexed access, sequences will perform badly for most\n   array operations. In general they should be converted to other implementations before use.\"\n  (:require [clojure.core.matrix.protocols :as mp]\n            [clojure.core.matrix.implementations :as imp]\n    #?(:clj [clojure.core.matrix.macros :refer [scalar-coerce error]]))\n  #?(:clj (:import [clojure.lang ISeq])\n     :cljs (:require-macros [clojure.core.matrix.macros :refer [scalar-coerce error]])))\n\n;; core.matrix implementation for Clojure ISeq objects\n;;\n;; Important notes:\n;; 1. Intended mainly for accessing data. Not recommended for computations...\n;; 2. generally returns a persistent vector where possible\n\n#?(:clj (do\n  (set! *warn-on-reflection* true)\n  (set! *unchecked-math* true)\n))\n\n(extend-protocol mp/PImplementation\n  ISeq\n    (implementation-key [m] :sequence)\n    (meta-info [m]\n      {:doc \"Core.matrix implementation for Clojure ISeq objects\"})\n    (new-vector [m length]\n      (mp/new-vector [] length))\n    (new-matrix [m rows columns]\n      (mp/new-matrix [] rows columns))\n    (new-matrix-nd [m dims]\n      (mp/new-matrix-nd [] dims))\n    (construct-matrix [m data]\n      (mp/coerce-param [] data))\n    (supports-dimensionality? [m dims]\n      true))\n\n(extend-protocol mp/PIndexedAccess\n  ISeq\n    (get-1d [m x]\n      (scalar-coerce (nth m x)))\n    (get-2d [m x y]\n      (let [row (nth m x)]\n        (mp/get-1d row y)))\n    (get-nd [m indexes]\n      (if-let [indexes (seq indexes)]\n        (if-let [next-indexes (next indexes)]\n          (let [mv (nth m (first indexes))]\n            (mp/get-nd mv next-indexes))\n          (nth m (first indexes)))\n        m ;; TODO: figure out if this is a good return value? should it be an error?\n        )))\n\n(extend-protocol mp/PIndexedSetting\n  ISeq\n    (set-1d [m row v]\n      (mp/set-1d (mp/convert-to-nested-vectors m) row v))\n    (set-2d [m row column v]\n      (mp/set-2d (mp/convert-to-nested-vectors m) row column v))\n    (set-nd [m indexes v]\n      (mp/set-nd (mp/convert-to-nested-vectors m) indexes v))\n    (is-mutable? [m]\n      false))\n\n(extend-protocol mp/PBroadcast\n  ISeq\n    (broadcast [m new-shape]\n      (mp/broadcast (mp/convert-to-nested-vectors m) new-shape)))\n\n(extend-protocol mp/PBroadcastLike\n  ISeq\n    (broadcast-like [m a]\n      (mp/broadcast (mp/convert-to-nested-vectors a) (mp/get-shape m))))\n\n(extend-protocol mp/PSliceView\n  ISeq\n    (get-major-slice-view [m i]\n      (nth m i)))\n\n(extend-protocol mp/PSliceSeq\n  ISeq\n    (get-major-slice-seq [m] (vec m)))\n\n(extend-protocol mp/PMatrixRows\n  ISeq\n    (get-rows [m]\n      (vec m)))\n\n(extend-protocol mp/PMatrixColumns\n  ISeq\n    (get-columns [m]\n      (let [m (mp/coerce-param [] m)]\n        (mp/get-columns m))))\n\n(extend-protocol mp/PSliceSeq2\n  ISeq\n    (get-slice-seq [m dimension]\n      (let [ldimension (long dimension)]\n        (cond\n         (== ldimension 0) (mp/get-major-slice-seq m)\n         (< ldimension 0) (error \"Can't get slices of a negative dimension: \" dimension)\n         :else (mapv #(mp/get-slice m dimension %) (range (mp/dimension-count m dimension)))))))\n\n(extend-protocol mp/PConversion\n  ISeq\n    (convert-to-nested-vectors [m]\n      (if (> (mp/dimensionality (first m)) 0)\n        (mapv mp/convert-to-nested-vectors m)\n        (vec m))))\n\n(extend-protocol mp/PDimensionInfo\n  ISeq\n    (dimensionality [m]\n      (inc (mp/dimensionality (first m))))\n    (is-vector? [m]\n      (== 0 (mp/dimensionality (first m))))\n    (is-scalar? [m]\n      false)\n    (get-shape [m]\n      #?(:cljs (js/console.log (str \"shape of seq: \" m)))\n      (cons (count m) (mp/get-shape (first m))))\n    (dimension-count [m x]\n      (if (== x 0)\n        (count m)\n        (mp/dimension-count (first m) (dec x)))))\n\n(extend-protocol mp/PFunctionalOperations\n  ISeq\n    (element-seq [m]\n      (if (== 0 (long (mp/dimensionality (first m))))\n        m ;; handle 1D case, just return this sequence unchanged\n        (mapcat mp/element-seq m)))\n    (element-map\n      ([m f]\n        (mapv #(mp/element-map % f) m))\n      ([m f a]\n        (let [[m a] (mp/broadcast-compatible m a)]\n          (mapv #(mp/element-map % f %2) m (mp/get-major-slice-seq a))))\n      ([m f a more]\n        (let [[m a & more] (apply mp/broadcast-compatible m a more)] ; FIXME\n          (mapv #(mp/element-map % f %2 %3) m (mp/get-major-slice-seq a) (map mp/get-major-slice-seq more)))))\n    (element-map!\n      ([m f]\n        (error \"Sequence arrays are not mutable!\"))\n      ([m f a]\n        (error \"Sequence arrays are not mutable!\"))\n      ([m f a more]\n        (error \"Sequence arrays are not mutable!\")))\n    (element-reduce\n      ([m f]\n        (reduce f (mapcat mp/element-seq m)))\n      ([m f init]\n        (reduce f init (mapcat mp/element-seq m)))))\n\n(extend-protocol mp/PMapIndexed\n  ISeq\n    (element-map-indexed\n      ([ms f]\n        (mapv (fn [i m] (mp/element-map-indexed m #(apply f (cons i %1) %&)))\n              (range (count ms)) ms))\n      ([ms f as]\n        (let [[ms as] (mp/broadcast-compatible ms as)]\n          (mapv (fn [i m a]\n                  (mp/element-map-indexed m #(apply f (cons i %1) %&) a))\n                (range (count ms)) ms (mp/get-major-slice-seq as))))\n      ([ms f as more]\n        (let [[ms as & more] (apply mp/broadcast-compatible ms as more)] ; FIXME\n          (mapv (fn [i m a & mr]\n                  (mp/element-map-indexed m #(apply f (cons i %1) %&) a mr))\n                (range (count ms)) ms\n                (mp/get-major-slice-seq as)\n                (map mp/get-major-slice-seq more)))))\n    (element-map-indexed!\n      ([m f]\n        (error \"Sequence arrays are not mutable!\"))\n      ([m f a]\n        (error \"Sequence arrays are not mutable!\"))\n      ([m f a more]\n        (error \"Sequence arrays are not mutable!\"))))\n\n;; =====================================\n;; Register implementation\n\n;(imp/register-implementation '(1 2 3))\n"],"x_google_ignoreList":[0]}