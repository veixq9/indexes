{"version":3,"sources":["tunnl71/electron_node/tone/core.cljs"],"mappings":"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","names":["tunnl71.electron-node.tone.core/tone","js/module$node_modules$tone$build$Tone","tunnl71.electron-node.tone.core/now","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","tunnl71.electron-node.tone.core/create-timer","p__23217","vec__23218","cljs.core.nth","seq23216","self__5755__auto__","cljs.core/seq","sec","all","begin","_","cljs.core.println","interval-id","js/setInterval","now_","tunnl71.electron-node.tone.core/player2","path","onload","this","promise","G__23222","tunnl71.electron-node.tone.core/player","js/Error","config","default-config","cljs.core/clj->js","cljs.core.merge","G__23224","tunnl71.electron-node.tone.core/player-delay","tunnl71.electron_node.tone.core.player","cljs.core/Delay","tunnl71.electron-node.tone.core/delay-effect","G__23226","tunnl71.electron-node.tone.core/pitch-shift","x","tunnl71.electron-node.tone.core/destination","tunnl71.electron-node.tone.core/max-volume","tunnl71.electron-node.tone.core/master-volume","tunnl71.electron-node.tone.core/set-master-volume!","tunnl71.electron-node.tone.core/current-volume","clojure.datafy/datafy","tunnl71.electron-node.tone.core/volume-update!","delta","G__23228","tunnl71.electron-node.tone.core/volume-up!","tunnl71.electron_node.tone.core.volume_up_BANG_","G__23230","tunnl71.electron-node.tone.core/volume-down!","tunnl71.electron_node.tone.core.volume_down_BANG_","\u03b4","tunnl71.electron-node.tone.core/play!","player","cljs.core._EQ_"],"sourcesContent":["(ns tunnl71.electron-node.tone.core\n  (:require\n   ;; [web-audio-daw :as wad]\n\n\n   ;; [\"fs\" :as fs]\n   ;; [\"path\" :as path]\n\n   [clojure.math :as math]\n\n   ;; tunnl71.electron-node.solaris\n   ;; [tunnl71.electron-node.helpers :as h]\n   [\"tone\" :as Tone]\n   ;; [tone :as xxx]\n\n   ;; [tunnl71.tools.core :as t]\n   ;; [tunnl71.tools.obj :refer [->map-recursive prop-names]] \n   ;; goog.object\n\n   ;; tunnl71.tools.obj\n\n   [clojure.datafy :refer [datafy]]))\n\n\n\n;; xxx\n\n;; (-> tone (.-value))\n;; tone\n;; (def tt Tone)\n(def tone Tone)\n\n\n;; ================= time ========================================\n(defn now [] (-> Tone .now))\n(defn create-timer\n  [& [sec :as all]]\n  (let [begin (now)\n        _ (println sec)\n        interval-id (when sec\n                      (js/setInterval #(println (- (now) begin))\n                                      1000\n                                      ))]\n    (println \"interval-id \" interval-id)\n    #:timer{:fn\n            (fn []\n              (let [now_ (- (now) begin)]\n                now_))\n            :interval-id interval-id\n            }))\n\n(comment\n  (def my-timer (create-timer 1)))\n\n;; ================= player ========================================\n(defn player2\n  [path onload]\n  (let [this (new (-> Tone .-Player))\n        promise (-> this\n                    (.load path))]\n    (.then promise\n           onload)))\n\n(defn player\n  \"I\ud835\udd4aREAALLL\u03a8ASYNC!!!\"\n  ([]\n   (-> (new (-> Tone .-Player ))))\n  ([path]\n   (-> (new (-> Tone .-Player ) path)))\n  ([path config]\n   (let [default-config\n         {\n          :onload tone.noOp ,\n          :playbackRate 1 ,\n          :loop false ,\n          :autostart false ,\n          :loopStart 0 ,\n          :loopEnd 0 ,\n          :reverse false ,\n          :fadeIn 0 ,\n          :fadeOut 0\n          }]\n\n     (.set (-> (new (-> Tone .-Player )  path)) (clj->js (merge default-config config))))))\n\n(defn player-delay\n  ([path]\n   (player path {}))\n  ([path config]\n   (let [default-config\n         {\n          :onload tone.noOp ,\n          :playbackRate 1 ,\n          :loop false ,\n          :autostart false ,\n          :loopStart 0 ,\n          :loopEnd 0 ,\n          :reverse false ,\n          :fadeIn 0 ,\n          :fadeOut 0\n          }]\n\n     (delay (.set (-> (new (-> Tone .-Player )  path)) (clj->js (merge default-config config)))))))\n\n\n\n\n(defn delay-effect\n  [sec]\n  (new (-> tone (.-Delay ) ) sec))\n\n(defn pitch-shift\n  \"1 octave = 12\"\n  ([]\n   (-> (new (-> Tone .-PitchShift) )))\n  ([x]\n   (-> (new (-> Tone .-PitchShift) x))))\n\n(def destination (.-Destination Tone) )\n\n\n(def max-volume 0)\n(defn master-volume\n  []\n  (-> Tone (.-Master) (.-volume) (.-value)))\n\n(defn set-master-volume!\n  [x]\n  (if (> x max-volume)\n    (do (println \"vol too loud\"))\n    (set! (-> Tone (.-Master) (.-volume) (.-value)) x)))\n\n(defn current-volume\n  []\n  (-> (:volume (datafy player)) .-value))\n\n(defn volume-update!\n  ([delta]\n   (let [x (-> player (.-volume) .-value)]\n     (set! (-> player (.-volume) .-value) (+ delta x)))))\n\n(defn volume-up!\n  ([]\n   (volume-up! 10))\n  ([delta]\n   (volume-update! delta)))\n\n(defn volume-down!\n  ([]\n   (volume-down! 10))\n  ([\u03b4]\n   (volume-update! (- \u03b4))))\n\n(defn play!\n  [player]\n  (println (current-volume))\n  (while (>= (current-volume) -10)\n    (do (println \"too loud\")\n        (volume-down!)))\n  \n  (if (= \"started\" (-> player (.-state)))\n    (do (-> player (.stop)))\n    (-> player (.start)))\n\n\n  (println \"volume: \" (current-volume))\n  (println (-> player (.-state))))\n\n\n"]}