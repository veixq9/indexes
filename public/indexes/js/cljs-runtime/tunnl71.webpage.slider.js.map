{"version":3,"sources":["tunnl71/webpage/slider.cljs"],"mappings":";AAMA,AAAKA,sCAAU,8CAAKC;AAAL,AAAU,OAACC,oBAAU,WAAKC,IAAIC,EAAEC;AAAX,AAAc,OAACC,8CAAMH,IAAIC,EAAE,KAAA,JAAGC;GAAzC,mCAAqD,AAACE,0BAAY,AAACC,8BAAaP;;AACzG,sCAAA,tCAAMQ,oFACHC;AADH,AAEE,OAAA,kFAAM,AAACC,yBAAW,AAACC,8CAAMC,uBAAS,4CAAA,WAAAC,vDAACC;AAAD,AAAM,QAAAD,mBAAA;GAAU,oHAAA,mFAAA,+CAAA,+CAAA,+CAAA,pVAACC,4CAAI,AAACC,gDAAQC,cAAIP;;AAEtE,AAmBA,sCAAA,tCAAMQ,oFACHC;AADH,AAEE,kBAAKA;AAAL,AAAA,0FAAA,sDAAA,2CAAA,qDAAA,QAAA,sDAAA,AAAAC,mCAAA,kDAAA,IAAA,iDAAA,MAAA,uDAAA,2CAAA,uDAAA,eAAA,xSAE0BD,uWAEX,WAAKE;AAAL,AACE,IAAMC,YAAU,AAACC,SAAY,AAAA,AAAIF;AAAjC,AACE,OAACG,sBAAOL,kBAAcG;;;;AAE3C;;;gCAAA,hCAAMG,wEAEHC;AAFH,AAIE,IAAMG,QAAM,AAACC,gDAAO,AAAC9B,oCAAU,AAAA,0GAAA,AAAAoB,gBAAoBM;IAAnDC,aACgB,wHAAA,mFAAA,mFAAA,uDAAA,mFAAA,uDAAA,mFAAA,uDAAA,mFAAA,5rBAACQ,6CAAK,AAACnB,gDAAQoB,oBAASP;QADxC,AAAAD,4CAAAD,WAAA,IAAA,/DACOI;QADP,AAAAH,4CAAAD,WAAA,IAAA,/DACSK;QADT,AAAAJ,4CAAAD,WAAA,IAAA,/DACWM;QADX,AAAAL,4CAAAD,WAAA,IAAA,/DACaO;AADb,AAEE,yBAAA,zBAACG;AAAD,AAAW,yFAAA,lFAACC,mDAAMZ,eAAea,4FAAwB,oCAAA,2CAAA,+CAAA,AAAAnB,mBAAA,+CAAA,AAAAA,mBAAA,+CAAA,AAAAA,mBAAA,gDAAA,AAAAA,rUAACX,8IAAesB,kEAAMC,kEAAMC,mEAAMC;;;AAC3F,yBAAA,zBAACG;AAAD,AAAW,OAACb,sBAAOK,MAAM,AAAC7B,oCAAU,AAAA,0GAAA,AAAAoB,gBAAoBM;;;AAExD,kBAAKA;AAAL,AAAA,0FAAA,4EAAA,2CAAA,uDAAA,OAAA,uDAAA,6DAAA,mFAAA,gEAAA,mFAAA,+DAAA,yBAMG,6CAAA,mFAAA,gEAAA,mFAAA,oEAAA,mFAAA,qDAAA,2CAAA,uDAAA,2CAAA,uDAAA,QAAA,oEAAA,/uBAACc,swBAE6D,AAAA,0GAAA,AAAApB,gBAAoBM,6CAC5E,4CAAA,WAAAe,iBAAAC,xEAAC3B;AAAD,AAAM,0BAAA,mFAAA,oEAAA,mFAAA,qDAAA,2CAAA,uDAAA,2CAAA,uDAAA0B,iBAAA,oEAAA,3kBAACE,kmBAC2D,4CAAAD;oSAV3E,iIAAA,iIAAA,niBASS,mFAAA,MAAA,QAAA,OAAA,gBAAA,mFAAA,AAAAtB,mBAAA,AAAAA,mBAAA,AAAAA,mBAAA,AAAAA,zCAGkEW,mBAAGC,mBAAGC,mBAAGC,gGAChFhB,oCAAaa,6FACbb,oCAAac,6FACbd,oCAAae","names":["tunnl71.webpage.slider/hex->rgba","hex","cljs.core/reduce-kv","acc","k","v","cljs.core.assoc","thi.ng.color.core/as-rgba","thi.ng.color.core/hex->int","tunnl71.webpage.slider/rgba->hex","map-rgba","thi.ng.color.core/as-css","cljs.core.apply","thi.ng.color.core/rgba","p1__49217#","cljs.core.map","cljs.core.partial","cljs.core/get","tunnl71.webpage.slider/slider-input","color-element","cljs.core/deref","e","new-value","js/parseInt","cljs.core/reset!","tunnl71.webpage.slider/slider","cursor-palette","vec__49222","cljs.core.nth","state","reagent.core.atom","r","g","b","a","cljs.core.mapv","reagent.core/cursor","reagent.core/track!","cljs.core.swap_BANG_","cljs.core/assoc","cljs.core.into","p1__49220#","p2__49221#","cljs.core/identity"],"sourcesContent":["(ns tunnl71.webpage.slider\n  (:require [thi.ng.color.core :as col]\n            [reagent.core :as r]\n            [tunnl71.tools.core :as t]))\n\n\n(def hex->rgba (fn [hex] (reduce-kv (fn [acc k v] (assoc acc k (* v 255))) {} (col/as-rgba (col/hex->int hex)))))\n(defn rgba->hex\n  [map-rgba]\n  (:col (col/as-css (apply col/rgba (map #(/ % 255) (map (partial get map-rgba) [:r :g :b :a]))))))\n\n(comment\n  (def cursor-palette (r/cursor tunnl71.webpage.core/system [:palette]))\n\n  @(r/reaction ((juxt :r :g :b :a) (hex->rgba (:background-color @cursor-palette))))\n\n  (:col (col/as-css (apply col/rgba (map #(/ % 255) [@r @g @b @a]))))\n  (:col (col/as-css (apply col/rgba (map #(/ % 255) (col/rgba (col/as-css ))))))\n\n  (vals col/as-css (vals ))\n\n  (col/as-css (col/rgba (vals (hex->rgba (:background-color @cursor-palette )))))\n  (:col (col/as-css (col/rgba @r @g @b @a)))\n  (hex->rgba \"yellow\")\n  (col/as-css )\n\n  (col/as-css {:r 2  :g 2  :b 2 :a 2 })\n  (col/as-css (col/rgba 2 2 2 2))\n  )\n\n(defn slider-input\n  [color-element]\n  (fn [color-element]\n    [:input\n     {:type \"range\" :value @color-element :min 0 :max 255\n      :style {:width \"100%\"}\n      :on-change (fn [e]\n                   (let [new-value (js/parseInt (.. e -target -value))]\n                     (reset! color-element new-value)))}]))\n\n(defn slider\n  \"rgba\"\n  [cursor-palette]\n\n  (let [state (r/atom (hex->rgba (:background-color @cursor-palette)))\n        [r g b a] (mapv (partial r/cursor state) [[:r] [:g] [:b] [:a]])]\n    (r/track! #(swap! cursor-palette assoc :background-color (rgba->hex {:r @r :g @g :b @b :a @a})))\n    (r/track! #(reset! state (hex->rgba (:background-color @cursor-palette))))\n    \n    (fn [cursor-palette]\n      [:div.w3-container {:width \"300%\" :clear :both}\n       [:div.w3-row\n        ;; [:p (pr-str @cursor-palette)]\n        ;; [:p (pr-str [@r @g @b @a])]\n        [:p.w3-cell \"colors\"]]\n       (into [:div.w3-row\n              [:div.w3-cell\n               [:span {:style {:color \"white\" :margin-right \"10px\"}} (:background-color @cursor-palette)]]]\n             (map #(identity [:div.w3-cell\n                              [:span {:style {:color %1 :margin-right \"10px\"}} (str %2)]\n                              #_[:i.material-icons \"blank\"]\n                              #_[:span \" \"]]) [\"red\" \"green\" \"blue\" \"white\"] [@r @g @b @a]))\n       [slider-input r]\n       [slider-input g]\n       [slider-input b]\n       #_[slider-input a]\n       ])))\n\n"]}