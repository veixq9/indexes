{"version":3,"sources":["tunnl71/tools/obj.cljs"],"mappings":"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","names":["tunnl71.tools.obj/method-names","obj","js/Object","tunnl71.tools.obj/prop-names","tunnl71.tools.obj/props","iter__5523__auto__","s__17461","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__17463","cljs.core/chunk-buffer","i__17462","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__17460","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","p","result","tunnl71.tools.obj/->map","cljs.core.apply","cljs.core/merge","s__17465","b__17467","i__17466","iter__17464","cljs.core.js__GT_clj","cljs.core.keyword","var_args","G__17469","tunnl71.tools.obj/->map-recursive","js/Error","tunnl71.tools.obj.__GT_map_recursive","max-depth","cljs.core/coll?","cljs.core/array?","ps","ps-clj","s__17471","b__17473","i__17472","iter__17470","_","cljs.core.println","result_","cljs.core._EQ_","e17474","e17475","e","js/console","tunnl71.tools.obj/o","cljs.core/PROTOCOL_SENTINEL","cljs.core/chunk-first"],"sourcesContent":["(ns tunnl71.tools.obj)\n\n(defn method-names\n  [obj]\n  (.getOwnPropertyNames js/Object (.getPrototypeOf js/Object obj)))\n\n(defn prop-names\n  [obj]\n  (.getOwnPropertyNames js/Object obj))\n\n(defn props\n  [obj]\n  (for [p (prop-names obj)]\n    (let [result (aget obj p )]\n      result)))\n\n(defn ->map\n  [obj]\n  (apply merge (for [p (js->clj (prop-names obj) {:keywordize-keys true})]\n                 (let [result (aget obj p )]\n                   {(keyword p) result}))))\n\n\n(defn ->map-recursive\n  ([obj]\n   (->map-recursive obj 0))\n  ([obj max-depth]\n   (cond\n     (or (string? obj) (coll? obj) (array? obj))\n     obj\n\n     :default\n     (let [ps (prop-names obj)\n           ps-clj (js->clj ps {:keywordize-keys false})]\n       (apply merge (for [p ps-clj]\n                      (let [_ (println p)\n                            result_ (aget obj p )\n                            result (if (not (= max-depth 0))\n                                     (try (->map-recursive result_ (dec max-depth))\n                                          (catch  js/Object e\n                                            (.log js/console e)\n                                            (println \"yo\")\n                                            result_))\n                                     result_)]\n                        ;; {(keyword p) result}\n                        {(keyword p) result})))))))\n\n(def o js/Object)\n(extend-type o\n  clojure.core.protocols/Datafiable\n  (datafy [obj] (->map-recursive obj)))\n\n\n(comment\n\n  (datafy \"foo\")\n  \n  (try (.foo \"bar\")\n       (catch  js/Object e\n         (.log js/console e)\n         (println \"caught\")\n         2))\n  (clojure.datafy/datafy js/Object)\n\n  (object? js/Object)\n  js/String\n  )\n"]}