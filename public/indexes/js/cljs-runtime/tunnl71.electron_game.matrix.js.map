{"version":3,"sources":["tunnl71/electron_game/matrix.cljs"],"mappings":"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","names":["var_args","G__48146","tunnl71.electron-game.matrix/step","js/Error","matrix_","automata-fn","tunnl71.electron_game.matrix.step","clojure.core.matrix.matrix","vec__48151","cljs.core.nth","nrow","ncol","clojure.core.matrix/shape","iter__5523__auto__","s__48157","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__48159","cljs.core/chunk-buffer","i__48158","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__48156","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","i","cljs.core.range","s__48165","b__48167","i__48166","iter__48164","s__48181","b__48183","i__48182","iter__48180","j","cljs.core._EQ_","clojure.core.matrix.mget","G__48174","G__48178","G__48186","G__48188","p1__48143#","cljs.core.map","G__48191","tunnl71.electron-game.matrix/draw!","w","h","l","row0","col0","ctx","js/document","seq__48192","chunk__48193","count__48194","i__48195","c__5568__auto__","cljs.core/chunk-first","cljs.core/next","row","clojure.core.matrix/row-count","seq__48217","chunk__48218","count__48219","i__48220","seq__48222","chunk__48223","count__48224","i__48225","col","clojure.core.matrix/column-count","tunnl71.electron_game.matrix.draw_BANG_","G__48232","tunnl71.electron-game.matrix/refresh","cljs.core.partition","cljs.core.repeatedly","cljs.core/rand-int","tunnl71.electron_game.matrix.refresh","tunnl71.electron-game.matrix/test-matrix","clojure.core.matrix/matrix?"],"sourcesContent":["(ns tunnl71.electron-game.matrix\n  (:require\n   [reagent.core :as r]\n   [reagent.dom :as rd]\n   [react-dom :as react-dom]\n\n   [tunnl71.tools.core :as t]\n   [clojure.core.async :as a]\n\n   [clojure.spec.alpha :as s]\n   [com.rpl.specter :as sp]\n\n   [clojure.core.matrix :as m]\n   ))\n\n(defn step\n  ([matrix_]\n   (let [automata-fn {\n                      [0 0 0] 0\n                      [0 0 1] 1\n                      [0 1 0] 0\n                      [0 1 1] 0\n                      [1 0 0] 1\n                      [1 0 1] 0\n                      [1 1 0] 1\n                      [1 1 1] 0\n                      }]\n     (step matrix_ automata-fn)))\n  ([matrix_ automata-fn]\n   (m/matrix \n    (let [[nrow ncol] (m/shape matrix_)]\n      (for [i (range nrow)]\n        (for [j (range ncol)]\n          (cond\n            (or (= j 0) (= j (dec ncol)))\n            (m/mget matrix_ i j)\n\n            :default\n            (automata-fn\n             (map #(m/mget matrix_ i %)\n                  [(- j 1) j (+ j 1)])))))))))\n\n(defn draw!\n  ([matrix_ w h l row0 col0]\n   ;; (println \"drawing matrix\")\n   (let [ctx (-> js/document (.getElementById \"canvas\") (.getContext \"2d\"))]\n     (doseq [row (range (m/row-count matrix_))]\n       (doseq [col (range (m/column-count matrix_))]\n         (set! (.-fillStyle ctx) (if (= 0 (m/mget matrix_ row col)) \"#111111\" \"#00eecc\" ))\n         (-> ctx\n             (.fillRect (+ col0 (* col l)) (+ row0 (* row l))  l l ))))))\n  ([matrix_ w h l]\n   (draw! matrix_ w h l 30 0)))\n\n(defn refresh\n  ([ncol nrow]\n   (m/matrix (partition nrow (repeatedly (* nrow ncol) #(rand-int 2)))))\n  ([]\n   (refresh 10 10)))\n\n(def test-matrix\n  (refresh))\n\n\n\n(assert (= (m/shape test-matrix) [10 10]))\n(assert\n (m/matrix? (tunnl71.electron-game.matrix/step \n             test-matrix)))\n\n\n\n\n;; (m/new-matrix 3 10 )\n\n;; (m/abs -3)\n\n\n\n"]}