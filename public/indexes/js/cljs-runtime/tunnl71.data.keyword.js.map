{"version":3,"sources":["tunnl71/data/keyword.cljc"],"mappings":"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","names":["var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","tunnl71.data.keyword/concat","seq45020","self__5755__auto__","cljs.core/seq","kws","cljs.core.keyword","cljs.core.apply","cljs.core/str","cljs.core.map","cljs.core/name","tunnl71.data.keyword/standardize","x","clojure.string/lower-case","clojure.string/replace","tunnl71.data.keyword/add-ns","k","ns","cljs.core/Keyword","cljs.core/qualified-keyword?","tunnl71.data.keyword.concat","tunnl71.data.keyword/ns-form","tunnl71.data.keyword/lift","f","xs","cljs.core/coll?","g","result","p1__45021#","tunnl71.data.keyword/blank?","clojure.string/blank?","tunnl71.data.keyword/triml","clojure.string/triml","tunnl71.data.keyword/trim","clojure.string/trim","tunnl71.data.keyword/index-of","clojure.string/index-of","tunnl71.data.keyword/trimr","clojure.string/trimr","tunnl71.data.keyword/split","clojure.string/split","tunnl71.data.keyword/upper-case","clojure.string/upper-case","tunnl71.data.keyword/trim-newline","clojure.string/trim-newline","tunnl71.data.keyword/lower-case","tunnl71.data.keyword/split-lines","clojure.string/split-lines","tunnl71.data.keyword/replace","tunnl71.data.keyword/includes?","clojure.string/includes?","tunnl71.data.keyword/last-index-of","clojure.string/last-index-of","tunnl71.data.keyword/escape","clojure.string/escape","tunnl71.data.keyword/starts-with?","clojure.string/starts-with?","tunnl71.data.keyword/replace-first","clojure.string/replace-first","tunnl71.data.keyword/join","clojure.string/join","tunnl71.data.keyword/reverse","clojure.string/reverse","tunnl71.data.keyword/capitalize","clojure.string/capitalize","tunnl71.data.keyword/ends-with?","clojure.string/ends-with?","tunnl71.data.keyword/return","tunnl71.data.keyword/keywordize-keys","clojure.walk/keywordize-keys"],"sourcesContent":["(ns tunnl71.data.keyword\n  (:refer-clojure :exclude [concat reverse replace])\n  #_(:require [clojure.core.specs.alpha :as s]))\n\n(defn concat\n  ([& kws]\n   (keyword (apply str (map name kws)))))\n\n(defn standardize\n  [x]\n  (keyword (clojure.string/lower-case\n            (clojure.string/replace (clojure.string/replace (name x) #\"[\\s\\_]\" \"-\")\n                                    #\"#\" \"no\"))))\n\n(defn ^{:deprecated \"0.1.1\"} add-ns\n  \"DEPRECATED: use ns-form instead\n  adds a namespace to the key if it's not already qualified by a namespace\"\n  [k ns]\n  (if (and (keyword? k)\n           (not (qualified-keyword? k)))\n    (concat ns :/ k)\n    k))\n\n(defn ns-form\n  \"adds a namespace to the key if it's not already qualified by a namespace\"\n  [ns k]\n  (if (and (keyword? k)\n           (not (qualified-keyword? k)))\n    (concat ns :/ k)\n    k))\n\n\n;; ================= lift clojure.string ========================================\n#_(defn lift\n  \"string -> string -> (kw -> kw)\"\n  ([f]\n   (fn [k]\n     (keyword (f (name k)))))\n\n  ([f k]\n   ((lift f) k)))\n\n(defn lift\n  \"string -> ? -> (kw -> ?)\"\n  ([f]\n   (fn [& xs]\n     (letfn [(g [x]\n               (cond\n                 (string? x)\n                 (keyword x)\n\n                 (coll? x)\n                 (map g x)\n                 \n                 :default\n                 x))]\n       (let [\n             result (apply f (map #(if (keyword? %) (name %) %) xs))]\n\n         (g result)))))\n  #_([f & ks]\n     (apply (lift f) ks)))\n\n;; (map eval (reduce-kv (fn [acc k v] (cons `(def ~k (lift ~v)) acc)) '() (ns-publics 'clojure.string)))\n;; (reduce-kv (fn [acc k v] (cons `(def ~k (lift ~v)) acc)) '() (ns-publics 'clojure.string))\n\n(def blank? (tunnl71.data.keyword/lift #'clojure.string/blank?))\n(def triml (tunnl71.data.keyword/lift #'clojure.string/triml))\n(def trim (tunnl71.data.keyword/lift #'clojure.string/trim))\n(def index-of (tunnl71.data.keyword/lift #'clojure.string/index-of))\n(def trimr (tunnl71.data.keyword/lift #'clojure.string/trimr))\n(def split (tunnl71.data.keyword/lift #'clojure.string/split))\n(def upper-case (tunnl71.data.keyword/lift #'clojure.string/upper-case))\n(def trim-newline (tunnl71.data.keyword/lift #'clojure.string/trim-newline))\n(def lower-case (tunnl71.data.keyword/lift #'clojure.string/lower-case))\n(def split-lines (tunnl71.data.keyword/lift #'clojure.string/split-lines))\n(def replace (tunnl71.data.keyword/lift #'clojure.string/replace))\n(def includes? (tunnl71.data.keyword/lift #'clojure.string/includes?))\n#?(:clj\n   (def re-quote-replacement (tunnl71.data.keyword/lift #'clojure.string/re-quote-replacement)))\n(def last-index-of (tunnl71.data.keyword/lift #'clojure.string/last-index-of))\n(def escape (tunnl71.data.keyword/lift #'clojure.string/escape))\n(def starts-with? (tunnl71.data.keyword/lift #'clojure.string/starts-with?))\n(def replace-first (tunnl71.data.keyword/lift #'clojure.string/replace-first))\n(def join (tunnl71.data.keyword/lift #'clojure.string/join))\n(def reverse (tunnl71.data.keyword/lift #'clojure.string/reverse))\n(def capitalize (tunnl71.data.keyword/lift #'clojure.string/capitalize))\n(def ends-with? (tunnl71.data.keyword/lift #'clojure.string/ends-with?))\n\n\n;; ================= more stuff ========================================\n(defn return\n  [x]\n  (keyword (str x)))\n\n(def keywordize-keys clojure.walk/keywordize-keys )\n"]}