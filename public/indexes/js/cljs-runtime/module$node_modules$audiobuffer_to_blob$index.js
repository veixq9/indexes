shadow$provide.module$node_modules$audiobuffer_to_blob$index=function(global,require,module,exports){function writeString(view,offset,string){for(let i=0;i<string.length;i++)view.setUint8(offset+i,string.charCodeAt(i))}module.exports=function(audioBuffer,type){var numberOfChannels=audioBuffer.numberOfChannels,sampleRate=audioBuffer.sampleRate,length=audioBuffer.length;const interleaved=new Float32Array(length*numberOfChannels);for(let channel=0;channel<numberOfChannels;channel++){const channelData=
audioBuffer.getChannelData(channel);for(let i=0;i<length;i++)interleaved[i*numberOfChannels+channel]=channelData[i]}audioBuffer=new ArrayBuffer(44+2*interleaved.length);audioBuffer=new DataView(audioBuffer);writeString(audioBuffer,0,"RIFF");audioBuffer.setUint32(4,36+2*interleaved.length,!0);writeString(audioBuffer,8,"WAVE");writeString(audioBuffer,12,"fmt ");audioBuffer.setUint32(16,16,!0);audioBuffer.setUint16(20,1,!0);audioBuffer.setUint16(22,numberOfChannels,!0);audioBuffer.setUint32(24,sampleRate,
!0);audioBuffer.setUint32(28,sampleRate*numberOfChannels*2,!0);audioBuffer.setUint16(32,2*numberOfChannels,!0);audioBuffer.setUint16(34,16,!0);writeString(audioBuffer,36,"data");audioBuffer.setUint32(40,2*interleaved.length,!0);numberOfChannels=44;for(sampleRate=0;sampleRate<interleaved.length;sampleRate++,numberOfChannels+=2)length=Math.max(-1,Math.min(1,interleaved[sampleRate])),audioBuffer.setInt16(numberOfChannels,0>length?32768*length:32767*length,!0);return new Blob([audioBuffer],{type})}}
//# sourceMappingURL=module$node_modules$audiobuffer_to_blob$index.js.map
