{"version":3,"sources":["tunnl71/electron_node/helpers.cljs"],"mappings":"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","names":["tunnl71.electron-node.helpers/audio-context","js/AudioContext","tunnl71.electron-node.helpers/now","tunnl71.electron-node.helpers/node:gain","p__24025","map__24026","cljs.core/--destructure-map","cljs.core.get","tunnl71.electron-node.helpers/panner","x","y","z","panningModel","distanceModel","refDistance","maxDistance","rollOfFactor","coneInnerAngle","coneOuterAngle","coneOuterGain","ks_","defaults","ks","cljs.core.merge","p","cljs.core/clj->js","state","cljs.core.atom","cljs.core/add-watch","p__24027","map__24028","tunnl71.electron-node.helpers/alternate-stereo-pan","stereo-panner","dt","cljs.core.doall","cljs.core.take","cljs.core.map","v","t","tunnl71.electron-node.signals/cos","Math/PI","cljs.core/iterate","cljs.core.partial","cljs.core/+","tunnl71.electron-node.helpers/node:panner-equalpower","tunnl71.electron-node.helpers/panner-3d","tunnl71.electron-node.helpers/node:stereo-panner","tunnl71.electron-node.helpers/connect","source","nodes","n","ns","cljs.core/empty?","cljs.core/first","cljs.core/rest","tunnl71.electron-node.helpers/new-source!","source-path","decoded-source","js/fetch","result","ab","cljs.core.println","decoded","cljs.core/reset!","js/AudioBufferSourceNode","p__24030","map__24031","tunnl71.electron-node.helpers/add-pann-effect!","dx","dy","dz","x0","y0","z0","amplitude","t0","ts","p1__24029#","dws","d","cljs.core/cycle","cljs.core.concat","cljs.core.repeat","cljs.core/-","dxs","dys","dzs","xs","cljs.core.reductions","ys","zs","p__24032","vec__24033","cljs.core.nth","cljs.core/vector","p__24036","map__24037","tunnl71.electron-node.helpers/just-play!","when","offset","duration","js/setTimeout","cljs.core/deref","tunnl71.electron-node.helpers/init","tunnl71.electron-node.helpers/source"],"sourcesContent":["(ns tunnl71.electron-node.helpers\n  #_(:require [\"tone\"]))\n\n(def audio-context (new js/AudioContext ))\n\n(defn now []\n  audio-context.currentTime)\n#_(defn gain!\n    [target dt]\n    (-> gain-node (.-gain) (.linearRampToValueAtTime target (+ audio-context.currentTime dt))))\n\n(defn node:gain [] (-> audio-context (.createGain )))\n\n;; panner\n(comment\n  (defprotocol Associable\n    (assoc!! [this k v]))\n  (defprotocol Creatable\n    (create! [this]))\n  (defrecord Panner [x\n                     y\n                     z\n                     panningModel\n                     distanceModel\n                     refDistance\n                     maxDistance\n                     rollOfFactor\n                     coneInnerAngle\n                     coneOuterAngle\n                     coneOuterGain]\n    Associable\n    (assoc!! [panner k v] (-> panner (.-orientationX) (.setValueAtTime 1 audio-context.currentTime)))\n\n    Creatable\n    (create! [this ] this)\n    )\n\n  (->Panner 1 2 3))\n(defn panner\n  ;; INCOMPLETE\n  [{:keys [x\n           y\n           z\n           panningModel\n           distanceModel\n           refDistance\n           maxDistance\n           rollOfFactor\n           coneInnerAngle\n           coneOuterAngle\n           coneOuterGain] \n    :or {} :as ks_}]\n\n  (let [\n        defaults {:x 0\n                  :y 0\n                  :z 0\n                  :panningModel  \"equalpower\"\n                  :distanceModel \"inverse\"\n                  :refDistance 1\n                  :maxDistance 10000\n                  :rollOfFactor   1\n                  :coneInnerAngle 360\n                  :coneOuterAngle 0\n                  :coneOuterGain 0\n                  }\n        ks (merge defaults ks_)\n        p (-> audio-context (.createPanner\n                             (clj->js ks)))\n        state (atom ks)]\n    (add-watch state :x (fn set-val!\n                          []\n                          (-> panner (.-orientationX) (.setValueAtTime 1 audio-context.currentTime))\n                          (-> panner (.-orientationY) (.setValueAtTime 1 audio-context.currentTime))\n                          (-> panner (.-orientationZ) (.setValueAtTime 0 audio-context.currentTime))))\n    state))\n;; (panner {:fo \"eb\"})\n(defn alternate-stereo-pan\n  [{:keys [stereo-panner dt] :or {dt 0.5}}]\n  (doall (take 100 (map (fn [v t]\n                          (-> stereo-panner (.valueOf) (.-pan) (.setValueAtTime v t)))\n                        (tunnl71.electron-node.signals/cos Math/PI )\n                        (iterate (partial + dt) (now))))))\n(defn node:panner-equalpower\n  []\n  (-> audio-context (.createPanner (clj->js {:panningModel \"equalpower\"\n                                             ;; :distanceModel \"inverse\"\n                                             ;; :refDistance 1\n                                             ;; :maxDistance 10000\n                                             ;; :rollOfFactor 1\n                                             ;; :coneInnerAngle 360\n                                             ;; :coneOuterAngle 0\n                                             ;; :coneOuterGain 0\n                                             }))))\n(defn panner-3d\n  []\n  (-> audio-context (.createPanner (clj->js {:panningModel \"hr???\"\n                                             :distanceModel \"inverse\"\n                                             :refDistance 1\n                                             :maxDistance 10000\n                                             :rollOfFactor 1\n                                             :coneInnerAngle 360\n                                             :coneOuterAngle 0\n                                             :coneOuterGain 0\n                                             }))))\n(defn node:stereo-panner [] (-> audio-context (.createStereoPanner )))\n\n(defn connect\n  [source nodes]\n  (loop [n source\n         ns nodes]\n    (if (empty? ns)\n      (.connect n audio-context.destination)\n      (do\n        (.connect n (first ns))\n        (recur (first ns) (rest ns))))))\n\n(defn new-source!\n  [source-path]\n  (let [decoded-source (atom nil)]\n    (-> (js/fetch\n         source-path)\n        (.then (fn [result]\n                 (-> (-> result (.arrayBuffer))\n                     (.then (fn [ab]\n                              (println ab)\n                              (.decodeAudioData audio-context ab)))\n\n                     (.then (fn [decoded]\n                              (println \"decoded\" decoded)\n                              (reset! decoded-source (new js/AudioBufferSourceNode audio-context (clj->js {:buffer  decoded})))))))))\n\n    #_(while (nil? @decoded-source)\n        (js/setTimeout #(do (println \"fucky fucky\")) \"3000\"))\n    decoded-source\n    ))\n\n(defn add-pann-effect!\n  [{:keys [n dt dx dy dz x0 y0 z0 amplitude] :or {n 1 dt 0.1 dz 0.1 dx 0.1 dy 0.1 x0 panner.positionX.value\n                                                  y0 panner.positionX.value\n                                                  z0 panner.positionZ.value0\n                                                  amplitude 32\n                                                  }}]\n  (let [\n        t0 (now)\n        ts (iterate #(+ % dt) t0)\n\n        dws (fn [d] (cycle (concat (repeat amplitude d) (map - (repeat amplitude d)) (map - (repeat amplitude d)) (repeat amplitude d))))\n        dxs (dws dx)\n        dys (dws dy)\n        dzs (dws dz)\n        xs (reductions + x0 dxs)\n        ys (reductions + y0 dys)\n        zs (reductions + z0 dzs)\n\n        ;; ys (cycle (take 4 (iterate (partial + dy) y0)))\n        ]\n    (doall (take n\n                 (map (fn [[x y z] t]\n                        (-> panner (.-positionX) (.setValueAtTime x t))\n                        (-> panner (.-positionY) (.setValueAtTime y t))\n                        (-> panner (.-positionZ) (.setValueAtTime z t)))\n                      (map vector xs ys zs) ts)))))\n\n(defn just-play!\n  [source-path {:keys [when offset duration nodes] :or {nodes []}}]\n  (let [decoded-source (new-source! source-path)]\n    (js/setTimeout #(do (connect @decoded-source nodes)\n                        (-> @decoded-source (.start when offset duration)))\n                   4000)\n    decoded-source\n    )) \n\n(defn init\n  [source-path]\n  (def source (new-source! \"/home/veix/Downloads/Solaris Ft Rubey\uff08a song for Andrei Tarkovsky\uff09.mp3\"))\n\n  )\n"]}