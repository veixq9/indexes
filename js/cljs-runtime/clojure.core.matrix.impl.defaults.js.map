{"version":3,"sources":["clojure/core/matrix/impl/defaults.cljc"],"mappings":";AA4BA,8EAAA,9EAAeA;AAuBf;;;uDAAA,vDAAOC,sHAEHC;AAFJ,AAGI,IAAAC,qBAAY,AAACE,wCAAaH;AAA1B,AAAA,oBAAAC;AAAA,SAAAA,LAASC;AAAT,AACE,OAACE,+CAAOC,iBAAEH;;AADZ;;;AAMJ;;;6DAAA,7DAAMI,kIAEFN;AAFJ,AAGI,IAAMO,OAAK,AAACC,gBAAK,AAACC,6CAAkBT;IAC9BU,OAAK,AAACC,2CAAgBX;IACtBY,gBACiB,AAACC,6CAAEC,OAAUJ;AAHpC,AAIE,GACE,UAAA,TAAIH;AACF,OAACQ,8CAAiB,AAACC,qCAAUhB;;AAFjC,GAGE,EAAK,UAAA,TAAIO,mBAAQK;AAEN,OAACK,2CAAgB,uFAAA,vFAACC,iJAAkClB;;AALjE,GAMEY;AACE,OAACK,2CAAgB,uFAAA,vFAACC,iJAAiElB;;AAPvF,AASI,OAACiB,2CAAgB,uFAAA,vFAACC,iJAA0DlB;;;;;;AAWtF,AAAA,AAAA,CAAAmB,8CAAA,YAAA;;AAAA,CAAAC,iDAAA,YAEI,WAAqBpB;AAArB,AAAA;;;AAFJ,CAAAqB,wCAAA,YAGI,WAAYrB;AAAZ,AAAA;;;AAHJ,CAAAsB,+CAAA,YAII,WAAmBtB,EAAE4B;AAArB,AACE,sDAAA,/CAACN,gFAAuBM;;;AAL9B,CAAAL,yCAAA,YAMI,WAAavB,EAAE6B;AAAf,AACE,gDAAA,zCAACN,0EAAiBM;;;AAPxB,CAAAL,yCAAA,YAQI,WAAaxB,EAAE8B,KAAKC;AAApB,AACE,gDAAA,zCAACP,0EAAiBM,KAAKC;;;AAT7B,CAAAN,4CAAA,YAUI,WAAgBzB,EAAEgC;AAAlB,AACE,mDAAA,5CAACP,6EAAoBO;;;AAX3B,CAAAN,6DAAA,YAYI,WAA2B1B,EAAEiC;AAA7B,AAAA;;;AAZJ,AAAA,CAAA,AAAA,6EAAAN,7EAmBWO;;AAnBX,CAAA,AAAA,AAmBWA,uGACP,WAAqBlC;AAArB,AAAA,YAAA,RAAqBA;AAArB,AAAwBA;;;AApB5B,CAAA,AAAA,AAmBWkC,8FAEP,WAAYlC;AAAZ,AAAA,YAAA,RAAYA;AAAZ,AAAe,OAACqB,wCAAa,AAACc,kEAAkCnC;;;AArBpE,CAAA,AAAA,AAmBWkC,qGAGP,WAAmBlC,EAAE4B;AAArB,AAAA,YAAA,RAAmB5B;AAAnB,AACE,OAACsB,+CAAoB,AAACa,kEAAkCnC,OAAG4B;;;AAvBjE,CAAA,AAAA,AAmBWM,+FAKP,WAAalC,EAAE6B;AAAf,AAAA,YAAA,RAAa7B;AAAb,AACE,OAACuB,yCAAc,AAACY,kEAAkCnC,OAAG6B;;;AAzB3D,CAAA,AAAA,AAmBWK,+FAOP,WAAalC,EAAE8B,KAAKC;AAApB,AAAA,YAAA,RAAa/B;AAAb,AACE,OAACwB,yCAAc,AAACW,kEAAkCnC,OAAG8B,KAAKC;;;AA3BhE,CAAA,AAAA,AAmBWG,kGASP,WAAgBlC,EAAEgC;AAAlB,AAAA,YAAA,RAAgBhC;AAAhB,AACE,OAACyB,4CAAiB,AAACU,kEAAkCnC,OAAGgC;;;AA7B9D,CAAA,AAAA,AAmBWE,mHAWP,WAA2BlC,EAAEiC;AAA7B,AAAA,YAAA,RAA2BjC;AAA3B,AACE,OAAC0B,6DAA4B,AAACS,kEAAkCnC,OAAGiC;;AAEzE,AAAA,AAAA,CAAAG,sCAAA,UAAA;;AAAA,CAAAC,4CAAA,UAEI,WAAgBrC,EAAE4B;AAAlB,AACE,OAACU,qCAAUV;;;AAHjB,CAAAU,qCAAA,UAII,WAAStC;AAAT,AAAA;;;AAJJ,AAAA,CAAAoC,sCAAA,YAAA;;AAAA,CAAAC,4CAAA,YAOI,WAAgBrC,EAAE4B;AAAlB,AAAA;;;AAPJ,CAAAU,qCAAA,YASI,WAAStC;AAAT,AACEA;;AAEN,AAAA,AAAA,CAAAuC,sCAAA,UAAA;;AAAA,CAAAC,sCAAA,UAEI,WAASxC;AAAT,AAAA;;;AAFJ,CAAAyC,4CAAA,UAII,WAAUzC;AAAV,AAAA;;;AAJJ,AAAA,CAAAuC,sCAAA,YAAA;;AAAA,CAAAC,sCAAA,YAMI,WAASxC;AAAT,AAAA;;;AANJ,CAAAyC,4CAAA,YAQI,WAAUzC;AAAV,AAAA;;AAGJ,AAAA,AAAA,CAAA0C,8CAAA,YAAA;;AAAA,CAAAC,+CAAA,YAEI,WAAmB3C,EAAEgC;AAArB,AAAA;;AAIJ,AAAA,AAAA,CAAAY,qCAAA,UAAA;;AAAA,CAAAC,2CAAA,UAEI,WAAe7C,EAAE4B;AAAjB,AACE,OAACkB,oCAASlB;;;AAHhB,CAAAkB,oCAAA,UAII,WAAQ9C;AAAR,AAAA;;;AAJJ,AAAA,CAAA4C,qCAAA,YAAA;;AAAA,CAAAC,2CAAA,YAOI,WAAe7C,EAAE4B;AAAjB,AAAA;;;AAPJ,CAAAkB,oCAAA,YASI,WAAQ9C;AAAR,AACEA;;AAIN,AAAA,AAAA,CAAA+C,6CAAA,UAAA;;AAAA,CAAAC,qCAAA,UAEI,WAAShD,EAAEmD;AAAX,AACE,MAAA,AAAAC,gDAAA,yBAAA;;;AAHN,CAAAH,qCAAA,UAII,WAASjD,EAAEmD,EAAEE;AAAb,AACE,MAAA,AAAAD,gDAAA,yBAAA;;;AALN,CAAAF,qCAAA,UAMI,WAASlD,EAAEsD;AAAX,AACE,IAAArD,qBAAW,AAACuD,cAAIF;AAAhB,AAAA,GAAArD;AAAA,QAAAA,JAASsD;AAAT,AACE,MAAA,AAAAH,gDAAA,CAAA,iGAAA,bAA+CG;;AAC/CvD;;;;AATR,AAAA,CAAA+C,6CAAA,YAAA;;AAAA,CAAAC,qCAAA,YAAA,WAWahD,EAAEmD;AAXf,AAYM,MAAA,AAAAC,gDAAA,qCAAA;;;AAZN,CAAAH,qCAAA,YAAA,WAaajD,EAAEmD,EAAEE;AAbjB,AAcM,MAAA,AAAAD,gDAAA,qCAAA;;;AAdN,CAAAF,qCAAA,YAAA,WAealD,EAAEsD;AAff,AAgBM,IAAArD,qBAAW,AAACuD,cAAIF;AAAhB,AAAA,GAAArD;AAAA,QAAAA,JAASsD;AAAT,AACE,MAAA,AAAAH,gDAAA,CAAA,6GAAA,bAA2DG;;AAC3DvD;;;;AAlBR,AAAA,CAAA+C,6CAAA,YAAA;;AAAA,CAAAC,qCAAA,YAoBI,WAAShD,EAAEmD;AAAX,AACE,GACE,CAAAM,UAAA,AAAezD;AAAG,OAACgB,qCAAU,AAAC0C,4CAAI1D,EAAEmD;;AADtC,AAEQ,8CAAA,vCAACD,qCAAUlD,qFAAGmD;;;;;AAvB5B,CAAAF,qCAAA,YAwBI,WAASjD,EAAEmD,EAAEE;AAAb,AACE,GACE,CAAAI,UAAA,AAAezD;AAAG,OAACgD,qCAAU,AAACU,4CAAI1D,EAAEmD,GAAGE;;AADzC,AAEQ,8CAAA,vCAACH,qCAAUlD,qFAAGmD,EAAEE;;;;;AA3B9B,CAAAH,qCAAA,YA4BI,WAASlD,EAAEsD;AAAX,AACE,GAAI,AAACE,cAAIF;AACP,GACE,CAAAG,UAAA,AAAezD;AAAG,OAACkD,qCAAU,AAACQ,4CAAI1D,EAAE,AAAC2D,gBAAML,UAAU,AAACM,eAAKN;;AAD7D,AAEQ,MAAA,AAAAF,gDAAA,CAAA,gHAAA,7BAA8C,AAAqBS,eAAM7D;;;;AACjF,OAACgB,qCAAUhB;;;;AAjCnB,AAAA,CAAA,AAAA,4EAAA2B,5EAoCMmC;;AApCN,CAAA,AAAA,AAoCMA,0FACA,WAAS9D,EAAEmD;AAAX,AAAA,YAAA,RAASnD;AAAT,AAAc,OAAC0D,4CAAI1D,MAAEmD;;;AArC3B,CAAA,AAAA,AAoCMW,0FAEA,WAAS9D,EAAEmD,EAAEE;AAAb,AAAA,YAAA,RAASrD;AAAT,AACE,GAAI,AAAC+D,yBAAS,AAACJ,gBAAM3D;AACnB,OAACgD,qCAAU,AAACU,4CAAI1D,MAAEmD,GAAGE;;AACrB,MAAA,AAAAD,gDAAA,gCAAA;;;;AAzCV,CAAA,AAAA,AAoCMU,0FAMA,WAAS9D,EAAEsD;AAAX,AAAA,YAAA,RAAStD;AAAT,AACE,GAAI,AAACwD,cAAIF;AACP,OAACJ,qCAAU,AAACQ,4CAAI1D,MAAE,AAAC2D,gBAAML,UAAU,AAACM,eAAKN;;AACzC,OAACtC,qCAAUhB;;;;AA7CrB,AAAA,CAAA,AAAA,0EAAA2B,1EA+CMqC;;AA/CN,CAAA,AAAA,AA+CMA,wFACA,WAAShE,EAAEmD;AAAX,AAAA,YAAA,RAASnD;AAAT,AAAc,OAAC0D,4CAAI1D,MAAEmD;;;AAhD3B,CAAA,AAAA,AA+CMa,wFAEA,WAAShE,EAAEmD,EAAEE;AAAb,AAAA,YAAA,RAASrD;AAAT,AACE,MAAA,AAAAoD,gDAAA,6BAAA;;;AAlDR,CAAA,AAAA,AA+CMY,wFAIA,WAAShE,EAAEsD;AAAX,AAAA,YAAA,RAAStD;AAAT,AACQ,GAAI,AAACwD,cAAIF;AACP,OAACJ,qCAAU,AAACQ,4CAAI1D,MAAE,AAAC2D,gBAAML,UAAU,AAACM,eAAKN;;AACzC,OAACtC,qCAAUhB;;;AAI3B,AAAA,AAAA,CAAAiE,4CAAA,UAAA;;AAAA,CAAAC,4CAAA,UAEI,WAAgBlE;AAAhB,AAAA;;;AAFJ,AAAA,CAAAiE,4CAAA,YAAA;;AAAA,CAAAC,4CAAA,YAAA,WAIoBlE;AAJpB,AAIuB,GAAI,OAAA,NAAOA;AAAX;;AAAA;;;;AAJvB,AAAA,CAAAiE,4CAAA,YAAA;;AAAA,CAAAC,4CAAA,YAMI,WAAgBlE;AAAhB,AACE,OAACmE,6CAAkBnE,EAAE,WAAKoE,IAAIC;AAAT,AAAY,GAAI,OAAA,NAAOA;AAAGD;;AAAI,cAAA,NAAKA;;GAAxD;;AAEN,AAAA,AAAA,CAAAE,yDAAA,UAAA;;AAAA,CAAAC,+CAAA,UAEI;;6BACIvE;AADJ,AAAA;;6BAEIA,EAAEwE;AAFN,AAGI,OAACzD,8CAAiByD;;oBADlBxE,EAAEwE;;;6BAAFxE;;6BAAAA,EAAEwE;;;;;;;;;;AAJV,AAAA,CAAAF,yDAAA,YAAA;;AAAA,CAAAC,+CAAA,YAOI;;6BACIvE;AADJ,AACO,qDAAA,9CAACe;;6BACJf,EAAEwE;AAFN,AAEa,OAACzD,8CAAiByD;;oBAA3BxE,EAAEwE;;;6BAAFxE;;6BAAAA,EAAEwE;;;;;;;;;AAEV,AAAA,AAAA,CAAAC,mDAAA,UAAA;;AAAA,CAAAzD,qCAAA,UAEI,WAAShB;AAAT,AAAA;;;AAFJ,CAAA0E,2CAAA,UAII,WAAU1E,EAAEwE;AAAZ,AACE,MAAA,AAAApB,gDAAA,8BAAA;;;AALN,AAAA,CAAAqB,mDAAA,YAAA;;AAAA,CAAAzD,qCAAA,YAOI,WAAShB;AAAT,AACEA;;;AARN,CAAA0E,2CAAA,YASI,WAAU1E,EAAEwE;AAAZ,AACE,MAAA,AAAApB,gDAAA,4BAAA;;;AAVN,AAAA,CAAA,AAAA,kFAAAzB,lFAWqCO;;AAXrC,CAAA,AAAA,AAWqCA,gGACjC,WAASlC;AAAT,AAAA,YAAA,RAASA;AAAT,AACEA;;;AAbN,CAAA,AAAA,AAWqCkC,sGAGjC,WAAUlC,EAAEwE;AAAZ,AAAA,YAAA,RAAUxE;AAAV,AACE,MAAA,AAAAoD,gDAAA,uBAAA;;;AAfN,AAAA,CAAAqB,mDAAA,YAAA;;AAAA,CAAAzD,qCAAA,YAAA,WAiBahB;AAjBb,AAkBMA;;;AAlBN,CAAA0E,2CAAA,YAAA,WAmBc1E,EAAEwE;AAnBhB,AAoBM,MAAA,AAAApB,gDAAA,6BAAA;;;AApBN,AAAA,CAAAqB,mDAAA,YAAA;;AAAA,CAAAzD,qCAAA,YAsBI,WAAShB;AAAT,AAEEA;;;AAxBN,CAAA0E,2CAAA,YAyBI,WAAU1E,EAAEwE;AAAZ,AACE,oDAAA,7CAACG,2CAAW3E,mCAAKwE;;AAEvB,AAAA,AAAA,CAAAI,gDAAA,UAAA;;AAAA,CAAAC,qCAAA,UAEI,WAAS7E,EAAEwE;AAAX,AACEA;;;AAHN,AAAA,CAAAI,gDAAA,YAAA;;AAAA,CAAAC,qCAAA,YAMI,WAAS7E,EAAEwE;AAAX,AACEA;;AAGN,AAAA,AAAA,CAAAM,8CAAA,UAAA;;AAAA,CAAAC,qCAAA,UAEI,WAAS/E,EAAEmF,IAAIC;AAAf,AACE,MAAA,AAAAhC,gDAAA,yBAAA;;;AAHN,CAAA4B,qCAAA,UAII,WAAShF,EAAEmF,IAAIE,OAAOD;AAAtB,AACE,MAAA,AAAAhC,gDAAA,yBAAA;;;AALN,CAAA6B,qCAAA,UAMI,WAASjF,EAAEsD,QAAQ8B;AAAnB,AACE,GAAI,AAAC5B,cAAIF;AACP,MAAA,AAAAF,gDAAA,CAAA,kFAAA,yBAAA,nDAAmB,AAACkC,gBAAMhC;;AAC1B8B;;;;AATR,CAAAF,gDAAA,UAUI,WAAclF;AAAd,AAAA;;;AAVJ,AAAA,CAAA8E,8CAAA,YAAA;;AAAA,CAAAC,qCAAA,YAAA,WAaa/E,EAAEmF,IAAIC;AAbnB,AAcM,MAAA,AAAAhC,gDAAA,qCAAA;;;AAdN,CAAA4B,qCAAA,YAAA,WAeahF,EAAEmF,IAAIE,OAAOD;AAf1B,AAgBM,MAAA,AAAAhC,gDAAA,qCAAA;;;AAhBN,CAAA6B,qCAAA,YAAA,WAiBajF,EAAEsD,QAAQ8B;AAjBvB,AAkBM,GAAI,AAAC5B,cAAIF;AACP,MAAA,AAAAF,gDAAA,CAAA,kFAAA,qCAAA,/DAAmB,AAACkC,gBAAMhC;;AAC1B8B;;;;AApBR,CAAAF,gDAAA,YAAA,WAqBkBlF;AArBlB,AAAA;;;AAAA,AAAA,CAAA8E,8CAAA,YAAA;;AAAA,CAAAC,qCAAA,YAwBI,WAAS/E,EAAEmF,IAAIC;AAAf,AACE,IAAMpF,QAAE,AAACuF,oCAASvF;AAAlB,AACE,AAACwF,2CAAWxF,MAAEmF,IAAIC;;AAClBpF;;;AA3BR,CAAAgF,qCAAA,YA4BI,WAAShF,EAAEmF,IAAIE,OAAOD;AAAtB,AACE,IAAMpF,QAAE,AAACuF,oCAASvF;AAAlB,AACE,AAACyF,2CAAWzF,MAAEmF,IAAIE,OAAOD;;AACzBpF;;;AA/BR,CAAAiF,qCAAA,YAgCI,WAASjF,EAAEsD,QAAQ8B;AAAnB,AACE,IAAMpF,QAAE,AAACuF,oCAASvF;AAAlB,AACE,AAAC2E,2CAAW3E,MAAEsD,QAAQ8B;;AACtBpF;;;AAnCR,CAAAkF,gDAAA,YAoCI,WAAclF;AAAd,AAAA;;AAKJ,AAAA,AAAA,CAAA0F,yCAAA,YAAA;;AAAA,CAAAC,+CAAA,YAAA,WAEiB3F;AAFjB,AAAA;;;AAAA,AAAA,CAAA0F,yCAAA,UAAA;;AAAA,CAAAC,+CAAA,UAKI,WAAa3F;AAAb,AAAA;;;AALJ,AAAA,CAAA0F,yCAAA,YAAA;;AAAA,CAAAC,+CAAA,YAQI,WAAa3F;AAAb,AACE,oBAAI,AAAC4F,+CAAc5F;AAAnB;;AAEE,OAAC6F,uBAAOC,wBAAQ,AAACC,0CAAe/F;;;AAExC,AAAA,AAAA,CAAAgG,yCAAA,YAAA;;AAAA,CAAAC,yCAAA,YAAA,WAEiBI,EAAEC;AAFnB,AAEsB,OAACC,wCAAaD,EAAED;;;AAFtC,CAAAH,qCAAA,YAAA,WAGaG;AAHb,AAGgB,OAACG,SAAiBH;;;AAHlC,CAAAF,6CAAA,YAAA,WAIqBE;AAJrB,AAIwB,IAAMA,QAAUA;AAAhB,AAAoB,QAAGA,QAAEA;;;AAJjD,CAAAD,wCAAA,YAAA,WAKgBC;AALhB,AAMM,IAAMA,QAAUA;AAAhB,AACE,GACE,SAAA,RAAGA;AADL;;AAAA,GAEE,SAAA,RAAGA;AAFL;;AAAA,AAAA;;;;;;AAPR,AAAA,CAAAL,yCAAA,YAAA;;AAAA,CAAAC,yCAAA,YAYI,WAAaI,EAAEC;AAAf,AAEE,GAAM,EAAK,CAAA,QAAM,AAAC9F,gBAAK,AAACC,6CAAkB4F,UAAK,CAAA,QAAM,AAAC7F,gBAAK,AAACC,6CAAkB6F;AAA9E,AACE,OAACG,0CAAe,AAACC,+CAAoBL,EAAEC;;AADzC;;;;AAdN,CAAAJ,qCAAA,YAgBI,WAASG;AAAT,AACE,OAACM,UAAkB,AAACR,6CAAkBE;;;AAjB5C,CAAAF,6CAAA,YAkBI,WAAiBE;AAAjB,AACE,OAAClC,6CAAkBkC,EAAE,WAAaO,EAAUzD;AAAvB,AAA0B,QAAGyD,IAAE,CAAGzD,IAAEA;GAAzD;;;AAnBN,CAAAiD,wCAAA,YAoBI,WAAYC;AAAZ,AACE,OAACQ,oCAASR,EAAE,CAAA,MAAO,AAACM,UAAkB,AAACR,6CAAkBE;;AAE/D,AAAA,AAAA,CAAAS,8CAAA,YAAA;;AAAA,CAAAC,uCAAA,YAAA,WAEeV,EAAEC;AAFjB,AAGM,GAAI,OAASA;AACX,OAACE,SAAS,CAAWF,IAAWD;;AAChC,OAACU,uCAAYT,EAAED;;;;AALvB,AAAA,CAAAS,8CAAA,YAAA;;AAAA,CAAAC,uCAAA,YAOI,WAAWV,EAAEC;AAAb,AAAwB,OAACJ,qCAAU,AAACc,yCAAcX,EAAEC;;AAExD,AAAA,AAAA,CAAAW,2CAAA,YAAA;;AAAA,CAAAC,4CAAA,YAEI,WAAgBb,EAAEC;AAAlB,AACE,IAAMc,KAAW,uCAAA,vCAACpE,qCAAUqD;IACtBgB,KAAW,uCAAA,vCAACrE,qCAAUqD;IACtBiB,KAAW,uCAAA,vCAACtE,qCAAUqD;IACtBkB,KAAW,uCAAA,vCAACvE,qCAAUsD;IACtBkB,KAAW,uCAAA,vCAACxE,qCAAUsD;IACtBmB,KAAW,uCAAA,vCAACzE,qCAAUsD;AAL5B,AAME,wDAAA,jDAAChF,+CAAoB+E,qFAAG,CAAG,CAAGgB,KAAGI,MAAI,CAAGH,KAAGE,KACnB,CAAG,CAAGF,KAAGC,MAAI,CAAGH,KAAGK,KACnB,CAAG,CAAGL,KAAGI,MAAI,CAAGH,KAAGE;;;AAXnD,CAAAJ,kDAAA,YAYI,WAAiBd,EAAEC;AAAnB,AACE,IAAMc,KAAW,uCAAA,vCAACpE,qCAAUqD;IACtBgB,KAAW,uCAAA,vCAACrE,qCAAUqD;IACtBiB,KAAW,uCAAA,vCAACtE,qCAAUqD;IACtBkB,KAAW,uCAAA,vCAACvE,qCAAUsD;IACtBkB,KAAW,uCAAA,vCAACxE,qCAAUsD;IACtBmB,KAAW,uCAAA,vCAACzE,qCAAUsD;AAL5B,AAME,6CAAA,7CAACd,2CAAWa,MAAI,CAAG,CAAGgB,KAAGI,MAAI,CAAGH,KAAGE;;AACnC,6CAAA,7CAAChC,2CAAWa,MAAI,CAAG,CAAGiB,KAAGC,MAAI,CAAGH,KAAGK;;AACnC,6CAAA,7CAACjC,2CAAWa,MAAI,CAAG,CAAGe,KAAGI,MAAI,CAAGH,KAAGE;;AACnClB;;AAER,AAAA,AAAA,CAAAqB,gDAAA,YAAA;;AAAA,CAAAC,8CAAA,YAEI,WAAatB;AAAb,AACE,OAACuB,0CAAUvB,EAAE,CAAA,MAAO,AAACM,UAAkB,AAACR,6CAAkBE;;AAEhE,AAAA,AAAA,CAAAwB,0CAAA,YAAA;;AAAA,CAAAC,2CAAA,YAEI,WAAU9H,EAAEmD;AAAZ,AACE,IAAM5C,OAAK,AAACC,gBAAK,AAACC,6CAAkBT;AAApC,AACE,GACE,CAAA,QAAMO;AAAM,OAACmE,2CAAW1E,EAAE,AAACgB,qCAAUmC;;AADvC,GAEE,CAAA,QAAM5C;AACJ,GAAI,cAAWyH,bAAK7E;AAElB,IAAMA,QAAE,AAACK,cAAIL;IACP8E,QAAM,AAACzH,gBAAK,gDAAA,hDAAC0H,8CAAmBlI;AADtC,AAEE,QAAA,JAAOmI;IAAI5E,IAAE,AAACC,cAAIL;;AAAlB,AACE,GAAI,CAAIgF,KAAEF;AACR,GAAM1E;AAAN,AAAQ,MAAA,AAAAH,gDAAA,yCAAA;;AAAR;;;AACA,AACE,AAACoC,2CAAWxF,EAAEmI,EAAE,AAACxE,gBAAMJ;;AACvB,eAAO,KAAA,JAAK4E;eAAG,AAACvE,eAAKL;;;;;;;;AAE7B,IAAM6E,QAAM,AAAC5H,gBAAK,AAACC,6CAAkB0C;IAC/B8E,QAAM,AAACzH,gBAAK,gDAAA,hDAAC0H,8CAAmBlI;AADtC,AAEE,GACE,CAAA,QAAMoI;AACJ,IAAM5D,QAAM,AAACxD,qCAAUmC;AAAvB,AACE,IAAAkF,kBAAYJ;AAAZ,AAAA,QAAA,JAAUE;;AAAV,AAAA,GAAA,KAAAE,JAAUF;AAAV,AAAmB,AAAC3C,2CAAWxF,EAAEmI,EAAE3D;;AAAnC,eAAA,KAAA,JAAU2D;;;;AAAV;;;;;AAHN,GAIE,CAAA,QAAMC;AACJ,AACE,GAAM,AAACE,gDAAKL,MAAM,AAACzH,gBAAK,gDAAA,hDAAC0H,8CAAmB/E;AAA5C,AAAmD,MAAA,AAAAC,gDAAA,CAAA,0IAAA,8HAAA,1KAAyD,AAACjD,wCAAaH,4EAA+B,AAACG,wCAAagD;;AAAvK;;AACA,IAAAkF,kBAAYJ;AAAZ,AAAA,QAAA,JAAUE;;AAAV,AAAA,GAAA,KAAAE,JAAUF;AAAV,AAAmB,AAAC3C,2CAAWxF,EAAEmI,EAAE,AAACnF,qCAAUG,EAAEgF;;AAAhD,eAAA,KAAA,JAAUA;;;;AAAV;;;;;AAPN,AASI,MAAA,AAAA/E,gDAAA,0DAAA;;;;;;AAzBZ,GA2BE,AAAAmF,cAAA,AAAA3C,+CAAQ5F;AACN,IAAMoI,QAAM,AAAC5H,gBAAK,AAACC,6CAAkB0C;AAArC,AACE,GAAI,CAAI5C,SAAK6H;AACX,IAAMI,MAAI,AAACC,kDAAuBtF;IAC5BuF,IAAE,iBAAAC,mBAAI,AAACC,iDAAgBJ;AAArB,AAAA,GAAAG;AAAAA;;AAA0B,MAAA,AAAAvF,gDAAA,wCAAA;;;AADlC,AAEE,OAACyF,8CAAM,AAACC,4CAAI,WAAKzC,EAAEC;AAAP,AAAU,OAACwB,2CAAWzB,EAAEC;GAAI,AAACyC,uDAA4B/I,GAAGwI;;AAC1E,IAAAQ,aAAA,AAAAxF,cAAW,AAACuF,uDAA4B/I;IAAxCiJ,eAAA;IAAAC,eAAA;IAAAC,WAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,WAAAD;AAAA,SAAA,AAAAD,kDAAAE,vDAAQM;AAAR,AAAA,AAA4C,AAAC3B,2CAAW2B,GAAGtG;;AAA3D;AAAA,eAAA6F;eAAAC;eAAAC;eAAA,CAAAC,WAAA;;;;;;;AAAA,IAAAC,qBAAA,AAAA5F,cAAAwF;AAAA,AAAA,GAAAI;AAAA,AAAA,IAAAJ,iBAAAI;AAAA,AAAA,GAAA,AAAAC,6BAAAL;AAAA,IAAAM,kBAAA,AAAAC,sBAAAP;AAAA,AAAA,eAAA,AAAAQ,qBAAAR;eAAAM;eAAA,AAAAhE,gBAAAgE;eAAA;;;;;;;AAAA,SAAA,AAAA3F,gBAAAqF,rBAAQS;AAAR,AAAA,AAA4C,AAAC3B,2CAAW2B,GAAGtG;;AAA3D;AAAA,eAAA,AAAAS,eAAAoF;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;;;AAjCR,AAmCM,MAAA,AAAA5F,gDAAA,CAAA,gHAAA,7BAA8C,AAAqBS,eAAM7D;;;;;;;AAvCvF,CAAA+H,iDAAA,YAwCI;;6BACI/H,EAAE0J;AADN,AAEM,IAAMC,OAAK,AAACnJ,gBAAK,AAAC8E,gBAAMoE;AAAxB,AACE,oBAAI,AAACE,+CAAc5J;AACjB,IAAAqI,kBAAYsB;AAAZ,AAAA,QAAA,JAAUxB;;AAAV,AAAA,GAAA,KAAAE,JAAUF;AAAV,AACE,AAAC3C,2CAAWxF,EAAEmI,EAAE,AAACzE,4CAAIgG,IAAIvB;;AAD3B,eAAA,KAAA,JAAUA;;;;AAAV;;;;;AAEA,8DAAA,vDAACJ,iDAAiB/H,EAAE0J,QAAMC;;;6BAChC3J,EAAE0J,IAAIG,MAAMhI;AAPhB,AAQM,IAAMA,aAAO,AAACrB,gBAAKqB;IACbgI,YAAM,AAACrJ,gBAAKqJ;AADlB,AAED,oBAAI,AAACD,+CAAc5J;AACd,IAAAqI,kBAAYxG;AAAZ,AAAA,QAAA,JAAUsG;;AAAV,AAAA,GAAA,KAAAE,JAAUF;AAAV,AACE,AAAC3C,2CAAWxF,EAAEmI,EAAE,AAACzE,4CAAIgG,IAAI,CAAGG,YAAM1B;;AADpC,eAAA,KAAA,JAAUA;;;;AAAV;;;;;AAEA,IAAM2B,KAAG,AAACtG,cAAI,AAACiF,kDAAuBzI;IAChC+J,OAAK,AAACvJ,gBAAK,kIAAA,hIAAIsJ,IAAG,AAAC/J,qDAAmB,AAAC4D,gBAAM,AAAC8E,kDAAuBzI;AAD3E,AAEE,IAAAgK,sBAAA,AAAAxG,cAAkBsG;QAAlB,AAAAtJ,gBAAA,pBAAqB2H;;AAArB,AAAA,GAAA6B;AAAA,QAAA,AAAArG,gBAAAqG,pBAAgBzG;AAAhB,AACE,AAACwE,iDAAiBxE,EAAEmG,IAAI,CAAGG,YAAM,CAAGE,OAAK5B,IAAI4B;;AAD/C,eAAA,AAAAnG,eAAAoG;eAAA,KAAA,JAAqB7B;;;;;AAArB;;;;;;oBARRnI,EAAE0J,IAAIG,MAAMhI;;;6BAAZ7B,EAAE0J;;6BAAF1J,EAAE0J,IAAIG,MAAMhI;;;;;;;;;AAWpB,AAAA,AAAA,CAAAoI,mDAAA,UAAA;;AAAA,CAAAC,qCAAA,UAEI,WAASlK,EAAEmK;AAAX,AACE,IAAMvD,IAAE,AAACwD,+CAAoBpK,EAAEmK;AAA/B,AACE,GAAI,CAAYvD,MAAEuD;AAAQ,OAAC5E,oCAASqB;;AAAGA;;;;AAJ/C,AAAA,CAAAqD,mDAAA,YAAA;;AAAA,CAAAC,qCAAA,YAAA,WAMWlK,EAAEmK;AANb,AAOIA;;;AAPJ,AAAA,CAAAF,mDAAA,YAAA;;AAAA,CAAAC,qCAAA,YASI,WAASlK,EAAEmK;AAAX,AACE,IAAMvD,IAAE,AAACwD,+CAAoBpK,EAAEmK;AAA/B,AACE,GAAI,CAAYvD,MAAEuD;AAAQ,OAAC5E,oCAASqB;;AAAGA;;;AAE/C,AAAA,AAAA,CAAAyD,2CAAA,YAAA;;AAAA,CAAAC,yCAAA,YAEI,WAAQtK,EAAEwE;AAAV,AACE,OAACsD,2CAAW9H,EAAEwE;;AAEpB,AAAA,AAAA,CAAA+F,6CAAA,UAAA;;AAAA,CAAAhF,oCAAA,UAEK,WAAQvF;AAAR,AACEA;;;AAHP,AAAA,CAAAuK,6CAAA,YAAA;;AAAA,CAAAhF,oCAAA,YAAA,WAKavF;AALb,AAMOA;;;AANP,AAAA,CAAAuK,6CAAA,YAAA;;AAAA,CAAAhF,oCAAA,YAQK,WAAQvF;AAAR,AACE,OAACsB,+CAAoBtB,EAAEA;;AAE9B,AAAA,AAAA,CAAAwK,2CAAA,YAAA;;AAAA,CAAAC,+CAAA,YAEK,WAAazK;AAAb,AAAA;;AAGL,AAAA,AAAA,CAAA0K,2DAAA,UAAA;;AAAA,CAAAC,+CAAA,UAEI,WAAmB3K;AAAnB,AAAA;;;AAFJ,AAAA,CAAA0K,2DAAA,YAAA;;AAAA,CAAAC,+CAAA,YAKI,WAAmB3K;AAAnB,AACE,oBAAI,AAACkF,gDAAelF;AAClB,OAAC4K,wDAA6B5K;;AAC9BA;;;AAER,AAAA,AAAA,CAAA6K,yCAAA,UAAA;;AAAA,CAAAC,yCAAA,UAEI,WAAa9K;AAAb,AAAA;;;AAFJ,AAAA,CAAA6K,yCAAA,YAAA;;AAAA,CAAAC,yCAAA,YAAA,WAKkB9K;AALlB,AAOO,GAAI,OAAA,NAAOA;AAAX;;AAAA;;;;AAPP,AAAA,CAAA6K,yCAAA,YAAA;;AAAA,CAAAC,yCAAA,YASK,WAAa9K;AAAb,AAEE,OAACmE,6CAAkBnE,EAAE,WAAK+K,IAAI1G;AAAT,AAAY,GAAI,OAAA,NAAOA;AAAG,cAAA,NAAK0G;;AAAKA;;GAAzD;;AAGP,AAAA,AAAA,CAAAC,yDAAA,UAAA;;AAAA,CAAAC,6CAAA,UAEI,WAAiBjL;AAAjB,AACE,OAACe,8CAAiBf;;;AAHxB,AAAA,CAAAgL,yDAAA,YAAA;;AAAA,CAAAC,6CAAA,YAAA,WAKqBjL;AALrB,AAMM,OAACe,8CAAiBf;;;AANxB,AAAA,CAAAgL,yDAAA,YAAA;;AAAA,CAAAC,6CAAA,YAQI,WAAiBjL;AAAjB,AACE,OAACM,2DAAyBN;;AAEhC,AAAA,AAAA,CAAAkL,+CAAA,UAAA;;AAAA,CAAAC,6CAAA,UAEI,WAAiBnL;AAAjB,AACE,OAACe,8CAAiBf;;;AAHxB,AAAA,CAAAkL,+CAAA,YAAA;;AAAA,CAAAC,6CAAA,YAAA,WAKqBnL;AALrB,AAMM,OAACe,8CAAiBf;;;AANxB,AAAA,CAAAkL,+CAAA,YAAA;;AAAA,CAAAC,6CAAA,YAQI,WAAiBnL;AAAjB,AACE,oBAAI,AAACkF,gDAAelF;AAClBA;;AACA,OAACM,2DAAyBN;;;AAElC,AAAA,AAAA,CAAAoL,6CAAA,YAAA;;AAAA,CAAAC,6CAAA,YAEI,WAAiBrL,EAAEgC,MAAMsJ;AAAzB,AACE,IAAMtL,QAAE,AAACyB,4CAAiBzB,EAAEgC;AAA5B,AACE,OAAC5B,+CAAO,WAAKJ,MAAEuL;AAAP,AAAW,OAACtG,qCAAUjF,MAAEuL,GAAG,AAACC,8CAAMF,EAAEC;GAAMvL,MAAE,AAACyL,mDAA2BzJ;;AAExF,AAAA,AAAA,CAAA0J,6CAAA,UAAA;;AAAA,CAAAjL,6CAAA,UAEI,WAAiBT;AAAjB,AAAA;;;AAFJ,CAAA4F,+CAAA,UAGI,WAAa5F;AAAb,AAAA;;;AAHJ,CAAA4J,+CAAA,UAII,WAAa5J;AAAb,AAAA;;;AAJJ,CAAAG,wCAAA,UAKI,WAAYH;AAAZ,AAAA;;;AALJ,CAAAkI,8CAAA,UAMI,WAAkBlI,EAAEmI;AAApB,AAAuB,MAAA,AAAA/E,gDAAA,CAAA,yHAAA,bAAuE+E;;;AANlG,AAAA,CAAA,AAAA,yEAAAxG,zEAyFMoK;;AAzFN,CAAA,AAAA,AAyFMA,+FACA,WAAiB/L;AAAjB,AAAA,YAAA,RAAiBA;AAAjB,AAAoB,+EAAA,vEAAK,AAACS,6CAAkB,AAACkD,gBAAM3D;;;AA1FzD,CAAA,AAAA,AAyFM+L,iGAEA,WAAa/L;AAAb,AAAA,YAAA,RAAaA;AAAb,AAAgB,QAAA,QAAM,AAACS,6CAAkB,AAACkD,gBAAM3D;;;AA3FtD,CAAA,AAAA,AAyFM+L,iGAGA,WAAa/L;AAAb,AAAA,YAAA,RAAaA;AAAb,AAAA;;;AA5FN,CAAA,AAAA,AAyFM+L,0FAIA,WAAY/L;AAAZ,AAAA,YAAA,RAAYA;AAAZ,AAAe,OAAC4L,eAAK,AAACtG,gBAAMtF,OAAG,AAACG,wCAAa,AAACwD,gBAAM3D;;;AA7F1D,CAAA,AAAA,AAyFM+L,gGAKA,WAAkB/L,EAAEmD;AAApB,AAAA,YAAA,RAAkBnD;AAAlB,AACiB,GAAI,OAAA,NAAImD;AACN,OAACmC,gBAAMtF;;AACP,OAACkI,8CAAmB,AAACvE,gBAAM3D,OAAG,KAAA,JAAKmD;;;;AAjG5D,AAAA,CAAAuI,6CAAA,YAAA;;AAAA,CAAAjL,6CAAA,YA2BI,WAAiBT;AAAjB,AACE,GACyC,AAACa,6CAAE4C,MAAS,AAACI,eAAK7D;AACvD,IAAM2L,IAAE,AAACnL,gBAAK,AAAC8E,gBAAMtF;AAArB,AACE,GAAI,KAAA,JAAG2L;AAAK,4HAAA,pHAAK,AAACnL,gBAAK,AAACC,6CAAkB,8CAAA,9CAACiD,4CAAI1D;;AAA/C;;;AAHN,AAAA;;;;;AA5BN,CAAA4J,+CAAA,YAiCI,WAAa5J;AAAb,AACE,GACyC,AAACa,6CAAE4C,MAAS,AAACI,eAAK7D;AACvD,IAAM2L,IAAE,AAACnL,gBAAK,AAAC8E,gBAAMtF;AAArB,AACE,SAAI,OAAA,NAAI2L,gBAAK,CAAA,QAAM,AAACnL,gBAAK,AAACC,6CAAkB,8CAAA,9CAACiD,4CAAI1D;;AAHvD,AAAA;;;;;AAlCN,CAAA4F,+CAAA,YAuCI,WAAa5F;AAAb,AACE,GACyC,AAACa,6CAAE4C,MAAS,AAACI,eAAK7D;AAD3D;;AAAA,AAAA;;;;;AAxCN,CAAAG,wCAAA,YA2CI,WAAYH;AAAZ,AACE,GACyC,AAACa,6CAAE4C,MAAS,AAACI,eAAK7D;AACvD,IAAM2L,IAAE,AAACrG,gBAAMtF;AAAf,AACE,GAAI,OAAA,NAAI2L;AAAR,0FAAA;;AAAiB,OAACC,eAAKD,EAAE,AAACxL,wCAAa,8CAAA,9CAACuD,4CAAI1D;;;AAHlD,AAAA;;;;;AA5CN,CAAAkI,8CAAA,YAiDI,WAAkBlI,EAAEmI;AAApB,AACE,IAAMA,QAAE,AAAC3H,gBAAK2H;AAAd,AACE,GACyC,AAACtH,6CAAE4C,MAAS,AAACI,eAAK7D;AACvD,GAAI,WAAA,VAAImI;AAAK,OAAC7C,gBAAMtF;;AAAG,OAACkI,8CAAmB,8CAAA,9CAACxE,4CAAI1D,OAAK,SAAA,RAAKmI;;;AAF9D,GAGE,CAAA,QAAMA;AACJ,OAAC7C,gBAAMtF;;AAJX,AAKQ,MAAA,AAAAoD,gDAAA,CAAA,yFAAA,wFAAA,/FAA6C+E,kEAAiB,AAAqBtE,eAAM7D;;;;;;AAxDzG,AAAA,CAAA,AAAA,+EAAA2B,/EA+EMmK;;AA/EN,CAAA,AAAA,AA+EMA,qGACA,WAAiB9L;AAAjB,AAAA,YAAA,RAAiBA;AAAjB,AAAoB,+EAAA,vEAAK,AAACS,6CAAkB,AAACkD,gBAAM3D;;;AAhFzD,CAAA,AAAA,AA+EM8L,uGAEA,WAAa9L;AAAb,AAAA,YAAA,RAAaA;AAAb,AAAgB,QAAA,QAAM,AAACS,6CAAkB,AAACkD,gBAAM3D;;;AAjFtD,CAAA,AAAA,AA+EM8L,uGAGA,WAAa9L;AAAb,AAAA,YAAA,RAAaA;AAAb,AAAA;;;AAlFN,CAAA,AAAA,AA+EM8L,gGAIA,WAAY9L;AAAZ,AAAA,YAAA,RAAYA;AAAZ,AAAe,OAAC4L,eAAK,AAACtG,gBAAMtF,OAAG,AAACG,wCAAa,AAACwD,gBAAM3D;;;AAnF1D,CAAA,AAAA,AA+EM8L,sGAKA,WAAkB9L,EAAEmD;AAApB,AAAA,YAAA,RAAkBnD;AAAlB,AACiB,GAAI,OAAA,NAAImD;AACN,OAACmC,gBAAMtF;;AACP,OAACkI,8CAAmB,AAACvE,gBAAM3D,OAAG,KAAA,JAAKmD;;;;AAvF5D,AAAA,CAAA,AAAA,4EAAAxB,5EAqEMmC;;AArEN,CAAA,AAAA,AAqEMA,kGACA,WAAiB9D;AAAjB,AAAA,YAAA,RAAiBA;AAAjB,AAAoB,+EAAA,vEAAK,AAACS,6CAAkB,AAACkD,gBAAM3D;;;AAtEzD,CAAA,AAAA,AAqEM8D,oGAEA,WAAa9D;AAAb,AAAA,YAAA,RAAaA;AAAb,AAAgB,QAAA,QAAM,AAACS,6CAAkB,AAACkD,gBAAM3D;;;AAvEtD,CAAA,AAAA,AAqEM8D,oGAGA,WAAa9D;AAAb,AAAA,YAAA,RAAaA;AAAb,AAAA;;;AAxEN,CAAA,AAAA,AAqEM8D,6FAIA,WAAY9D;AAAZ,AAAA,YAAA,RAAYA;AAAZ,AAAe,OAAC4L,eAAK,AAACtG,gBAAMtF,OAAG,AAACG,wCAAa,AAACwD,gBAAM3D;;;AAzE1D,CAAA,AAAA,AAqEM8D,mGAKA,WAAkB9D,EAAEmD;AAApB,AAAA,YAAA,RAAkBnD;AAAlB,AACiB,GAAI,OAAA,NAAImD;AACN,OAACmC,gBAAMtF;;AACP,OAACkI,8CAAmB,AAACvE,gBAAM3D,OAAG,KAAA,JAAKmD;;;;AA7E5D,AAAA,CAAAuI,6CAAA,YAAA;;AAAA,CAAAjL,6CAAA,YAAA,WAqBqBT;AArBrB,AAAA;;;AAAA,CAAA4F,+CAAA,YAAA,WAsBiB5F;AAtBjB,AAAA;;;AAAA,CAAA4J,+CAAA,YAAA,WAuBiB5J;AAvBjB,AAAA;;;AAAA,CAAAG,wCAAA,YAAA,WAwBgBH;AAxBhB,AAAA;;;AAAA,CAAAkI,8CAAA,YAAA,WAyBsBlI,EAAEmI;AAzBxB,AAyB2B,MAAA,AAAA/E,gDAAA,CAAA,4HAAA,bAA0E+E;;;AAzBrG,AAAA,CAAA,AAAA,yEAAAxG,zEA2DMkK;;AA3DN,CAAA,AAAA,AA2DMA,+FACA,WAAiB7L;AAAjB,AAAA,YAAA,RAAiBA;AAAjB,AAAoB,+EAAA,vEAAK,AAACS,6CAAkB,AAACkD,gBAAM3D;;;AA5DzD,CAAA,AAAA,AA2DM6L,iGAEA,WAAa7L;AAAb,AAAA,YAAA,RAAaA;AAAb,AAAgB,QAAA,QAAM,AAACS,6CAAkB,AAACkD,gBAAM3D;;;AA7DtD,CAAA,AAAA,AA2DM6L,iGAGA,WAAa7L;AAAb,AAAA,YAAA,RAAaA;AAAb,AAAA;;;AA9DN,CAAA,AAAA,AA2DM6L,0FAIA,WAAY7L;AAAZ,AAAA,YAAA,RAAYA;AAAZ,AAAe,OAAC4L,eAAK,AAACtG,gBAAMtF,OAAG,AAACG,wCAAa,AAACwD,gBAAM3D;;;AA/D1D,CAAA,AAAA,AA2DM6L,gGAKA,WAAkB7L,EAAEmD;AAApB,AAAA,YAAA,RAAkBnD;AAAlB,AACiB,GAAI,OAAA,NAAImD;AACN,OAACmC,gBAAMtF;;AACP,OAACkI,8CAAmB,AAACvE,gBAAM3D,OAAG,KAAA,JAAKmD;;;;AAnE5D,AAAA,CAAAuI,6CAAA,YAAA;;AAAA,CAAAjL,6CAAA,YAeI,WAAiBT;AAAjB,AAAA;;;AAfJ,CAAA4F,+CAAA,YAgBI,WAAa5F;AAAb,AAAA;;;AAhBJ,CAAA4J,+CAAA,YAiBI,WAAa5J;AAAb,AAAA;;;AAjBJ,CAAAG,wCAAA,YAkBI,WAAYH;AAAZ,AAAA;;;AAlBJ,CAAAkI,8CAAA,YAmBI,WAAkBlI,EAAEmI;AAApB,AAAuB,MAAA,AAAA/E,gDAAA,CAAA,4HAAA,bAA0E+E;;;AAnBrG,AAAA,CAAA,AAAA,0EAAAxG,1EAmGMqC;;AAnGN,CAAA,AAAA,AAmGMA,gGACA,WAAiBhE;AAAjB,AAAA,YAAA,RAAiBA;AAAjB,AAAoB,+EAAA,vEAAK,AAACS,6CAAkB,AAACkD,gBAAM3D;;;AApGzD,CAAA,AAAA,AAmGMgE,kGAEA,WAAahE;AAAb,AAAA,YAAA,RAAaA;AAAb,AAAgB,QAAA,QAAM,AAACS,6CAAkB,AAACkD,gBAAM3D;;;AArGtD,CAAA,AAAA,AAmGMgE,kGAGA,WAAahE;AAAb,AAAA,YAAA,RAAaA;AAAb,AAAA;;;AAtGN,CAAA,AAAA,AAmGMgE,2FAIA,WAAYhE;AAAZ,AAAA,YAAA,RAAYA;AAAZ,AAAe,OAAC4L,eAAK,AAACtG,gBAAMtF,OAAG,AAACG,wCAAa,AAACwD,gBAAM3D;;;AAvG1D,CAAA,AAAA,AAmGMgE,iGAKA,WAAkBhE,EAAEmD;AAApB,AAAA,YAAA,RAAkBnD;AAAlB,AACiB,GAAI,OAAA,NAAImD;AACN,OAACmC,gBAAMtF;;AACP,OAACkI,8CAAmB,AAACvE,gBAAM3D,OAAG,KAAA,JAAKmD;;;;AA3G5D,AAAA,CAAA,AAAA,4EAAAxB,5EAQWO;;AARX,CAAA,AAAA,AAQWA,kGACP,WAAiBlC;AAAjB,AAAA,YAAA,RAAiBA;AAAjB,AAAA;;;AATJ,CAAA,AAAA,AAQWkC,oGAEP,WAAalC;AAAb,AAAA,YAAA,RAAaA;AAAb,AAAA;;;AAVJ,CAAA,AAAA,AAQWkC,oGAGP,WAAalC;AAAb,AAAA,YAAA,RAAaA;AAAb,AAAA;;;AAXJ,CAAA,AAAA,AAQWkC,6FAIP,WAAYlC;AAAZ,AAAA,YAAA,RAAYA;AAAZ,AAAA;;;AAZJ,CAAA,AAAA,AAQWkC,mGAKP,WAAkBlC,EAAEmI;AAApB,AAAA,YAAA,RAAkBnI;AAAlB,AAAuB,MAAA,AAAAoD,gDAAA,CAAA,6HAAA,bAA2E+E;;AAiGtG,AAAA,AAAA,CAAA6D,yCAAA,UAAA;;AAAA,CAAAC,gDAAA,UAEI,WAAc5F,EAAEC;AAAhB,AACE,QAAA,QAAM,AAAC9F,gBAAK,AAACC,6CAAkB6F;;;AAHrC,AAAA,CAAA0F,yCAAA,YAAA;;AAAA,CAAAC,gDAAA,YAKI,WAAc5F,EAAEC;AAAhB,AACE,QAAA,QAAM,AAAC9F,gBAAK,AAACC,6CAAkB6F;;;AANrC,AAAA,CAAA0F,yCAAA,YAAA;;AAAA,CAAAC,gDAAA,YAAA,WAQkB5F,EAAEC;AARpB,AASM,QAAA,QAAM,AAAC9F,gBAAK,AAACC,6CAAkB6F;;;AATrC,AAAA,CAAA0F,yCAAA,YAAA;;AAAA,CAAAC,gDAAA,YAWI,WAAc5F,EAAEC;AAAhB,AACE,OAAC4F,mDAAqB,AAAC/L,wCAAakG,GAAG,AAAClG,wCAAamG;;AAG3D,AAAA,AAAA,CAAA6F,yCAAA,UAAA;;AAAA,CAAAC,oCAAA,UAEI,WAAQpM;AAAR,AAAWA;;;AAFf,AAAA,CAAAmM,yCAAA,YAAA;;AAAA,CAAAC,oCAAA,YAAA,WAIYpM;AAJZ,AAIeA;;;AAJf,CAAAqM,sCAAA,YAAA,WAKcrM;AALd,AAKiB,QAAA,MAAGA;;;AALpB,AAAA,CAAAmM,yCAAA,YAAA;;AAAA,CAAAC,oCAAA,YAOI,WAAQpM;AAAR,AACE,GAAU,CAAA,QAAM,AAACQ,gBAAK,AAACC,6CAAkBT;AAAzC;AAAA,AAA8C,MAAA,AAAAoD,gDAAA,6BAAA;;;AAC9C,IAAMmJ,KAAG,AAAC/L,gBAAK,gDAAA,hDAAC0H,8CAAmBlI;IAC7BwM,KAAG,AAAChM,gBAAK,gDAAA,hDAAC0H,8CAAmBlI;IAC7BO,OAAK,AAACkM,SAASF,GAAGC;AAFxB,AAGE,QAAA,JAAOrE;UAAP,NAAWuE;;AAAX,AACE,GAAI,CAAIvE,KAAE5H;AACRmM;;AACA,eAAO,KAAA,JAAKvE;eAAG,CAAGuE,MAAY,AAACzJ,qCAAUjD,EAAEmI,EAAEA;;;;;;;;;AAfzD,CAAAmE,0CAAA,YAgBI,WAActM;AAAd,AACE,IAAM2M,MAAI,iBAAAhE,mBAAI,uFAAA,vFAACzH;AAAL,AAAA,oBAAAyH;AAAAA;;AAAwC,MAAA,AAAAvF,gDAAA,mFAAA;;;IAC5CpD,QAAE,AAACiB,2CAAgB0L,IAAI3M;AAD7B,AAEE,OAACsM,0CAAetM;;;AAnBxB,CAAAqM,sCAAA,YAoBI,WAAUrM;AAAV,AACE,IAAM2M,MAAI,iBAAAhE,mBAAI,uFAAA,vFAACzH;AAAL,AAAA,oBAAAyH;AAAAA;;AAAwC,MAAA,AAAAvF,gDAAA,0EAAA;;;IAC5CwJ,KAAG,AAAC3L,2CAAgB0L,IAAI3M;AAD9B,AAEE,OAACiB,2CAAgBjB,EAAE,AAACqM,sCAAWO;;AAEvC,AAAA,AAAA,CAAAC,yCAAA,UAAA;;AAAA,CAAAC,wCAAA,UAEI,WAAY9M;AAAZ,AAAeA;;;AAFnB,AAAA,CAAA6M,yCAAA,YAAA;;AAAA,CAAAC,wCAAA,YAAA,WAIgB9M;AAJhB,AAImBA;;;AAJnB,AAAA,CAAA6M,yCAAA,YAAA;;AAAA,CAAAC,wCAAA,YAMI,WAAY9M;AAAZ,AACE,OAACiB,2CACAjB,EACA,iBAAMO,OAAK,AAACC,gBAAK,AAACC,6CAAkBT;AAApC,AACE,IAAA+M,WAAMxM;AAAN,AAAA,QAAAwM;KAAA;AACI/M;;;KADJ;AAEIA;;;KAFJ;AAGI,OAACwL,8CAAMwB,eAAKC,iBAAO,AAACrC,wDAA6B5K;;;;AACnD,OAACkN,6CAAkBlN,EAAE,AAACmN,kBAAQ,AAACC,8CAAM7M;;;;;AAEhD,AAAA,AAAA,CAAA8M,6CAAA,UAAA;;AAAA,CAAAH,6CAAA,UAEI,WAAiBlN,EAAEsN;AAAnB,AAA6BtN;;;AAFjC,AAAA,CAAAqN,6CAAA,YAAA;;AAAA,CAAAH,6CAAA,YAAA,WAIqBlN,EAAEsN;AAJvB,AAIiCtN;;;AAJjC,AAAA,CAAAqN,6CAAA,YAAA;;AAAA,CAAAH,6CAAA,YAMI,WAAiBlN,EAAEsN;AAAnB,AACE,OAACJ,6CAAkB,AAACtC,wDAA6B5K,GAAGsN;;AAE1D,AAAA,AAAA,CAAAC,gDAAA,YAAA;;AAAA,CAAAC,8CAAA,YAEI,WAAaxN;AAAb,AACE,IAAM2L,UAAE,AAACnL,gBAAK,gDAAA,hDAAC0H,8CAAmBlI;AAAlC,AACE,GAAM,AAACsI,gDAAKqD,QAAE,AAACnL,gBAAK,gDAAA,hDAAC0H,8CAAmBlI;AAAxC,AAA+C,MAAA,AAAAoD,gDAAA,qCAAA;;AAA/C;;AACA,IAAAiF,wBAAYsD;AAAZ,AAAA,cAAA,VAAUxD;;AAAV,AAAA,GAAA,WAAAE,VAAUF;AAAV,AACE,IAAAE,4BAAYF;AAAZ,AAAA,cAAA,VAAUsF;;AAAV,AAAA,GAAA,WAAApF,VAAUoF;AAAV,AACE,IAAMC,UAAE,AAACzK,qCAAUjD,EAAEmI,QAAEsF;AAAvB,AACE,AAAChI,2CAAWzF,EAAEmI,QAAEsF,QAAE,AAACxK,qCAAUjD,EAAEyN,QAAEtF;;AACjC,AAAC1C,2CAAWzF,EAAEyN,QAAEtF,QAAEuF;;AAHtB,eAAA,WAAA,VAAUD;;;;AAAV;;;;AADF,eAAA,WAAA,VAAUtF;;;;AAAV;;;;AAKFnI;;AAEN,AAAA,AAAA,CAAA2N,sCAAA,UAAA;;AAAA,CAAAC,qCAAA,UAEI,WAAS5N,EAAE6N,IAAIC;AAAf,AAAA;;;AAFJ,AAAA,CAAAH,sCAAA,YAAA;;AAAA,CAAAC,qCAAA,YAAA,WAIa5N,EAAE6N,IAAIC;AAJnB,AAI2B9N;;;AAJ3B,AAAA,CAAA2N,sCAAA,YAAA;;AAAA,CAAAC,qCAAA,YAMI,WAAS5N,EAAE6N,IAAIC;AAAf,AACE,IAAMD,UAAI,AAACrN,gBAAKqN;IACVC,aAAO,AAACtN,gBAAKsN;AADnB,AAEE,GACE,qEAAA,pEAAI,AAACtN,gBAAK,AAACC,6CAAkBT;AAC3BA;;AAFJ,GAGE,CAAA,QAAM6N;AACJ,IAAM/D,KAAG,AAACrB,kDAAuBzI;IAC3B+N,IAAE,AAACvN,gBAAK,gDAAA,hDAAC0H,8CAAmBlI;IAC5BE,KAAG,AAACM,gBAAK,0DAAA,xDAAI,KAAA,JAAMuN,UAAG,AAACvN,gBAAK,AAACwN,cAAIF,WAAOC;AAF9C,AAGE,GAAI,QAAA,PAAI7N;AACNF;;AACA,OAACiO,cAAI,AAACC,+CAAO,AAACC,oBAAU,CAAGJ,IAAE7N,IAAI4J,IAAI,AAACsE,6CAAKlO,GAAG4J;;;AATtD,AAWG,OAAC8D,qCAAU,AAAChD,wDAA6B5K,GAAG6N,QAAIC;;;;;AAG3D,AAAA,AAAA,CAAAO,yCAAA,UAAA;;AAAA,CAAAC,yCAAA,UAEI,WAAatO,EAAEuO;AAAf,AAAA;;;AAFJ,AAAA,CAAAF,yCAAA,YAAA;;AAAA,CAAAC,yCAAA,YAAA,WAIiBtO,EAAEuO;AAJnB,AAI2BvO;;;AAJ3B,AAAA,CAAAqO,yCAAA,YAAA;;AAAA,CAAAC,yCAAA,YAMI,WAAatO,EAAEuO;AAAf,AACE,OAACnO,+CAAO,iBAAAoO,NAAKxO;AAAL,AAAA,IAAAyO,aAAAD;UAAA,AAAA9K,4CAAA+K,WAAA,IAAA,jEAAcZ;YAAd,AAAAnK,4CAAA+K,WAAA,IAAA,nEAAwBC;AAAxB,AAAgC,GAAI,WAAA,VAAOA;AAAO1O;;AAAE,OAAC4N,qCAAU5N,MAAE6N,IAAIa;;GAC1E1O,EACA,AAAC2O,oDAAY,WAAKxG,EAAE/C;AAAP,AAAA,0FAAW+C,EAAE/C;GAAImJ;;AAEvC,AAAA,AAAA,CAAAK,qCAAA,YAAA;;AAAA,CAAAC,oCAAA,YAEI,WAAQ7O,EAAE6N,IAAIa;AAAd,AACE,IAAMA,YAAM,AAAClO,gBAAKkO;IACZK,IAAE,AAACC,2CAAgBhP;IACnB+N,IAAE,AAACvN,gBAAK,AAAC0H,8CAAmBlI,EAAE6N;IAC9B3N,KAAG,AAAC+N,cAAI,AAAC9N,wCAAaH;AAH5B,AAIE,GACE,eAAA,dAAI0O;AAAS1O;;AADf,GAEE,CAAI0O,aAAMX;AAAG,OAAC3D,+CAAoBpK,EAAE+O;;AAFtC,GAGE,CAAIL,aAAM,GAAGX;AAAI,OAAC3D,+CAAoBpK,EAAE+O;;AAH1C,GAIE,aAAA,ZAAGL;AAAS,OAACO,yCACC,AAACC,wCAAa,AAAC5N,+CAAoBtB,EAAE+O,GAAG,AAACI,8CAAMjP,GAAG2N,IAAI,GAAGa,aACzD,AAACU,wCAAapP,EAAE,AAAC8I,4CAAImE,iBACA,AAACgB,cAAI,mEAAA,nEAACoB,+CAAO,AAAC/J,gBAAMpF,UACpB,AAACiP,8CAAMjP,GAAG2N,IAAI,CAAGE,IAAEW,cACxCb;;AAThB,GAUE,aAAA,ZAAGa;AAAS,OAACO,yCACC,AAACG,wCAAapP,EAAE,AAAC8I,4CAAImE,iBACA,AAACkC,8CAAM,AAAClB,cAAI,mEAAA,nEAACoB,+CAAO,AAAC/J,gBAAMpF,UAAQ2N,IAAIa,WACvC,AAACS,8CAAMjP,GAAG2N,IAAI,CAAGE,IAAEW,cACxC,AAACQ,wCAAa,AAAC5N,+CAAoBtB,EAAE+O,GAAG,AAACI,8CAAMjP,GAAG2N,IAAIa,YACtDb;;AAfhB,AAgBQ,MAAA,AAAAzK,gDAAA,0BAAA;;;;;;;;;AAvBhB,CAAA0L,wCAAA,YAwBI,WAAY9O,EAAEuO;AAAd,AACE,OAACnO,+CAAO,iBAAAkP,NAAKtP;AAAL,AAAA,IAAAuP,aAAAD;UAAA,AAAA5L,4CAAA6L,WAAA,IAAA,jEAAQ1B;YAAR,AAAAnK,4CAAA6L,WAAA,IAAA,nEAAkBb;AAAlB,AAA0B,GAAI,WAAA,VAAOA;AAAO1O;;AAAE,OAAC6O,oCAAS7O,MAAE6N,IAAIa;;GACnE1O,EACA,AAAC2O,oDAAY,WAAKxG,EAAE/C;AAAP,AAAA,0FAAW+C,EAAE/C;GAAImJ;;AAGvC,AAAA,AAAA,CAAAiB,qCAAA,UAAA;;AAAA,CAAAC,oCAAA,UAEI;;6BACIzP,EAAE0P;AADN,AACe,MAAA,AAAAtM,gDAAA,6BAAA;;6BACXpD,EAAE6N,IAAI6B;AAFV,AAEmB,MAAA,AAAAtM,gDAAA,6BAAA;;oBAAfpD,EAAE6N,IAAI6B;;;6BAAN1P,EAAE6N;;6BAAF7N,EAAE6N,IAAI6B;;;;;;;;;;AAJd,AAAA,CAAAF,qCAAA,YAAA;;AAAA,CAAAC,oCAAA,YAAA;;6BAOQzP,EAAE0P;AAPV,AAOmB,MAAA,AAAAtM,gDAAA,gCAAA;;6BACXpD,EAAE6N,IAAI6B;AARd,AAQuB,MAAA,AAAAtM,gDAAA,gCAAA;;oBAAfpD,EAAE6N,IAAI6B;;;6BAAN1P,EAAE6N;;6BAAF7N,EAAE6N,IAAI6B;;;;;;;;;;AARd,AAAA,CAAAF,qCAAA,YAAA;;AAAA,CAAAC,oCAAA,YAUI;;6BACIzP,EAAE0P;AADN,AAEI,IAAMC,SAAO,AAAC1B,cAAI,AAAC9N,wCAAaH;IAC1B4P,WAAS,gDAAA,IAAA,pDAACT,8CAAMnP;IAChB8J,KAAG,4CAAA,WAAA+F,vDAAC/G;AAAD,AAAM,OAACoG,wCAAa,gDAAAW,hDAACC,8CAAmB9P,oBAAK4P;GAAUF;AAFhE,AAGE,sDAAA,WAAAK,iBAAAC,3EAAC5P;AAAD,AAAS,0CAAA2P,iBAAAC,pDAACC;GAAenG;;6BAC3B9J,EAAE6N,IAAI6B;AANV,AAOI,OAACD,oCAAS,AAAC7E,wDAA6B5K,GAAG6N,IAAI6B;;oBAD/C1P,EAAE6N,IAAI6B;;;6BAAN1P,EAAE6N;;6BAAF7N,EAAE6N,IAAI6B;;;;;;;;;AAGd;;;gDAAA,hDAAOQ,wGAEHC,MAAMxE;AAFV,AAGI,IAAeyE,OAAK,AAACC,qDAAa1E;AAAlC,AACE,IAAOxD,UAAE,gBAAA,hBAAC3H;IACH2P,kBAAM,AAAC3M,cAAI2M;;AADlB,AAEE,GAAM,CAAGhI,UAAEwD;AAAX,AACE,CAAMyE,KAAK,AAACzM,gBAAM,AAACA,gBAAMwM,qBAAQ,AAACG,aAAanI;;AAC/C,eAAO,WAAA,VAAKA;eACL,AAACvE,eAAKuM;;;;;AAHf;;;;AAIF,OAAClC,cAAImC;;AAEX,AAAA,AAAA,CAAAG,yCAAA,YAAA;;AAAA,CAAAC,yCAAA,YAEI;;6BACIxQ;AADJ,AAEI,IAAMO,OAAK,AAACC,gBAAK,AAACC,6CAAkBT;AAApC,AACE,IAAAyQ,WAAMlQ;AAAN,AAAA,QAAAkQ;KAAA;AACI,MAAA,AAAArN,gDAAA,2CAAA;;;KADJ;AAEI,IAAMuI,IAAE,AAACnL,gBAAK,AAACkQ,4CAAiB1Q;AAAhC,AACE,OAACkQ,8CAAY,AAACS,gDAAQC,iBAAO,AAAC9H,4CAAImE,iBAAO,AAACG,8CAAM,AAACsD,4CAAiB1Q,IAAI,AAAC+F,0CAAe/F,KAAK2L;;;;AAC/F,OAACkF,6CAAKL,yCAAc,AAAC/H,kDAAuBzI;;;;6BAChDA,EAAE8Q;AARN,AASI,IAAMvQ,OAAK,AAACC,gBAAK,AAACC,6CAAkBT;AAApC,AACE,IAAA+Q,WAAMxQ;AAAN,AAAA,QAAAwQ;KAAA;AACI,MAAA,AAAA3N,gDAAA,2CAAA;;;KADJ;AAEI,IAAMuI,IAAE,AAACnL,gBAAK,AAACkQ,4CAAiB1Q;AAAhC,AACE,OAACkQ,8CAAY,AAACS,gDAAQC,iBAAOE,KAAK,AAAChI,4CAAImE,iBAAO,AAACG,8CAAM,AAACsD,4CAAiB1Q,IAAI,AAAC+F,0CAAe/F,KAAK2L;;;;AACpG,oDAAA,WAAAqF,xDAACH;AAAD,AAAO,gDAAAG,zCAACR,0DAAgBM;GAAM,AAACrI,kDAAuBzI;;;;oBAN1DA,EAAE8Q;;;6BAAF9Q;;6BAAAA,EAAE8Q;;;;;;;;;AASV,AAAA,AAAA,CAAAG,8CAAA,YAAA;;AAAA,CAAAC,4CAAA,YAAA,WAEoBlR,EAAEqG;AAFtB,AAGM,GAAI,OAASA;AACX,QAAgBrG,IAAEqG;;AAClB,OAACE,wCAAaF,EAAErG;;;;AALxB,CAAAmR,4CAAA,YAAA,WAMoBnR,EAAEqG;AANtB,AAOM,GAAI,OAASA;AACX,QAAgBrG,IAAEqG;;AAClB,OAACE,wCAAaF,EAAErG;;;;AATxB,AAAA,CAAAiR,8CAAA,YAAA;;AAAA,CAAAC,4CAAA,YAWI,WAAgBlR,EAAEqG;AAAlB,AACE,oBACE,AAACT,+CAAc5F;AACb,OAACuG,wCAAaF,EAAErG;;AAFpB,oBAGE,AAAC4F,+CAAcS;AACb,OAACQ,oCAAS7G,EAAEqG;;AAJhB,GAKE,CAAA,QAAM,AAAC7F,gBAAK,AAACC,6CAAkBT;AAC7B,GAAI,CAAA,QAAM,AAACQ,gBAAK,AAACC,6CAAkB4F;AACjC,OAACI,0CAAe,AAACC,+CAAoB1G,EAAEqG;;AACvC,OAACjG,+CAAOgR,yCAAc,AAACtI,4CAAI,WAAKuI,GAAGlO;AAAR,AAAW,OAAC0D,oCAASwK,GAAGlO;GACxB,AAACsF,kDAAuBpC,GACxB,AAACoC,kDAAuBzI;;;AAVzD,AAYE,OAACsB,+CAAoB,AAACJ,yFAA0B,4CAAA,WAAAoQ,vDAACxI;AAAD,AAAM,mDAAAwI,5CAACJ,6DAAmB7K;GAAG,AAACoC,kDAAuBzI;;;;;;;AAxB7G,CAAAmR,4CAAA,YAyBI,WAAgBnR,EAAEqG;AAAlB,AACE,oBACE,AAACT,+CAAc5F;AACb,OAACuG,wCAAaF,EAAErG;;AAFpB,AAIE,OAACuR,0CAAe,AAAC3G,wDAA6B5K,GAAG,WAAKmD;AAAL,AAAQ,OAACoD,wCAAaF,EAAElD;;;;;AAOjF,AAAA,AAAA,CAAAqO,8CAAA,YAAA;;AAAA,CAAA9K,+CAAA,YAAA,WAEuB1G,EAAEqG;AAFzB,AAGM,GAAI,OAASA;AACX,QAAgBrG,IAAEqG;;AAClB,OAACE,wCAAaF,EAAErG;;;;AALxB,CAAAyR,8CAAA,YAAA,WAMsBzR,EAAEqG;AANxB,AAOM,GACE,OAASA;AAAG,QAAGrG,IAAEqG;;AADnB,GAEE,AAAAkC,cAAA,AAAA3C,+CAAQS;AAAG,OAACE,wCAAaF,EAAErG;;AAF7B,AAGQ,MAAA,AAAAoD,gDAAA,CAAA,oHAAA,7BAAkD,AAAqBS,eAAMwC;;;;;;AAV3F,AAAA,CAAAmL,8CAAA,YAAA;;AAAA,CAAAC,8CAAA,YAYI,WAAkBzR,EAAEqG;AAApB,AACE,IAAMqL,QAAM,AAAClR,gBAAK,AAACC,6CAAkBT;IAC/B2R,QAAM,AAACnR,gBAAK,AAACC,6CAAkB4F;AADrC,AAEE,GACC,WAAA,VAAIsL;AAAS,OAAC9K,oCAAS7G,EAAEqG;;AAD1B,GAEC,EAAK,WAAA,VAAIqL,oBAAS,WAAA,VAAIC;AAAU,OAAC1L,yCAAcjG,EAAEqG;;AAFlD,GAGC,EAAK,WAAA,VAAIqL,oBAAS,WAAA,VAAIC;AACpB,IAAAC,aAAoB,AAACzR,wCAAakG;YAAlC,AAAA3C,4CAAAkO,WAAA,IAAA,nEAAOC;YAAP,AAAAnO,4CAAAkO,WAAA,IAAA,nEAAaE;AAAb,AACE,4OAAA,rOAACC,sCAAW,AAACN,8CAAmB,wCAAA,mFAAA,3HAACM,sCAAW/R,yFAAK6R,eAAQxL,sFAC5CyL;;AANlB,GAOC,EAAK,WAAA,VAAIJ,oBAAS,WAAA,VAAIC;AACpB,IAAMhC,SAAO,AAACxP,wCAAaH;IAA3BgS,aACoBrC;YADpB,AAAAjM,4CAAAsO,WAAA,IAAA,nEACOC;YADP,AAAAvO,4CAAAsO,WAAA,IAAA,nEACaE;IACPC,SAAO,AAACzB,4CAAiBrK;AAF/B,AAGE,GAAM,AAACiC,gDAAK4J,MAAMC;AAAlB,AAA0B,MAAA,AAAA/O,gDAAA,CAAA,uFAAA,0FAAA,lGAA0CuM,gFAAmCwC;;AAAvG;;AACA,4OAAA,rOAACJ,sCAAW,AAACN,8CAAmBzR,EAAE,wCAAA,yFAAA,jIAAC+R,sCAAW1L,qFAAG6L,uGACpCD;;AAblB,GAcC,EAAK,WAAA,VAAIP,oBAAS,WAAA,VAAIC;AACpB,IAAMW,UAAQ,AAACpN,gDAAelF;IAA9BoS,aACgC,AAACjS,wCAAaH;YAD9C,AAAA0D,4CAAA0O,WAAA,IAAA,nEACaH;YADb,AAAAvO,4CAAA0O,WAAA,IAAA,nEACyBF;IADzBG,aAEgC,AAAClS,wCAAakG;YAF9C,AAAA3C,4CAAA2O,WAAA,IAAA,nEAEaR;YAFb,AAAAnO,4CAAA2O,WAAA,IAAA,nEAEyBP;IACnBS,aAAW,kBAAID,SAAQtS,EAAE,uFAAA,vFAACkB;IAC1BsR,QAAM,AAAChR,yCAAc+Q,WAAWN,MAAMH;AAJ5C,AAME,AAAA,IAAQ3J,UAAE,gBAAA,hBAAC3H;;AAAX,AAAA,GAAmB,CAAG2H,UAAE8J;AAAxB,AAAA,IACQxE,UAAE,gBAAA,hBAACjN;;AADX,AAAA,GACmB,CAAGiN,UAAEqE;AADxB,AAEE,iEAAA,jEAACrM,2CAAW+M,MAAMrK,QAAEsF;;AAFtB,eAC+B,WAAA,VAAKA;;;;AADpC;;;;AAAA,eAA+B,WAAA,VAAKtF;;;;AAApC;;;;AAAA;AAGA,AAAA,IAAQA,UAAE,gBAAA,hBAAC3H;;AAAX,AAAA,GAAmB,CAAG2H,UAAE8J;AAAxB,AAAA,IACOxE,UAAE,gBAAA,hBAACjN;;AADV,AAAA,GACkB,CAAGiN,UAAEqE;AADvB,AAAA,IAEOW,UAAE,gBAAA,hBAACjS;;AAFV,AAAA,GAEkB,CAAGiS,UAAEP;AAFvB,AAGE,AAACzM,2CAAW+M,MAAMrK,QAAEsF,QAAE,CAAG,AAACxK,qCAAUuP,MAAMrK,QAAEsF,WACnB,CAAG,AAACxK,qCAAUjD,EAAEmI,QAAEsK,WACf,AAACxP,qCAAUoD,EAAEoM,QAAEhF;;AAL7C,eAE8B,WAAA,VAAKgF;;;;AAFnC;;;;AAAA,eAC8B,WAAA,VAAKhF;;;;AADnC;;;;AAAA,eAA+B,WAAA,VAAKtF;;;;AAApC;;;;AAAA;AAMAqK;;AA9BL;;;;;;;;AAfR,CAAA9L,+CAAA,YA8CI,WAAmB1G,EAAEqG;AAArB,AACE,GAAI,OAASA;AACX,OAACQ,oCAAS7G,EAAEqG;;AACZ,IAAAqM,aAAY,AAACC,mDAAwB3S,EAAEqG;YAAvC,AAAA3C,4CAAAgP,WAAA,IAAA,nEAAO1S;YAAP,AAAA0D,4CAAAgP,WAAA,IAAA,nEAASrM;AAAT,AACE,OAACkL,0CAAevR,MAAEK,iBAAegG;;;AAG3C,AAAA,AAAA,CAAAuM,qDAAA,YAAA;;AAAA,CAAAC,qDAAA,YAAA,WAEwB7S,EAAEqG;AAF1B,AAGM,MAAA,AAAAjD,gDAAA,+CAAA;;;AAHN,CAAA0P,oDAAA,YAAA,WAIuB9S,EAAEqG;AAJzB,AAKM,MAAA,AAAAjD,gDAAA,+CAAA;;;AALN,AAAA,CAAAwP,qDAAA,YAAA;;AAAA,CAAAC,qDAAA,YAOI,WAAoB7S,EAAEqG;AAAtB,AACE,OAACyB,2CAAW9H,EAAE,AAAC0G,+CAAoB1G,EAAEqG;;;AAR3C,CAAAyM,oDAAA,YASI,WAAmB9S,EAAEqG;AAArB,AACE,OAACyB,2CAAW9H,EAAE,AAACyR,8CAAmBzR,EAAEqG;;AAE1C,AAAA,AAAA,CAAA0M,4CAAA,YAAA;;AAAA,CAAAC,6CAAA,YAAA;;6BAGQhT;AAHR,AAGW,QAAA,MAAGA;;6BACNA,EAAEqG;AAJV,AAIa,OAACE,wCAAa,AAACyM,6CAAkB3M,GAAGrG;;oBAAzCA,EAAEqG;;;6BAAFrG;;6BAAAA,EAAEqG;;;;;;;;;;AAJV,AAAA,CAAA0M,4CAAA,YAAA;;AAAA,CAAAC,6CAAA,YAMI;;6BACIhT;AADJ,AAEI,oBAAI,AAACG,wCAAaH;AAChB,OAACuR,0CAAevR,EAAEgT;;AAClB,MAAA,AAAA5P,gDAAA,CAAA,iHAAA,7BAA+C,AAACS,eAAK7D;;;6BACvDA,EAAEqG;AALN,AAMI,OAACK,+CAAoB1G,EAAE,AAACgT,6CAAkB3M;;oBAD1CrG,EAAEqG;;;6BAAFrG;;6BAAAA,EAAEqG;;;;;;;;;AAGV,AAAA,AAAA,CAAA4M,mDAAA,YAAA;;AAAA,CAAAC,mDAAA,YAAA;;6BAGOlT;AAHP,AAGU,MAAA,AAAAoD,gDAAA,6CAAA;;6BACHpD,EAAEqG;AAJT,AAIY,MAAA,AAAAjD,gDAAA,4CAAA;;oBAALpD,EAAEqG;;;6BAAFrG;;6BAAAA,EAAEqG;;;;;;;;;;AAJT,AAAA,CAAA4M,mDAAA,YAAA;;AAAA,CAAAC,mDAAA,YAMG;;6BACIlT;AADJ,AACO,yDAAAmT,lDAACC,gDAAgBpT;;6BACpBA,EAAEqG;AAFN,AAGK,IAAAgN,aAAY,AAACV,mDAAwB3S,EAAEqG;YAAvC,AAAA3C,4CAAA2P,WAAA,IAAA,nEAAOrT;YAAP,AAAA0D,4CAAA2P,WAAA,IAAA,nEAAShN;AAAT,AACE,6DAAA8M,tDAACC,gDAAgBpT,wBAAIqG;;oBAFxBrG,EAAEqG;;;6BAAFrG;;6BAAAA,EAAEqG;;;;;;;;;AAKT,AAAA,AAAA,CAAAiN,wCAAA,YAAA;;AAAA,CAAA7M,0CAAA,YAAA,WAEkBJ;AAFlB,AAEqBA;;;AAFrB,AAAA,CAAAiN,wCAAA,YAAA;;AAAA,CAAA7M,0CAAA,YAII,WAAcJ;AAAd,AACE,OAAClC,6CAAkBkC,EAAE,kBAAI,AAACV,+CAAcU,IAAGkN,iBAAEnC;;AAGnD,AAAA,AAAA,CAAAoC,6CAAA,YAAA;;AAAA,CAAAC,0CAAA,YAAA,WAEkBzT;AAFlB,AAEqBA;;;AAFrB,CAAA0T,0CAAA,YAAA,WAGkB1T;AAHlB,AAGqBA;;;AAHrB,CAAA2T,4CAAA,YAAA,WAIoB3T,EAAEqG,EAAEC;AAJxB,AAKM,GAAA,GAAQ,CAAID,KAAEC;AACZ,MAAA,AAAAlD,gDAAA,CAAA,gEAAA,wFAAA,3FAAwBiD,8EAAiCC;;AACzD,GAAI,CAAGtG,IAAEqG;AAAGA;;AAAE,GAAI,CAAGrG,IAAEsG;AAAGA;;AAAEtG;;;;;;AAPpC,AAAA,CAAAwT,6CAAA,YAAA;;AAAA,CAAAC,0CAAA,YASI,WAAczT;AAAd,AACE,OAACmE,6CAAkBnE,EACF,WAAK4T,KAAKxO;AAAV,AAAa,GAAI,EAAI,AAACmD,cAAIqL,WAAM,CAAGxO,IAAEwO;AAAOxO;;AAAEwO;;GAD/D;;;AAVN,CAAAF,0CAAA,YAaI,WAAc1T;AAAd,AACE,OAACmE,6CAAkBnE,EACF,WAAK4T,KAAKxO;AAAV,AAAa,GAAI,EAAI,AAACmD,cAAIqL,WAAM,CAAGxO,IAAEwO;AAAOxO;;AAAEwO;;GAD/D;;;AAdN,CAAAD,4CAAA,YAiBI,WAAgB3T,EAAEqG,EAAEC;AAApB,AACE,GAAA,GAAQ,CAAID,KAAEC;AACZ,MAAA,AAAAlD,gDAAA,CAAA,gEAAA,wFAAA,3FAAwBiD,8EAAiCC;;AACzD,mDAAA,WAAAuN,vDAACtC,0CAAevR;AAAhB,AAAmB,GAAI,CAAA6T,mBAAMxN;AAAGA;;AAAE,GAAI,CAAAwN,mBAAMvN;AAAGA;;AAAbuN;;;;;;AAE1C,AAAA,AAAA,CAAAC,uCAAA,YAAA;;AAAA,CAAAC,8CAAA,YAAA,WAEsB1N,EAAEC;AAFxB,AAGM,GAAI,OAASA;AACX,OAAC9F,gBAAK,AAAC+T,yCAAY,CAAGlO,IAAEC;;AACxB,OAACkO,qCAAU,AAACxN,yCAAcX,EAAEC;;;;AALpC,CAAA0N,yCAAA,YAAA,WAMiBhU,EAAEqG,EAAEC;AANrB,AAOM,IAAAmO,aAAY,AAACC,mDAAwBrO,EAAEC;YAAvC,AAAA5C,4CAAA+Q,WAAA,IAAA,nEAAOpO;YAAP,AAAA3C,4CAAA+Q,WAAA,IAAA,nEAASnO;AAAT,AACE,GAAI,KAAA,JAAGtG;AAAKqG;;AAAEC;;;;AARtB,CAAA2N,yCAAA,YAAA,WASiBjU,EAAEqG;AATnB,AAUM,GAAI,OAASA;AACX,GAAI,CAAGrG,IAAEqG;AAAT;;AAAA;;;AACA,OAAC8N,yCAAc9N,EAAErG;;;;AAZzB,CAAAkU,yCAAA,YAAA,WAaiBlU,EAAEqG;AAbnB,AAcM,GAAI,OAASA;AACX,GAAI,CAAIrG,KAAEqG;AAAV;;AAAA;;;AACA,OAAC+N,yCAAc/N,EAAErG;;;;AAhBzB,CAAAmU,yCAAA,YAAA,WAiBiBnU,EAAEqG;AAjBnB,AAkBM,GAAI,OAASA;AACX,GAAI,CAAGrG,IAAEqG;AAAT;;AAAA;;;AACA,OAAC4N,yCAAc5N,EAAErG;;;;AApBzB,CAAAoU,yCAAA,YAAA,WAqBiBpU,EAAEqG;AArBnB,AAsBM,GAAI,OAASA;AACX,GAAI,CAAIrG,KAAEqG;AAAV;;AAAA;;;AACA,OAAC6N,yCAAc7N,EAAErG;;;;AAxBzB,CAAAqU,yCAAA,YAAA,WAyBiBrU,EAAEqG;AAzBnB,AA0BM,GAAI,OAASA;AACX,GAAI,AAACiC,gDAAKtI,EAAEqG;AAAZ;;AAAA;;;AACA,OAACgO,yCAAchO,EAAErG;;;;AA5BzB,CAAAsU,yCAAA,YAAA,WA6BiBtU,EAAEqG;AA7BnB,AA8BM,GAAI,OAASA;AACX,GAAI,AAACxF,6CAAEb,EAAEqG;AAAT;;AAAA;;;AACA,OAACiO,yCAAcjO,EAAErG;;;;AAhCzB,AAAA,CAAA8T,uCAAA,YAAA;;AAAA,CAAAC,8CAAA,YAkCI,WAAkB1N,EAAEC;AAApB,AACE,+FAAA,WAAAqO,nGAACpD,0CAAe,AAACvK,yCAAcX,EAAEC;AAAjC,AAAqC,OAAC9F,gBAAK,yCAAAmU,zCAACJ;;;;AAnClD,CAAAP,yCAAA,YAoCI,WAAahU,EAAEqG,EAAEC;AAAjB,AACE,GACE,EAAK,OAASD,oBAAG,OAASC;AACxB,mDAAA,WAAAsO,vDAACrD,0CAAevR;AAAhB,AAAmB,GAAI,CAAA4U,mBAAA;AAASvO;;AAAEC;;;;AAFtC,GAGE,OAASD;AACP,mDAAA,WAAAwO,iBAAAC,xEAACvD,0CAAevR;AAAhB,AAAmB,GAAI,CAAA6U,mBAAA;AAASxO;;AAAbyO;;GAAmBxO;;AAJ1C,GAKE,OAASA;AACP,mDAAA,WAAAyO,iBAAAC,xEAACzD,0CAAevR;AAAhB,AAAmB,GAAI,CAAA+U,mBAAA;AAAJC;;AAAgB1O;;GAAGD;;AAN1C,AAOQ,mDAAA,WAAA4O,iBAAAC,iBAAAC,zFAAC5D,0CAAevR;AAAhB,AAAmB,GAAI,CAAAiV,mBAAA;AAAJC;;AAAAC;;KAAnB,FAAuC9O,qFAAGC;;;;;;;AA5CxD,CAAA2N,yCAAA,YA8CI,WAAajU,EAAEqG;AAAf,AACE,GAAI,OAASA;AACX,mDAAA,WAAA+O,vDAAC7D,0CAAevR;AAAhB,AAAmB,GAAI,CAAAoV,mBAAM/O;AAAV;;AAAA;;;;AACnB,mDAAA,WAAAgP,iBAAAC,xEAAC/D,0CAAevR;AAAhB,AAAmB,GAAI,CAAAqV,mBAAAC;AAAJ;;AAAA;;GAAmBjP;;;;AAjD9C,CAAA6N,yCAAA,YAkDI,WAAalU,EAAEqG;AAAf,AACE,GAAI,OAASA;AACX,mDAAA,WAAAkP,vDAAChE,0CAAevR;AAAhB,AAAmB,GAAI,CAAAuV,oBAAOlP;AAAX;;AAAA;;;;AACnB,mDAAA,WAAAmP,iBAAAC,xEAAClE,0CAAevR;AAAhB,AAAmB,GAAI,CAAAwV,oBAAAC;AAAJ;;AAAA;;GAAoBpP;;;;AArD/C,CAAA8N,yCAAA,YAsDI,WAAanU,EAAEqG;AAAf,AACE,GAAI,OAASA;AACX,mDAAA,WAAAqP,vDAACnE,0CAAevR;AAAhB,AAAmB,GAAI,CAAA0V,mBAAMrP;AAAV;;AAAA;;;;AACnB,mDAAA,WAAAsP,iBAAAC,xEAACrE,0CAAevR;AAAhB,AAAmB,GAAI,CAAA2V,mBAAAC;AAAJ;;AAAA;;GAAmBvP;;;;AAzD9C,CAAA+N,yCAAA,YA0DI,WAAapU,EAAEqG;AAAf,AACE,GAAI,OAASA;AACX,mDAAA,WAAAwP,vDAACtE,0CAAevR;AAAhB,AAAmB,GAAI,CAAA6V,oBAAOxP;AAAX;;AAAA;;;;AACnB,mDAAA,WAAAyP,iBAAAC,xEAACxE,0CAAevR;AAAhB,AAAmB,GAAI,CAAA8V,oBAAAC;AAAJ;;AAAA;;GAAoB1P;;;;AA7D/C,CAAAgO,yCAAA,YA8DI,WAAarU,EAAEqG;AAAf,AACE,GAAI,OAASA;AACX,mDAAA,WAAA2P,vDAACzE,0CAAevR;AAAhB,AAAmB,GAAA,GAAQ,CAAAgW,qBAAO3P;AAAf;;AAAA;;;;AACnB,mDAAA,WAAA4P,iBAAAC,xEAAC3E,0CAAevR;AAAhB,AAAmB,GAAA,GAAQ,CAAAiW,qBAAAC;AAAR;;AAAA;;GAAwB7P;;;;AAjEnD,CAAAiO,yCAAA,YAkEI,WAAatU,EAAEqG;AAAf,AACE,GAAI,OAASA;AACX,mDAAA,WAAA8P,vDAAC5E,0CAAevR;AAAhB,AAAmB,GAAI,CAAAmW,qBAAO9P;AAAX;;AAAA;;;;AACnB,mDAAA,WAAA+P,iBAAAC,xEAAC9E,0CAAevR;AAAhB,AAAmB,GAAI,CAAAoW,qBAAAC;AAAJ;;AAAA;;GAAoBhQ;;;AAG/C,AAAA,AAAA,CAAAiQ,0CAAA,YAAA;;AAAA,CAAAC,0CAAA,YAAA,WAEkBvW,EAAEqG,EAAEC;AAFtB,AAGM,OAAC8K,yCAAc,AAAC1K,+CAAoBL,EAAEC,GAAGtG;;;AAH/C,AAAA,CAAAsW,0CAAA,YAAA;;AAAA,CAAAC,0CAAA,YAKI,WAAcvW,EAAEqG,EAAEC;AAAlB,AACE,OAAC8K,yCAAcpR,EAAE,AAAC0G,+CAAoBL,EAAEC;;AAE9C,AAAA,AAAA,CAAAkQ,iDAAA,YAAA;;AAAA,CAAAC,gDAAA,YAAA,WAEmBzW,EAAEqG,EAAEC;AAFvB,AAGM,MAAA,AAAAlD,gDAAA,0BAAA;;;AAHN,AAAA,CAAAoT,iDAAA,YAAA;;AAAA,CAAAC,gDAAA,YAKI,WAAezW,EAAEqG,EAAEC;AAAnB,AACE,OAACoQ,+CAAe1W,EAAE,AAAC0G,+CAAoBL,EAAEC;;AAE/C,AAAA,AAAA,CAAAqQ,yCAAA,YAAA;;AAAA,CAAAC,yCAAA,YAAA,WAEiB5W,EAAEqG,EAAEwQ;AAFrB,AAGM,OAACzF,yCAAc,AAACvK,oCAASR,EAAEwQ,QAAQ7W;;;AAHzC,AAAA,CAAA2W,yCAAA,YAAA;;AAAA,CAAAC,yCAAA,YAKI,WAAa5W,EAAEqG,EAAEwQ;AAAjB,AACE,OAACzF,yCAAcpR,EAAE,AAAC6G,oCAASR,EAAEwQ;;AAEnC,AAAA,AAAA,CAAAC,gDAAA,YAAA;;AAAA,CAAAC,+CAAA,YAAA,WAEkB/W,EAAEqG,EAAEwQ;AAFtB,AAGM,MAAA,AAAAzT,gDAAA,0BAAA;;;AAHN,AAAA,CAAA0T,gDAAA,YAAA;;AAAA,CAAAC,+CAAA,YAKI,WAAc/W,EAAEqG,EAAEwQ;AAAlB,AACE,OAACH,+CAAe1W,EAAE,AAAC6G,oCAASR,EAAEwQ;;AAEpC,AAAA,AAAA,CAAAG,gDAAA,YAAA;;AAAA,CAAAC,iDAAA,YAAA,WAEyBjX,EAAEqG,EAAEC,EAAEuQ;AAF/B,AAGM,OAACzF,yCAAc,AAACvK,oCAAS,AAACH,+CAAoBL,EAAEC,GAAGuQ,QAAQ7W;;;AAHjE,AAAA,CAAAgX,gDAAA,YAAA;;AAAA,CAAAC,iDAAA,YAKI,WAAqBjX,EAAEqG,EAAEC,EAAEuQ;AAA3B,AACE,OAACzF,yCAAcpR,EAAE,AAAC6G,oCAAS,AAACH,+CAAoBL,EAAEC,GAAGuQ;;AAE3D,AAAA,AAAA,CAAAK,uDAAA,YAAA;;AAAA,CAAAC,uDAAA,YAAA,WAE0BnX,EAAEqG,EAAEC,EAAEuQ;AAFhC,AAGM,MAAA,AAAAzT,gDAAA,0BAAA;;;AAHN,AAAA,CAAA8T,uDAAA,YAAA;;AAAA,CAAAC,uDAAA,YAKI,WAAsBnX,EAAEqG,EAAEC,EAAEuQ;AAA5B,AACE,OAACH,+CAAe1W,EAAE,AAAC6G,oCAAS,AAACH,+CAAoBL,EAAEC,GAAGuQ;;AAG5D,AAAA,AAAA,CAAAO,wCAAA,YAAA;;AAAA,CAAAC,8CAAA,YAEI,WAAaC,GAAGjR,EAAEkR,GAAGjR,EAAEkR;AAAvB,AACE,AAAC3E,qDAAqByE,GAAGjR;;AACzB,GAAU,EAAK,OAASC,oBAAG,OAAA,NAAOA;AAAlC;AAAA,AAAsC,AAACmQ,gDAAgBa,GAAGC,GAAGjR;;;AAC7D,GAAU,EAAK,OAASkR,2BAAU,cAAA,bAAOA;AAAzC;AAAA,AAAoD,AAACd,+CAAeY,GAAGE;;;AACvEF;;AAEN,AAAA,AAAA,CAAAG,yCAAA,YAAA;;AAAA,CAAAC,wCAAA,YAEI,WAAYJ,GAAGjR,EAAEkR,GAAGjR,EAAEkR;AAAtB,AACE,IAAM5Q,IAAE,AAACwK,yCAAc,AAACvK,oCAASyQ,GAAGjR,GAAG,AAACQ,oCAAS0Q,GAAGjR;AAApD,AACE,GAAI,CAAA,QAAQkR;AACV5Q;;AACA,OAACwK,yCAAcxK,EAAE4Q;;;AAE3B,AAAA,AAAA,CAAAG,oCAAA,YAAA;;AAAA,CAAAC,mCAAA,YAEI,WAAOvR,EAAEC,EAAEuQ;AAAX,AACE,yEAAA,lEAACa,wCAAarR,EAAE,CAAA,MAAewQ,QAASvQ,EAAEuQ;;;AAHhD,CAAAgB,yCAAA,YAII,WAAQxR,EAAEC,EAAEuQ;AAAZ,AACE,+EAAA,xEAACQ,8CAAchR,EAAE,CAAA,MAAewQ,QAASvQ,EAAEuQ;;AAEjD,AAAA,AAAA,CAAAiB,sDAAA,YAAA;;AAAA,CAAAC,sDAAA,YAEI;;6BACI/X,EAAEqG,EAAEC;AADR,AAEI,OAACoQ,+CAAe1W,EAAE,AAACkR,4CAAiB7K,EAAEC;;6BACtCtG,EAAEqG,EAAEC,EAAEuQ;AAHV,AAII,OAACE,+CAAe/W,EAAE,AAACkR,4CAAiB7K,EAAEC,GAAGuQ;;oBADzC7W,EAAEqG,EAAEC,EAAEuQ;;;6BAAN7W,EAAEqG,EAAEC;;6BAAJtG,EAAEqG,EAAEC,EAAEuQ;;;;;;;;;AAGd,AAAA,AAAA,CAAAmB,sDAAA,YAAA;;AAAA,CAAAC,sDAAA,YAEI;;6BACIjY,EAAEqG,EAAEC;AADR,AAEI,OAACoQ,+CAAe1W,EAAE,AAACmR,4CAAiB9K,EAAEC;;6BACtCtG,EAAEqG,EAAEC,EAAEuQ;AAHV,AAII,OAACE,+CAAe/W,EAAE,AAACmR,4CAAiB9K,EAAEC,GAAGuQ;;oBADzC7W,EAAEqG,EAAEC,EAAEuQ;;;6BAAN7W,EAAEqG,EAAEC;;6BAAJtG,EAAEqG,EAAEC,EAAEuQ;;;;;;;;;AAGd,AAAA,AAAA,CAAAqB,sDAAA,YAAA;;AAAA,CAAAC,sDAAA,YAEI;;6BACInY,EAAEqG,EAAEC;AADR,AAEI,OAACwB,2CAAW9H,EAAE,AAACkR,4CAAiB7K,EAAEC;;6BAClCtG,EAAEqG,EAAEC,EAAEuQ;AAHV,AAII,AAAC/O,2CAAW9H,EAAE,AAACkR,4CAAiB7K,EAAEC;;AAClC,OAACsB,0CAAU5H,EAAE6W;;oBAFb7W,EAAEqG,EAAEC,EAAEuQ;;;6BAAN7W,EAAEqG,EAAEC;;6BAAJtG,EAAEqG,EAAEC,EAAEuQ;;;;;;;;;AAMd,AAAA,AAAA,CAAAuB,wCAAA,UAAA;;AAAA,CAAAzX,2CAAA,UAEI,WAAe0F;AAAf,AACuBgS;;;AAH3B,AAAA,CAAAD,wCAAA,YAAA;;AAAA,CAAAzX,2CAAA,YAMI,WAAe0F;AAAf,AACE,GAAI,CAAA5C,UAAA,AAAe4C;AACjB,OAAmB,AAAqBxC,eAAMwC;;AACzBgS;;;AAG7B,AAAA,AAAA,CAAAC,6CAAA,YAAA;;AAAA,CAAAtJ,2CAAA,YAEI,WAAehP;AAAf,AAAA;;;AAFJ,CAAAuY,0CAAA,YAII,WAAcvY;AAAd,AAAA;;;AAJJ,CAAAwY,4CAAA,YAMI,WAAgBxY;AAAhB,AAAA;;AAIJ,AAAA,AAAA,CAAA,AAAA,0EAAA2B,1EAEWiX;;AAFX,CAAA,AAAA,AAEWA,kGACP,WAAmB5Y,EAAEqG;AAArB,AAAA,YAAA,RAAmBrG;AAAnB,AACE,GACE,AAAC6Y,wBAAQ7Y;AAAG,OAACyR,8CAAmBzR,MAAEqG;;AAClC,QAACrG,sCAAAA,yCAAAA,LAAEqG,qBAAAA;;;;AANX,CAAA,AAAA,AAEWuS,wGAKP,WAAoB5Y,EAAEqG;AAAtB,AAAA,YAAA,RAAoBrG;AAApB,AACE,GACE,AAAC6Y,wBAAQ7Y;AAAG,OAAC8H,2CAAWzB,EAAE,AAACoL,8CAAmBzR,MAAEqG;;AAChD,OAACyB,2CAAWzB,EAAE,CAACrG,sCAAAA,yCAAAA,LAAEqG,qBAAAA;;;;AAVzB,AAAA,CAAAoS,+CAAA,YAAA;;AAAA,CAAAC,+CAAA,YAYI,WAAmB1Y,EAAEqG;AAArB,AACE,GACE,CAAA,QAAM,AAAC7F,gBAAK,AAACC,6CAAkBT;AAAK,OAACyR,8CAAmBzR,EAAEqG;;AAD5D,AAEQ,MAAA,AAAAjD,gDAAA,CAAA,+GAAA,7BAA6C,AAAqBS,eAAM7D;;;;;AAftF,CAAA2Y,qDAAA,YAgBI,WAAoB3Y,EAAEqG;AAAtB,AACE,OAACyB,2CAAWzB,EAAE,AAACqS,+CAAoB1Y,EAAEqG;;AAI3C,AAAA,AAAA,CAAAyS,6CAAA,YAAA;;AAAA,CAAAjS,oCAAA,YAAA,WAEY7G,EAAEqG;AAFd,AAGM,GAAI,OAASA;AACX,QAAGrG,IAAEqG;;AACL,OAACE,wCAAaF,EAAErG;;;;AALxB,CAAAuG,wCAAA,YAAA,WAMgBvG,EAAEqG;AANlB,AAOM,GAAI,OAASA;AACX,QAAGA,IAAErG;;AACL,OAAC6G,oCAASR,EAAErG;;;;AATpB,AAAA,CAAA8Y,6CAAA,YAAA;;AAAA,CAAAjS,oCAAA,YAWI,WAAQ7G,EAAEqG;AAAV,AACE,mDAAA,WAAA0S,vDAACxH,0CAAevR;AAAhB,AAAmB,QAAA+Y,mBAAK1S;;;;AAZ9B,CAAAE,wCAAA,YAaI,WAAYvG,EAAEqG;AAAd,AACE,OAACkL,0CAAevR,EAAE,AAACgZ,gDAAQ3Y,iBAAEgG;;AAGnC,AAAA,AAAA,CAAA4S,oDAAA,YAAA;;AAAA,CAAArR,0CAAA,YAAA,WAEa5H,EAAEqG;AAFf,AAGM,MAAA,AAAAjD,gDAAA,CAAA,0FAAA,bAAwCpD;;;AAH9C,CAAAkZ,8CAAA,YAAA,WAIiBlZ,EAAEqG;AAJnB,AAKM,MAAA,AAAAjD,gDAAA,CAAA,8FAAA,bAA4CpD;;;AALlD,AAAA,CAAAiZ,oDAAA,YAAA;;AAAA,CAAArR,0CAAA,YAOI,WAAS5H,EAAEqG;AAAX,AACE,kDAAA,WAAA8S,7DAAC/F,gDAAgBpT;AAAjB,AAAoB,QAAAmZ,mBAAK9S;;;AACzBrG;;;AATN,CAAAkZ,8CAAA,YAUI,WAAalZ,EAAEqG;AAAf,AACE,AAAC+M,gDAAgBpT,EAAE,AAACgZ,gDAAQ3Y,iBAAEgG;;AAC9BrG;;AAGN,AAAA,AAAA,CAAAoZ,yCAAA,YAAA;;AAAA,CAAAhI,yCAAA,YAAA,WAGiBpR,EAAEqG;AAHnB,AAIM,GAAI,OAASA;AACX,QAAGrG,IAAEqG;;AACL,OAAC+K,yCAAc/K,EAAErG;;;;AANzB,CAAAgH,yCAAA,YAAA,WAOiBhH,EAAEqG;AAPnB,AAQM,GAAI,OAASA;AACX,QAAGrG,IAAEqG;;AACL,OAACgT,qCAAU,AAACrS,yCAAcX,EAAErG;;;;AAVpC,AAAA,CAAAoZ,yCAAA,YAAA;;AAAA,CAAAhI,yCAAA,YAaI,WAAapR,EAAEqG;AAAf,AACE,IAAAiT,aAAY,AAAC3G,mDAAwB3S,EAAEqG;YAAvC,AAAA3C,4CAAA4V,WAAA,IAAA,nEAAOtZ;YAAP,AAAA0D,4CAAA4V,WAAA,IAAA,nEAASjT;AAAT,AACE,OAACkL,0CAAevR,MAAEuT,iBAAelN;;;AAfzC,CAAAW,yCAAA,YAgBI,WAAahH,EAAEqG;AAAf,AACE,IAAAkT,aAAY,AAAC5G,mDAAwB3S,EAAEqG;YAAvC,AAAA3C,4CAAA6V,WAAA,IAAA,nEAAOvZ;YAAP,AAAA0D,4CAAA6V,WAAA,IAAA,nEAASlT;AAAT,AACE,OAACkL,0CAAevR,MAAEwZ,YAAenT;;AAIzC,AAAA,AAAA,CAAAoT,gDAAA,YAAA;;AAAA,CAAA/C,+CAAA,YAAA,WAGkB1W,EAAEqG;AAHpB,AAIM,MAAA,AAAAjD,gDAAA,2CAAA;;;AAJN,CAAAsW,+CAAA,YAAA,WAKkB1Z,EAAEqG;AALpB,AAMM,MAAA,AAAAjD,gDAAA,2CAAA;;;AANN,AAAA,CAAAqW,gDAAA,YAAA;;AAAA,CAAA/C,+CAAA,YASI,WAAc1W,EAAEqG;AAAhB,AACE,OAAC+M,gDAAgBpT,EAAEuT,iBAAelN;;;AAVxC,CAAAqT,+CAAA,YAWI,WAAc1Z,EAAEqG;AAAhB,AACE,OAAC+M,gDAAgBpT,EAAEwZ,YAAenT;;AAExC,AAAA,AAAA,CAAAsT,wCAAA,UAAA;;AAAA,CAAAN,qCAAA,UAEI,WAASrZ;AAAT,AACE,MAAA,AAAAoD,gDAAA,oBAAA;;;AAHN,AAAA,CAAAuW,wCAAA,YAAA;;AAAA,CAAAN,qCAAA,YAAA,WAKarZ;AALb,AAMM,UAAGA;;;AANT,AAAA,CAAA2Z,wCAAA,YAAA;;AAAA,CAAAN,qCAAA,YAQI,WAASrZ;AAAT,AACE,6CAAA,tCAAC6G,oCAAS7G;;AAIhB,AAAA,AAAA,CAAA4Z,8CAAA,UAAA;;AAAA,CAAAC,4CAAA,UAEI,WAAgBxT,EAAEC;AAAlB,AACE,MAAA,AAAAlD,gDAAA,yDAAA;;;AAHN,AAAA,CAAAwW,8CAAA,YAAA;;AAAA,CAAAC,4CAAA,YAAA,WAKoBxT,EAAEC;AALtB,AAMM,GACE,OAASA;AAAG,QAAID,MAAEC;;AADpB,GAEE,CAAA,QAAM,AAAC7F,6CAAkB6F;AAAI,OAACuT,4CAAiBvT,EAAED;;AAFnD,AAAA;;;;;;AANN,AAAA,CAAAuT,8CAAA,YAAA;;AAAA,CAAAC,4CAAA,YAWI,WAAgBxT,EAAEC;AAAlB,AACE,GACE,CAAYD,MAAEC;AADhB;;AAAA,oBAEE,AAAC2F,gDAAe5F,EAAEC;AAClB,GAAI,CAAA,QAAM,AAAC9F,gBAAK,AAACC,6CAAkB4F;AACjC,QAAI,AAACrF,qCAAUqF,OAAG,iBAAAyT,mBAAexT;AAAf,AAAA,GAAA,OAAAwT;AAAAA;;AAAA,AAAA,OAAA9Y,qCAAA8Y;;;;;AAClB,OAACC,yBAASC,uBAAO,AAAClR,4CAAImR,mBAAG,AAAClU,0CAAeM,GAAG,AAACN,0CAAeO;;;AALhE,AAAA;;;;;AAQN,AAAA,AAAA,CAAA4T,6CAAA,UAAA;;AAAA,CAAAC,2CAAA,UAEI,WAAe9T,EAAEC;AAAjB,AACE,SACE,MAAA,LAAMA,gBACN,EACE,CAAA,QAAM,AAAC9F,gBAAK,AAACC,6CAAkB6F,UAC/B,4CAAA,3CAAM,AAACtF,qCAAUsF;;;AAP3B,AAAA,CAAA4T,6CAAA,YAAA;;AAAA,CAAAC,2CAAA,YAAA,WASiB9T,EAAEC;AATnB,AAUI,SACE,CAAA,QAAM,AAAC9F,gBAAK,AAACC,6CAAkB6F,UAC/B,CAAID,MAAE,AAACrF,qCAAUsF;;;AAZvB,AAAA,CAAA4T,6CAAA,YAAA;;AAAA,CAAAC,2CAAA,YAcI,WAAe9T,EAAEC;AAAjB,AACE,IAAA8T,oBACE,AAACnO,gDAAe5F,EAAEC;AADpB,AAAA,oBAAA8T;AAEE,OAACvU,uBAAOwU,sBAAM,AAACvR,4CAAIwR,eAAE,AAACvU,0CAAeM,GAAG,AAACN,0CAAeO;;AAF1D8T;;;AAKN,AAAA,AAAA,CAAAG,qDAAA,UAAA;;AAAA,CAAAC,oDAAA,UAEI,WAAwBnU,EAAEC,EAAEmU;AAA5B,AACE,MAAA,AAAArX,gDAAA,yDAAA;;;AAHN,AAAA,CAAAmX,qDAAA,YAAA;;AAAA,CAAAC,oDAAA,YAAA,WAK4BnU,EAAEC,EAAEmU;AALhC,AAMM,GACE,OAASnU;AAAG,QAAA,AAAAoU,SAAA,CAAOrU,IAAEC,OAAEmU;;AADzB,GAEE,CAAA,QAAM,AAACja,gBAAK,AAACC,6CAAkB6F;AAAK,QAAA,AAAAoU,SAAA,CAAOrU,IAAE,AAACrF,qCAAUsF,QAAGmU;;AAF7D,AAAA;;;;;;AANN,AAAA,CAAAF,qDAAA,YAAA;;AAAA,CAAAC,oDAAA,YAWI,WAAwBnU,EAAEC,EAAEmU;AAA5B,AACE,GACE,CAAYpU,MAAEC;AADhB;;AAAA,oBAEE,AAAC2F,gDAAe5F,EAAEC;AAChB,IAAMmU,UAAYA;AAAlB,AACE,8BAAA,WAAAE,lCAAC9U;AAAD,AAAS,QAAI,AAACW,SAASmU,qBAAYF;GAAK,AAAC3R,4CAAI0Q,YAAE,AAACzT,0CAAeM,GAAG,AAACN,0CAAeO;;AAJxF,AAAA;;;;;AAON,AAAA,AAAA,CAAAsU,iDAAA,YAAA;;AAAA,CAAAC,8CAAA,YAAA,WAEsB7a;AAFtB,AAGM,IAAM0J,MAAI,qDAAA,rDAACqR;AAAX,AAA4B,KAAA,JAAMrR,WAAc1J;;AAAI0J;;;AAH1D,CAAAoR,8CAAA,YAAA,WAIsB9a;AAJtB,AAAA;;;AAAA,AAAA,CAAA4a,iDAAA,YAAA;;AAAA,CAAAC,8CAAA,YAMI,WAAkB7a;AAAlB,AACE,OAAC+a,qDAAa,AAAChV,0CAAe/F;;;AAPpC,CAAA8a,8CAAA,YAQI,WAAkB9a;AAAlB,AAAA;;AAEJ,AAAA,AAAA,CAAAgb,iDAAA,UAAA;;AAAA,CAAAC,8CAAA,UAEI,WAAkBjb;AAAlB,AACE,IAAM0J,MAAI,qDAAA,rDAAC2G;AAAX,AAA4B3G;;;AAHlC,CAAAwR,8CAAA,UAII,WAAkBlb;AAAlB,AAAA;;;AAJJ,AAAA,CAAAgb,iDAAA,YAAA;;AAAA,CAAAC,8CAAA,YAAA,WAMsBjb;AANtB,AAOM,IAAM0J,MAAI,qDAAA,rDAAC2G;AAAX,AAA4B,KAAA,JAAM3G,WAAM1J;;AAAG0J;;;AAPjD,CAAAwR,8CAAA,YAAA,WAQsBlb;AARtB,AAAA;;;AAAA,AAAA,CAAAgb,iDAAA,YAAA;;AAAA,CAAAC,8CAAA,YAUI,WAAkBjb;AAAlB,AACE,OAACqQ,qDAAa,AAACtK,0CAAe/F;;;AAXpC,CAAAkb,8CAAA,YAYI,WAAkBlb;AAAlB,AAAA;;AAGJ,AAAA,AAAA,CAAAmb,6CAAA,YAAA;;AAAA,CAAAC,wCAAA,YAEI,WAAYpb,EAAEmI,EAAEsF;AAAhB,AACE,OAAC2N,wCAAa,AAACxQ,wDAA6B5K,GAAGmI,EAAEsF;;;AAHvD,CAAA4N,2CAAA,YAII,WAAerb,EAAEmI,EAAEsK;AAAnB,AACE,OAAC4I,2CAAgB,AAACzQ,wDAA6B5K,GAAGmI,EAAEsK;;;AAL1D,CAAA6I,sCAAA,YAMI,WAAUtb,EAAEmI,EAAEsF,EAAEgF;AAAhB,AACE,OAAC6I,sCAAW,AAAC1Q,wDAA6B5K,GAAGmI,EAAEsF,EAAEgF;;AAEvD,AAAA,AAAA,CAAA8I,0CAAA,YAAA;;AAAA,CAAAC,sCAAA,YAEI,WAAUxb,EAAEmI,EAAEhD;AAAd,AACE,IAAMuW,OAAK,AAACzN,cAAI,AAACxF,kDAAuBzI;IAClCmF,UAAI,AAACwW,6CAAkB,yEAAA,sBAAA,9FAACD,qCAAAA,0CAAAA,qBAAQvW;AADtC,AAEE,OAAClE,2CAAgBjB,EAAE,AAACmP,8CAAMuM,KAAKvT,EAAEhD;;;AALzC,CAAAsW,4CAAA,YAMI,WAAWzb,EAAEmI,EAAEhD;AAAf,AACE,IAAMkM,KAAG,AAACuK,mDAAwB5b,EAAEmI;IAC9BhD,UAAI,AAACwW,6CAAkBtK,GAAGlM;AADhC,AAEE,AAAC2C,2CAAWuJ,GAAGlM;;AACfnF;;AAER,AAAA,AAAA,CAAA6b,6CAAA,YAAA;;AAAA,CAAAC,yCAAA,YAEE,WAAa9b,EAAEmI,EAAE9C;AAAjB,AACE,IAAM2W,OAAK,2CAAA,3CAACC,yCAAcjc;IACpBqF,aAAO,AAACsW,6CAAkBK,KAAK3W;IAC/BqK,UAAQ,AAACtC,8CAAM,yDAAA,zDAAClF,8CAAmB7C;IACnCmN,QAAM,AAACpS,+CAAO,WAAK2K,IAAImR;AAAT,AACE,OAAClX,qCAAU+F,IAAImR,IAAI/T,EAAE,AAACnF,qCAAUqC,WAAO6W;GACzClc,EAAE0P;AALtB,AAME,OAACzO,2CAAgBjB,EAAEwS;;;AATzB,CAAAuJ,+CAAA,YAUE,WAAc/b,EAAEmI,EAAE9C;AAAlB,AACE,IAAM2W,OAAK,2CAAA,3CAACC,yCAAcjc;IACpBqF,aAAO,AAACsW,6CAAkBK,KAAK3W;AADrC,AAEE,IAAAgD,kBAAY,yDAAA,zDAACH,8CAAmB7C;AAAhC,AAAA,QAAA,JAAUoI;;AAAV,AAAA,GAAA,KAAApF,JAAUoF;AAAV,AACE,AAAChI,2CAAWzF,EAAEyN,EAAEtF,EAAE,AAACnF,qCAAUqC,WAAOoI;;AADtC,eAAA,KAAA,JAAUA;;;;AAAV;;;;;AAIN,AAAA,AAAA,CAAA0O,wCAAA,YAAA;;AAAA,CAAAC,wCAAA,YAEE;;6BACIpc,EAAEsL;AADN,AAEI,OAAC+Q,iDAAiBrc,EAAE,AAAC6Q,6CAAKvF,EAAE,AAAC7C,kDAAuBzI;;6BACpDA,EAAEsL,EAAEjF;AAHR,AAII,OAACgW,iDAAiBrc,EAAE,AAAC6Q,6CAAKvF,EACA,AAAC7C,kDAAuBzI,GACxB,AAACyI,kDAAuBpC;;6BAClDrG,EAAEsL,EAAEjF,EAAEiW;AAPV,AAQI,OAACD,iDAAiBrc,EAAE,AAACwL,8CAAMwB,eAAK1B,EACL,AAAC7C,kDAAuBzI,GACxB,AAACyI,kDAAuBpC,GACxB,AAACyC,4CAAIL,kDAAuB6T;;oBAJvDtc,EAAEsL,EAAEjF,EAAEiW;;;6BAANtc,EAAEsL;;6BAAFtL,EAAEsL,EAAEjF;;6BAAJrG,EAAEsL,EAAEjF,EAAEiW;;;;;;;;;;AAOZ,AAAA,AAAA,CAAAC,4CAAA,YAAA;;AAAA,CAAAC,4CAAA,YAEE,WAAgBxc,EAAEsL;AAAlB,AACE,IAAMmR,OAAK,AAACC,kBAAQpR,EAAE,AAAC7C,kDAAuBzI;AAA9C,AAEE,GAAI,AAACwD,cAAIiZ;AAAMA;;AAAf;;;AAEN,AAAA,AAAA,CAAAE,uCAAA,YAAA;;AAAA,CAAAC,6CAAA,YAEE;;6BACIxM,KAAK9E,EAAEjF;AADX,AAEI,OAACqQ,+CAAetG,KAAK,AAACmB,0CAAelL,EAAEiF;;6BACvC8E,KAAK9E,EAAEjF,EAAEC;AAHb,AAII,OAACoQ,+CAAetG,KAAK,AAACmB,0CAAelL,EAAEiF,EAAEhF;;6BACzC8J,KAAK9E,EAAEjF,EAAEC,EAAEgW;AALf,AAMI,OAAC5F,+CAAetG,KAAK,AAACmB,0CAAelL,EAAEiF,EAAEhF,EAAEgW;;oBAD3ClM,KAAK9E,EAAEjF,EAAEC,EAAEgW;;;6BAAXlM,KAAK9E,EAAEjF;;6BAAP+J,KAAK9E,EAAEjF,EAAEC;;6BAAT8J,KAAK9E,EAAEjF,EAAEC,EAAEgW;;;;;;;;;;AAGjB,AAAA,AAAA,CAAAO,uCAAA,YAAA;;AAAA,CAAAC,6CAAA,YAEE;;6BACI1M,KAAK9E,EAAEjF;AADX,AAEI,OAACyB,2CAAWsI,KAAK,AAACmB,0CAAelL,EAAEiF;;6BACnC8E,KAAK9E,EAAEjF,EAAEC;AAHb,AAII,OAACwB,2CAAWsI,KAAK,AAACmB,0CAAelL,EAAEiF,EAAEhF;;6BACrC8J,KAAK9E,EAAEjF,EAAEC,EAAEgW;AALf,AAMI,OAACxU,2CAAWsI,KAAK,AAACmB,0CAAelL,EAAEiF,EAAEhF,EAAEgW;;oBADvClM,KAAK9E,EAAEjF,EAAEC,EAAEgW;;;6BAAXlM,KAAK9E,EAAEjF;;6BAAP+J,KAAK9E,EAAEjF,EAAEC;;6BAAT8J,KAAK9E,EAAEjF,EAAEC,EAAEgW;;;;;;;;;;AAIjB,AAAA,AAAA,CAAAS,oDAAA,YAAA;;AAAA,CAAAhX,0CAAA,YAAA,WAEkB/F;AAFlB,AAGM,YAAAgd,2BAAA,KAAA,EAAA,IAAA,AAAAA,sCAAA,IAAA,HAAQhd;;;AAHd,CAAAuR,0CAAA,YAAA;;6BAKQvR,EAAEsL;AALV,AAMQ,QAACA,kCAAAA,qCAAAA,LAAEtL,iBAAAA;;6BACHA,EAAEsL,EAAEjF;AAPZ,AAQQ,mDAAA,WAAA4W,vDAAC1L,0CAAelL;AAAhB,AAAmB,4EAAA4W,kCAAAA,tGAAC3R,kCAAAA,sDAAAA,tBAAEtL,kCAAAA;;;6BACtBA,EAAEsL,EAAEjF,EAAEiW;AATd,AAUQ,IAAArc,qBAAkB,AAAC2D,eAAK0Y;AAAxB,AAAA,GAAArc;AAAA,eAAAA,XAASid;AAAT,AACE,mDAAA,5CAAC3L,0CAAelL;mCAAhB8W,iBAAAC,iBAAAC;AAAA,AAAmB,yDAAAF,iBAAAC,iBAAAC,pFAAC7R,8CAAMF,EAAEtL;;yBAA5Bmd,iBAAAC;IAAAC;;;;EAAAA;;oCAAAF,iBAAAC,iBAAAC;;;IAAAF;;IAAAC;IAAAC;0BAAAF,iBAAAC,iBAAAC;;;;;CAAwC,AAAC1Z,gBAAM2Y,MAAMY;;AACrD,mDAAA,WAAAI,iBAAAC,xEAAChM,0CAAelL;AAAhB,AAAmB,4EAAAiX,iBAAAC,kCAAAD,iBAAAC,xIAACjS,kCAAAA,uEAAAA,vCAAEtL,mDAAAA;GAAS,AAAC2D,gBAAM2Y;;;oBAHxCtc,EAAEsL,EAAEjF,EAAEiW;;;6BAANtc,EAAEsL;;6BAAFtL,EAAEsL,EAAEjF;;6BAAJrG,EAAEsL,EAAEjF,EAAEiW;;;;;;;;;;;AATd,CAAAlJ,gDAAA,YAAA;;6BAcQpT,EAAEsL;AAdV,AAeQ,MAAA,AAAAlI,gDAAA,4CAAA;;6BACApD,EAAEsL,EAAEjF;AAhBZ,AAiBQ,MAAA,AAAAjD,gDAAA,4CAAA;;6BACApD,EAAEsL,EAAEjF,EAAEiW;AAlBd,AAmBQ,MAAA,AAAAlZ,gDAAA,4CAAA;;oBADApD,EAAEsL,EAAEjF,EAAEiW;;;6BAANtc,EAAEsL;;6BAAFtL,EAAEsL,EAAEjF;;6BAAJrG,EAAEsL,EAAEjF,EAAEiW;;;;;;;;;;;AAlBd,CAAAnY,6CAAA,YAAA;;6BAqBQnE,EAAEsL;AArBV,AAsBQtL;;6BACAA,EAAEsL,EAAEkS;AAvBZ,AAwBQ,QAAClS,kCAAAA,0CAAAA,VAAEkS,sBAAAA,jBAAKxd,sBAAAA;;oBADRA,EAAEsL,EAAEkS;;;6BAAJxd,EAAEsL;;6BAAFtL,EAAEsL,EAAEkS;;;;;;;;;;AAvBZ,AAAA,CAAAT,oDAAA,YAAA;;AAAA,CAAAhX,0CAAA,YA0BI,WAAc/F;AAAd,AACE,IAAM+N,IAAE,AAAyClK,eAAM7D;IACjDO,OAAK,AAACC,gBAAK,AAACC,6CAAkBT;AADpC,AAEE,GACE,QAAA,PAAGO;AAAQ,OAACkd,sDAAO1X,4FAAe,AAAC0C,kDAAuBzI;;AAD5D,GAEE,AAAC0d,qBAAK1d;AAAGA;;AAFX,GAGE,CAAA,QAAMO;AACJ,YAAAyc,2BAAA,KAAA,EAAA,IAAA,AAAAA,sCAAA,0CAAA,zCAAQ,AAAChc,qCAAUhB;;AAJvB,GAMG,AAACa,6CAAE4C,MAASsK;AAAG/N;;AANlB,GAOE,CAAA,QAAMO;AACJ,OAACqK,wDAA6B5K;;AARlC,GASE,AAAAuI,cAAA,AAAA3C,+CAAQ5F;AACN,OAACyd,sDAAO1X,4FAAe,AAAC0C,kDAAuBzI;;AAVnD,AAWQ,MAAA,AAAAoD,gDAAA,CAAA,uGAAA,bAAqDpD;;;;;;;;;;AAxCrE,CAAAuR,0CAAA,YAyCI;;6BACIvR,EAAEsL;AADN,AAEI,OAAC+Q,iDAAiBrc,EAAE,AAAC2d,wEAAUrS,EAAEtL;;6BACjCA,EAAEsL,EAAEjF;AAHR,AAII,IAAAuX,aAAY,AAAClJ,mDAAwB1U,EAAEqG;YAAvC,AAAA3C,4CAAAka,WAAA,IAAA,nEAAO5d;YAAP,AAAA0D,4CAAAka,WAAA,IAAA,nEAASvX;AAAT,AACE,OAACgW,iDAAiBrc,MAAE,AAAC2d,wEAAUrS,EAAEtL,MAAEqG;;6BACrCrG,EAAEsL,EAAEjF,EAAEiW;AANV,AAOI,IAAMuB,SAAO,AAACjS,eAAK5L,EAAE,AAAC4L,eAAKvF,EAAEiW;IACvBwB,SAAO,AAAChV,4CAAI3I,wCAAa0d;IACzB3d,KAAG,iBAAAyI,mBAAI,AAACoV,2CAAgBD;AAArB,AAAA,oBAAAnV;AAAAA;;AAA6B,MAAA,AAAAvF,gDAAA,CAAA,2MAAA,xGAA8D,AAACyN,6CAAK1Q,wCAAa0d;;;IACjHA,aAAO,4CAAA,WAAAG,vDAAClV;AAAD,AAAM,+CAAAkV,xCAAC9O,yDAAehP;GAAI2d;AAHvC,AAIE,OAACxB,iDAAiBrc,EAAE,AAACwL,8CAAMyS,0CAAU3S,EAAEuS;;oBALzC7d,EAAEsL,EAAEjF,EAAEiW;;;6BAANtc,EAAEsL;;6BAAFtL,EAAEsL,EAAEjF;;6BAAJrG,EAAEsL,EAAEjF,EAAEiW;;;;;;;;;;;AA/Cd,CAAAlJ,gDAAA,YAsDI;;6BACIpT,EAAEsL;AADN,AAEI,OAACxD,2CAAW9H,EAAE,AAACuR,0CAAevR,EAAEsL;;6BAChCtL,EAAEsL,EAAEjF;AAHR,AAII,OAACyB,2CAAW9H,EAAE,AAACuR,0CAAevR,EAAEsL,EAAEjF;;6BAClCrG,EAAEsL,EAAEjF,EAAEiW;AALV,AAMI,OAACxU,2CAAW9H,EAAE,AAACuR,0CAAevR,EAAEsL,EAAEjF,EAAEiW;;oBADpCtc,EAAEsL,EAAEjF,EAAEiW;;;6BAANtc,EAAEsL;;6BAAFtL,EAAEsL,EAAEjF;;6BAAJrG,EAAEsL,EAAEjF,EAAEiW;;;;;;;;;;;AA3Dd,CAAAnY,6CAAA,YA6DI;;6BACInE,EAAEsL;AADN,AAEI,OAAClL,+CAAOkL,EAAE,AAACvF,0CAAe/F;;6BAC1BA,EAAEsL,EAAEkS;AAHR,AAII,OAACpd,+CAAOkL,EAAEkS,KAAK,AAACzX,0CAAe/F;;oBAD/BA,EAAEsL,EAAEkS;;;6BAAJxd,EAAEsL;;6BAAFtL,EAAEsL,EAAEkS;;;;;;;;;;AAhEZ,AAAA,CAAAT,oDAAA,UAAA;;AAAA,CAAAhX,0CAAA,UAmEI,WAAc/F;AAAd,AAAA,AAAA;;;AAnEJ,CAAAuR,0CAAA,UAoEI;;6BACIvR,EAAEsL;AADN,AACS,0EAAA,oBAAA,tFAACA,kCAAAA,wCAAAA;;6BACNtL,EAAEsL,EAAEjF;AAFR,AAEW,0EAAA,sBAAA,xFAACiF,kCAAAA,0CAAAA,LAAMjF,sBAAAA;;6BACdrG,EAAEsL,EAAEjF,EAAEiW;AAHV,AAGgB,uDAAA,hDAAC9Q,8CAAMF,OAAMjF,EAAEiW;;oBAA3Btc,EAAEsL,EAAEjF,EAAEiW;;;6BAANtc,EAAEsL;;6BAAFtL,EAAEsL,EAAEjF;;6BAAJrG,EAAEsL,EAAEjF,EAAEiW;;;;;;;;;;;AAvEd,CAAAlJ,gDAAA,UAwEI;;6BACIpT,EAAEsL;AADN,AACS,MAAA,AAAAlI,gDAAA,+BAAA;;6BACLpD,EAAEsL,EAAEjF;AAFR,AAEW,MAAA,AAAAjD,gDAAA,+BAAA;;6BACPpD,EAAEsL,EAAEjF,EAAEiW;AAHV,AAGgB,MAAA,AAAAlZ,gDAAA,+BAAA;;oBAAZpD,EAAEsL,EAAEjF,EAAEiW;;;6BAANtc,EAAEsL;;6BAAFtL,EAAEsL,EAAEjF;;6BAAJrG,EAAEsL,EAAEjF,EAAEiW;;;;;;;;;;;AA3Ed,CAAAnY,6CAAA,UA4EI;;6BACInE,EAAEsL;AADN,AAAA;;6BAEItL,EAAEsL,EAAEkS;AAFR,AAEc,+EAAA,yBAAA,hGAAClS,kCAAAA,6CAAAA,bAAEkS,yBAAAA;;oBAAbxd,EAAEsL,EAAEkS;;;6BAAJxd,EAAEsL;;6BAAFtL,EAAEsL,EAAEkS;;;;;;;;;;AA9EZ,AAAA,CAAA,AAAA,gFAAA7b,hFAiFGkK;;AAjFH,CAAA,AAAA,AAiFGA,mGACC,WAAc7L;AAAd,AAAA,YAAA,RAAcA;AAAd,AACC,GACG,CAAA,QAAM,AAACsF,gBAAMtF;AADhB;;AAAA,GAGG,0HAAA,zHAAI,AAACQ,gBAAK,AAACC,6CAAkB,kDAAA,lDAACiD,4CAAI1D;AAEhC,OAACyd,sDAAO1X,4FAAe/F;;AAL5B,AAQKA;;;;;AAGV,yCAAA,zCAAOke,0FAAMC;AAAb,AACE,GAAI,AAACC,uBAAOD;AAAZ,0FAAA;;AAEE,IAAAE,qBAAA,+DAAAC;AAAA,AAAA,YAAAxa,kBAAA,KAAA;AAAA,AAAA,IAAAwa,eAAAA;;AAAA,AAAA,IAAAlV,qBAAA,AAAA5F,cAAA8a;AAAA,AAAA,GAAAlV;AAAA,AAAA,IAAAmV,mBAAAnV;AAAA,AAAA,QAAA,AAAAzF,gBAAA4a,pBAAMpb;AAAN,AAAA,IAAAqb,uBAAA;oFAAAC;AAAA,AAAA,YAAA3a,kBAAA,KAAA;;AAAA,AAAA,IAAA2a,eAAAA;;AAAA,AAAA,IAAArV,yBAAA,AAAA5F,cAAAib;AAAA,AAAA,GAAArV;AAAA,AAAA,IAAAqV,eAAArV;AAAA,AAAA,GAAA,AAAAC,6BAAAoV;AAAA,IAAAC,kBAs7B+C,AAAAnV,sBAAAkV;IAt7B/CE,qBAAA,AAAArZ,gBAAAoZ;IAAAE,WAAA,AAAAC,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAG,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAH;AAAA,WAAA,AAAAI,eAAAL,gBAAAI,tCACMxC;AADN,AAAA,AAAA,AAAA0C,uBAAAJ,SAEE,AAAChT,eAAKzI,EAAEmZ;;AAFV,eAAA,CAAAwC,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,mEAAA,AAAA3V,qBAAAiV;;AAAA,OAAAQ,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,WAAA,AAAAjb,gBAAA8a,vBACMnC;AADN,AAAA,OAAA1Q,sCAAA,AAAAuT,mEAAA,AAAAC,eAAAX,zGAEE,AAAC7S,eAAKzI,EAAEmZ;;;AAFV;;;;;CAAA,KAAA;;;IAAA+C,mBAAA,AAAA7b,cAAA,AAAAgb,qBACW,iBAAAe,WAAM,AAACH,eAAKjB;AAAZ,AAAA,oJAAAoB,6DAAAA,zMAACrB,uEAAAA,iFAAAA;;AADZ,AAAA,GAAAmB;AAAA,OAAAnR,+CAAAmR,iBAAA,AAAAC,qDAAA,AAAAF,eAAAd;;AAAA,eAAA,AAAAc,eAAAd;;;;;AAAA;;;;GAAA,KAAA;;AAAA,AAAA,OAAAD,mBAAW,AAAC1a,gBAAMwa;;;AAItB,gDAAA,hDAAOqB,wGAAaxf;AAApB,AACE,OAACke,uCAAK,AAACpV,4CAAI2W,gBAAM,AAACtf,wCAAaH;;AAEjC,AAAA,AAAA,CAAA0f,0CAAA,YAAA;;AAAA,CAAAC,kDAAA,YAAA;;6BAGQ3f,EAAEsL;AAHV,AAIQ,IAAAuU,WAAA;IAAAC,WAAM9f;AAAN,AAAA,0EAAA6f,SAAAC,wBAAAD,SAAAC,5GAACxU,kCAAAA,qDAAAA;;6BACDtL,EAAEsL,EAAEjF;AALZ,AAMQ,mDAAA,WAAA0Z,vDAACxO,0CAAelL;AAAhB,AAAmB,IAAA2Z,WAAA;IAAAC,WAAMjgB;IAANkgB,WAAAH;AAAA,AAAA,0EAAAC,SAAAC,SAAAC,wBAAAF,SAAAC,SAAAC,9HAAC5U,kCAAAA,8DAAAA;;;6BACpBtL,EAAEsL,EAAEjF,EAAEiW;AAPd,AAQQ,IAAArc,qBAAkB,AAAC2D,eAAK0Y;AAAxB,AAAA,GAAArc;AAAA,eAAAA,XAASid;AAAT,AACE,mDAAA,5CAAC3L,0CAAelL;mCAAhB8Z,iBAAAC,iBAAAC;AAAA,AAAmB,8DAAA,mCAAAF,iBAAAC,mEAAAC,9KAAC7U,qDAAMF,mCAAKtL;;yBAA/BmgB,iBAAAC;IAAAC;;;;EAAAA;;oCAAAF,iBAAAC,iBAAAC;;;IAAAF;;IAAAC;IAAAC;0BAAAF,iBAAAC,iBAAAC;;;;;CAA2C,AAAC1c,gBAAM2Y,MAAMY;;AACxD,mDAAA,WAAAoD,iBAAAC,xEAAChP,0CAAelL;AAAhB,AAAmB,IAAAma,WAAA;IAAAC,WAAMzgB;IAAN0gB,WAAAJ;IAAAK,WAAAJ;AAAA,AAAA,0EAAAC,SAAAC,SAAAC,SAAAC,wBAAAH,SAAAC,SAAAC,SAAAC,hJAACrV,kCAAAA,uEAAAA;GAAc,AAAC3H,gBAAM2Y;;;oBAH3Ctc,EAAEsL,EAAEjF,EAAEiW;;;6BAANtc,EAAEsL;;6BAAFtL,EAAEsL,EAAEjF;;6BAAJrG,EAAEsL,EAAEjF,EAAEiW;;;;;;;;;;;AAPd,CAAAsD,wDAAA,YAAA;;6BAYQ5f,EAAEsL;AAZV,AAaQ,MAAA,AAAAlI,gDAAA,4CAAA;;6BACApD,EAAEsL,EAAEjF;AAdZ,AAeQ,MAAA,AAAAjD,gDAAA,4CAAA;;6BACApD,EAAEsL,EAAEjF,EAAEiW;AAhBd,AAiBQ,MAAA,AAAAlZ,gDAAA,4CAAA;;oBADApD,EAAEsL,EAAEjF,EAAEiW;;;6BAANtc,EAAEsL;;6BAAFtL,EAAEsL,EAAEjF;;6BAAJrG,EAAEsL,EAAEjF,EAAEiW;;;;;;;;;;;AAhBd,AAAA,CAAAoD,0CAAA,YAAA;;AAAA,CAAAC,kDAAA,YAmBI;;6BACI3f,EAAEsL;AADN,AAEI,GAAI,CAAA,QAAM,AAAC9K,gBAAK,AAACC,6CAAkBT;AACjC,IAAA4gB,WAAA;IAAAC,WAAM,AAAC7f,qCAAUhB;AAAjB,AAAA,0EAAA4gB,SAAAC,wBAAAD,SAAAC,5GAACvV,kCAAAA,qDAAAA;;AACD,IAAM/H,IAAE,AAACuF,4CAAIwC,EAAE,AAACkU,8CAAYxf,GAAG,AAAC+F,0CAAe/F;AAA/C,AACE,OAAC+R,sCAAW,AAAC9Q,2CAAgBjB,EAAEuD,GACnB,AAACpD,wCAAaH;;;6BAC9BA,EAAEsL,EAAEjF;AAPR,AAQI,GAAI,CAAA,QAAM,AAAC7F,gBAAK,AAACC,6CAAkBT;AACjC,IAAMoF,IAAE,AAACpE,qCAAUhB;AAAnB,AACE,2DAAA,WAAA8gB,iBAAAC,hFAACpB,kDAAuBtZ;AAAxB,AAA2B,0EAAAya,mBAAAC,gCAAAD,mBAAAC,xIAACzV,kCAAAA,uEAAAA,tBAAKlG,mDAAAA;;;AACnC,IAAA4b,aAAY,AAACrO,mDAAwB3S,EAAEqG;YAAvC,AAAA3C,4CAAAsd,WAAA,IAAA,nEAAOhhB;YAAP,AAAA0D,4CAAAsd,WAAA,IAAA,nEAAS3a;IACH9C,IAAE,AAACuF,4CAAIwC,EAAE,AAACkU,8CAAYxf,OAAG,AAAC+F,0CAAe/F,OAAG,AAAC+F,0CAAeM;AADlE,AAEE,OAAC0L,sCAAW,AAAC9Q,2CAAgBjB,MAAEuD,GACnB,AAACpD,wCAAaH;;;6BAC9BA,EAAEsL,EAAEjF,EAAEiW;AAfV,AAgBI,IAAM/Y,IAAE,AAACuF,4CAAIwC,EAAE,AAACvF,0CAAe/F,GAAG,AAAC+F,0CAAeM;IAC5C9C,QAAE,AAACiI,8CAAMyV,cAAI3V,EAAE,AAAC4V,mDAAM,AAAC1B,8CAAYxf,GACb,AAAC+F,0CAAe/F,GAChB,AAAC+F,0CAAeM,GAChB,AAACyC,4CAAI/C,0CAAeuW;AAJhD,AAKE,OAACvK,sCAAW,AAAC9Q,2CAAgBjB,EAAEuD,OACnB,AAACpD,wCAAaH;;oBAP5BA,EAAEsL,EAAEjF,EAAEiW;;;6BAANtc,EAAEsL;;6BAAFtL,EAAEsL,EAAEjF;;6BAAJrG,EAAEsL,EAAEjF,EAAEiW;;;;;;;;;;;AAlCd,CAAAsD,wDAAA,YA0CI;;6BACI5f,EAAEsL;AADN,AAEI,OAACxD,2CAAW9H,EAAE,AAAC2f,kDAAuB3f,EAAEsL;;6BACxCtL,EAAEsL,EAAEjF;AAHR,AAII,OAACyB,2CAAW9H,EAAE,AAAC2f,kDAAuB3f,EAAEsL,EAAEjF;;6BAC1CrG,EAAEsL,EAAEjF,EAAEiW;AALV,AAMI,OAACxU,2CAAW9H,EAAE,AAAC2f,kDAAuB3f,EAAEsL,EAAEjF,EAAEiW;;oBAD5Ctc,EAAEsL,EAAEjF,EAAEiW;;;6BAANtc,EAAEsL;;6BAAFtL,EAAEsL,EAAEjF;;6BAAJrG,EAAEsL,EAAEjF,EAAEiW;;;;;;;;;;;AA/Cd,AAAA,CAAAoD,0CAAA,UAAA;;AAAA,CAAAC,kDAAA,UAkDI;;6BACI3f,EAAEsL;AADN,AACS,IAAA6V,WAAA;IAAAC,WAAA;AAAA,AAAA,0EAAAD,SAAAC,wBAAAD,SAAAC,5GAAC9V,kCAAAA,qDAAAA;;6BACNtL,EAAEsL,EAAEjF;AAFR,AAEW,IAAAgb,WAAA;IAAAC,WAAA;IAAAC,WAAUlb;AAAV,AAAA,0EAAAgb,SAAAC,SAAAC,wBAAAF,SAAAC,SAAAC,9HAACjW,kCAAAA,8DAAAA;;6BACRtL,EAAEsL,EAAEjF,EAAEiW;AAHV,AAGgB,uDAAA,iCAAA,jFAAC9Q,8CAAMF,wCAASjF,EAAEiW;;oBAA9Btc,EAAEsL,EAAEjF,EAAEiW;;;6BAANtc,EAAEsL;;6BAAFtL,EAAEsL,EAAEjF;;6BAAJrG,EAAEsL,EAAEjF,EAAEiW;;;;;;;;;;;AArDd,CAAAsD,wDAAA,UAsDI;;6BACI5f,EAAEsL;AADN,AACS,MAAA,AAAAlI,gDAAA,uCAAA;;6BACLpD,EAAEsL,EAAEjF;AAFR,AAEW,MAAA,AAAAjD,gDAAA,uCAAA;;6BACPpD,EAAEsL,EAAEjF,EAAEiW;AAHV,AAGgB,MAAA,AAAAlZ,gDAAA,uCAAA;;oBAAZpD,EAAEsL,EAAEjF,EAAEiW;;;6BAANtc,EAAEsL;;6BAAFtL,EAAEsL,EAAEjF;;6BAAJrG,EAAEsL,EAAEjF,EAAEiW;;;;;;;;;;AAEd,AAAA,AAAA,CAAAkF,4CAAA,UAAA;;AAAA,CAAA9Q,4CAAA,UACM,WAAgB1Q;AAAhB,AAAA;;;AADN,AAAA,CAAAwhB,4CAAA,YAAA;;AAAA,CAAA9Q,4CAAA,YAAA,WAE+C1Q;AAF/C,AAAA;;;AAAA,AAAA,CAAAwhB,4CAAA,YAAA;;AAAA,CAAA9Q,4CAAA,YAII,WAAgB1Q;AAAhB,AACE,OAACD,qDAAmBC;;AAE1B,AAAA,AAAA,CAAAyhB,6CAAA,UAAA;;AAAA,CAAAC,6CAAA,UAEI;;6BACI1hB;AADJ,AAAA;;6BAEIA,EAAEgC;AAFN,AAEa,GAAU,UAAA,TAAMA;AAAhB;;AAAA,AAAuB,MAAA,AAAAoB,gDAAA,CAAA,kHAAA,jBAA4DpB;;;oBAA5FhC,EAAEgC;;;6BAAFhC;;6BAAAA,EAAEgC;;;;;;;;;;AAJV,AAAA,CAAAyf,6CAAA,YAAA;;AAAA,CAAAC,6CAAA,YAMI;;6BACI1hB;AADJ,AAEI,OAAC0hB,6CAAkB1hB,EAAE,AAACG,wCAAaH;;6BACnCA,EAAE2hB;AAHN,AAII,GACE,CAAA,QAAM,AAACnhB,gBAAK,AAACC,6CAAkBT;AAC7B,IAAME,KAAG,AAACC,wCAAaH;AAAvB,AACE,GAAI,OAAA,NAAME;AACR,GAAU,mBAAA,lBAAMyhB;AAAhB;;AAAA,AACE,MAAA,AAAAve,gDAAA,CAAA,2HAAA,1BAA4Due;;;AAC9D,GAAI,AAAC9gB,6CAAE,AAACoN,cAAI/N,IAAI,AAAC+N,cAAI0T;AACnBzhB;;AACA,MAAA,AAAAkD,gDAAA,CAAA,gFAAA,wFAAA,5FAAuClD,kEAAqByhB;;;;AARtE,AAWI,IAAMzhB,KAAG,AAACC,wCAAaH;IACjB8J,KAAG,AAACrB,kDAAuBzI;IAC3B4hB,SAAO,iBAAAjZ,mBAAI,AAAChF,gBAAMge;AAAX,AAAA,oBAAAhZ;AAAAA;;AAA2B,MAAA,AAAAvF,gDAAA,CAAA,gFAAA,wFAAA,5FAAuClD,kEAAqByhB;;;IAC9FE,QAAM,AAACje,eAAK+d;IACZ7D,SAAO,6CAAA,WAAAgE,xDAACjR;AAAD,AAAO,oDAAAiR,7CAACJ,8DAAoBG;GAAO/X;AAJhD,AAKE,oBAAI,AAAC0B,8CAAM8O,eAAEuH,MAAM/D;AACjB,OAAC7P,cAAI,AAACrC,eAAK,gDAAA,hDAAC1D,8CAAmBlI,OAAK,AAAC2D,gBAAMma;;AAC3C,MAAA,AAAA1a,gDAAA,CAAA,kHAAA,7BAAgD,AAAqBS,eAAM7D;;;;;oBAnBnFA,EAAE2hB;;;6BAAF3hB;;6BAAAA,EAAE2hB;;;;;;;;;AAqBV,AAAA,AAAA,CAAAI,4CAAA,YAAA;;AAAA,CAAAC,sCAAA,YAEI,WAAUhiB,EAAEmI;AAAZ,AACE,GAAI,CAAA1E,UAAA,AAAezD;AACjB,OAAC0D,4CAAI1D,EAAEmI;;AACP,OAAC2H,8CAAmB9P,EAAEmI;;;;AAL9B,CAAA8T,yCAAA,YAMI,WAAajc,EAAEmI;AAAf,AACE,iDAAA,1CAAC8Z,wCAAajiB,MAAImI;;;AAPxB,CAAA2H,8CAAA,YAQI,WAAkB9P,EAAEmI;AAApB,AACE,GACE,CAAA1E,UAAA,AAAezD;AAAG,OAAC0D,4CAAI1D,EAAEmI;;AAD3B,GAEE,CAAA,QAAM,AAAC3H,gBAAK,AAACC,6CAAkBT;AAAK,OAACgD,qCAAUhD,EAAEmI;;AAFnD,AAGQ,OAAC+Z,6CAA6CliB,EAAEmI;;;;;;AAZ9D,CAAA8Z,wCAAA,YAaI,WAAYjiB,EAAEmiB,UAAUha;AAAxB,AACE,IAAMia,aAAW,AAAC5hB,gBAAK2hB;AAAvB,AACE,GACE,CAAA,QAAMC;AAAY,OAACtS,8CAAmB9P,EAAEmI;;AAD1C,AAEQ,OAAC8Z,wCAAa,AAACrX,wDAA6B5K,GAAGmiB,UAAUha;;;;AAEzE,AAAA,AAAA,CAAAka,wCAAA,YAAA;;AAAA,CAAAC,yCAAA,YAEE,WAAQvU,EAAEyU,eAASC,eAASC,MAAMrc,EAAEC,EAAEqc;AAAtC,AACE,IAAMtc,QAAE,kBAAImc,gBAAS,AAAC1V,wCAAazG,GAAGA;IAChCC,QAAE,kBAAImc,gBAAS,AAAC3V,wCAAaxG,GAAGA;AADtC,AAEE,GAAA,GAAQ,CAAA,QAAgBqc;AAAO,AAAC/a,0CAAUmG,EAAE4U;;AAA5C;;AACA,OAAC5K,sDAAsBhK,EAAE1H,MAAEC,MAAEoc;;;AANnC,CAAAH,yCAAA,YAOE,WAAQxU,EAAEyU,eAASE,MAAMrc,EAAEC,EAAEqc;AAA7B,AACE,IAAMtc,QAAE,kBAAImc,gBAAS,AAAC1V,wCAAazG,GAAGA;AAAtC,AACE,GAAA,GAAQ,CAAA,QAAgBsc;AAAO,AAAC/a,0CAAUmG,EAAE4U;;AAA5C;;AACA,OAAC5K,sDAAsBhK,EAAE1H,MAAEC,EAAEoc;;AAEnC,AAAA,AAAA,CAAAE,6CAAA,YAAA;;AAAA,CAAAC,0CAAA,YAEE,WAAc7iB;AAAd,AACE,IAAA8iB,WAAM,AAACtiB,gBAAK,AAACC,6CAAkBT;AAA/B,AAAA,QAAA8iB;KAAA;AACI,MAAA,AAAA1f,gDAAA,8CAAA;;;KADJ;AAEI,MAAA,AAAAA,gDAAA,8CAAA;;;KAFJ;AAGI,OAAC6K,cAAI,8CAAA,9CAAC8U,4CAAiB/iB;;;;AACzB,OAACiO,cAAI,AAACwP,sDAAOoF,4FAAe,AAACpa,kDAAuBzI;;;;AAE1D,AAAA,AAAA,CAAAgjB,0CAAA,YAAA;;AAAA,CAAAC,uCAAA,YAEE,WAAWjjB;AAAX,AACE,IAAAkjB,WAAM,AAAC1iB,gBAAK,AAACC,6CAAkBT;AAA/B,AAAA,QAAAkjB;KAAA;AACI,MAAA,AAAA9f,gDAAA,2CAAA;;;KADJ;AAEI,MAAA,AAAAA,gDAAA,2CAAA;;;KAFJ;AAGI,OAAC6K,cAAI,AAACxF,kDAAuBzI;;;;AAC/B,OAACiO,cAAI,AAACwP,sDAAOwF,yFAAY,AAACxa,kDAAuBzI;;;;AAEvD,AAAA,AAAA,CAAAmjB,yCAAA,YAAA;;AAAA,CAAAvH,mDAAA,YAGI,WAAuB5b,EAAEmI;AAAzB,AACE,GACE,CAAA1E,UAAA,AAAezD;AACb,IAAM8J,KAAG,AAACpG,4CAAI1D,EAAEmI;AAAhB,AACE,GAAI,AAAAI,cAAA,AAAA3C,+CAAQkE;AACVA;;AACA,OAACoY,6CAA6CliB,EAAEmI;;;AALxD,AAMQ,OAAC+Z,6CAA6CliB,EAAEmI;;;;AAE9D,AAAA,AAAA,CAAAib,0CAAA,YAAA;;AAAA,CAAAC,6CAAA,YAEI,WAAiBrjB,EAAE6N,IAAI1F;AAAvB,AACE,GAAI,SAAA,RAAO0F;AACT,OAAC+N,mDAAwB5b,EAAEmI;;AAC3B,OAAmB,AAACmb,0CAA0CtjB,yEAAG6N,IAAI1F;;;AAE7E,AAAA,AAAA,CAAAob,wCAAA,YAAA;;AAAA,CAAA9a,kDAAA,YAEI,WAAsBzI;AAAtB,AACE,IAAMO,OAAK,AAACC,gBAAK,AAACC,6CAAkBT;AAApC,AACE,GACE,SAAA,RAAIO;AAAQ,MAAA,AAAA6C,gDAAA,CAAA,0EAAA,iCAAA,vCAA+B7C;;AAD7C,GAEyC,AAACM,6CAAE4C,MAAS,AAACI,eAAK7D;AAAK,OAACwD,cAAIxD;;AAFrE,GAGE,UAAA,TAAIO;AAAQ,IAAA8d,qBAAA,wDAAAmF;AAAA,AAAA,YAAA1f,kBAAA,KAAA;AAAA,AAAA,IAAA0f,eAAAA;;AAAA,AAAA,IAAApa,qBAAA,AAAA5F,cAAAggB;AAAA,AAAA,GAAApa;AAAA,AAAA,IAAAoa,eAAApa;AAAA,AAAA,GAAA,AAAAC,6BAAAma;AAAA,IAAA9E,kBAowB6B,AAAAnV,sBAAAia;IApwB7B7E,qBAAA,AAAArZ,gBAAAoZ;IAAA+E,WAAA,AAAA5E,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAA+E,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAA/E;AAAA,QAAA,AAAAI,eAAAL,gBAAAgF,nCAAMvb;AAAN,AAAA,AAAA,AAAA6W,uBAAAyE,SAA0C,AAACzgB,qCAAUhD,EAAEmI;;AAAvD,eAAA,CAAAub,WAAA;;;;AAAA;;;;;AAAA,OAAAzE,qBAAA,AAAAC,gBAAAuE,UAAA,AAAAE,8CAAA,AAAAna,qBAAAga;;AAAA,OAAAvE,qBAAA,AAAAC,gBAAAuE,UAAA;;;AAAA,QAAA,AAAA9f,gBAAA6f,pBAAMrb;AAAN,AAAA,OAAAyD,yDAAA,AAAA+X,8CAAA,AAAAvE,eAAAoE,vGAA0C,AAACxgB,qCAAUhD,EAAEmI;;;AAAvD;;;;GAAA,KAAA;;AAAA,AAAA,OAAAkW,mBAAQ,AAACjR,8CAAM,gDAAA,hDAAClF,8CAAmBlI;;AAHjD,AAIQ,mDAAA,WAAA4jB,vDAAC9a;AAAD,AAAM,uDAAA8a,hDAAC9T,8CAAmB9P;GAAK,AAACoN,8CAAM,gDAAA,hDAAClF,8CAAmBlI;;;;;;AAE1E,AAAA,AAAA,CAAA6jB,yCAAA,YAAA;;AAAA,CAAAd,4CAAA,YAEI,WAAgB/iB,EAAEmiB;AAAlB,AACE,IAAMC,aAAW,AAAC5hB,gBAAK2hB;AAAvB,AACE,GACE,gBAAA,fAAIC;AAAc,OAAC3Z,kDAAuBzI;;AAD5C,GAEE,cAAA,bAAGoiB;AAAc,MAAA,AAAAhf,gDAAA,CAAA,8GAAA,rBAAoD+e;;AAFvE,AAGQ,mDAAA,WAAA2B,vDAAChb;AAAD,AAAM,2DAAAgb,pDAAC7B,wCAAajiB,EAAEmiB;GAAa,AAAC/U,8CAAM,AAAClF,8CAAmBlI,EAAEmiB;;;;;AAEhF,AAAA,AAAA,CAAA4B,4CAAA,YAAA;;AAAA,CAAAhb,uDAAA,YAEI,WAA2B/I;AAA3B,AACE,IAAM2L,IAAE,gDAAA,hDAACzD,8CAAmBlI;AAA5B,AACE,IAAAqe,qBAAA,wDAAA2F;AAAA,AAAA,YAAAlgB,kBAAA,KAAA;AAAA,AAAA,IAAAkgB,eAAAA;;AAAA,AAAA,IAAA5a,qBAAA,AAAA5F,cAAAwgB;AAAA,AAAA,GAAA5a;AAAA,AAAA,IAAA4a,eAAA5a;AAAA,AAAA,GAAA,AAAAC,6BAAA2a;AAAA,IAAAtF,kBAovB2C,AAAAnV,sBAAAya;IApvB3CrF,qBAAA,AAAArZ,gBAAAoZ;IAAAuF,WAAA,AAAApF,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAuF,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAvF;AAAA,QAAA,AAAAI,eAAAL,gBAAAwF,nCAAM/b;AAAN,AAAA,AAAA,AAAA6W,uBAAAiF,SACE,AAACrI,mDAAwB5b,EAAEmI;;AAD7B,eAAA,CAAA+b,WAAA;;;;AAAA;;;;;AAAA,OAAAjF,qBAAA,AAAAC,gBAAA+E,UAAA,AAAAE,8CAAA,AAAA3a,qBAAAwa;;AAAA,OAAA/E,qBAAA,AAAAC,gBAAA+E,UAAA;;;AAAA,QAAA,AAAAtgB,gBAAAqgB,pBAAM7b;AAAN,AAAA,OAAAyD,uEAAA,AAAAuY,8CAAA,AAAA/E,eAAA4E,rHACE,AAACpI,mDAAwB5b,EAAEmI;;;AAD7B;;;;GAAA,KAAA;;AAAA,AAAA,OAAAkW,mBAAQ,AAACjR,8CAAMzB;;AAGvB,AAAA,AAAA,CAAAyY,yCAAA,UAAA;;AAAA,CAAAnU,mCAAA,UAEI,WAAOjQ,EAAEqG;AAAT,AACE,MAAA,AAAAjD,gDAAA,sCAAA;;;AAHN,AAAA,CAAAghB,yCAAA,YAAA;;AAAA,CAAAnU,mCAAA,YAAA,WAKWjQ,EAAEqG;AALb,AAMM,MAAA,AAAAjD,gDAAA,0CAAA;;;AANN,AAAA,CAAAghB,yCAAA,YAAA;;AAAA,CAAAnU,mCAAA,YAQI,WAAOjQ,EAAEqG;AAAT,AACE,IAAM9F,OAAK,AAACC,gBAAK,AAACC,6CAAkBT;IAC9B2R,QAAM,AAACnR,gBAAK,AAACC,6CAAkB4F;AADrC,AAEE,GACE,UAAA,TAAI9F;AACF,MAAA,AAAA6C,gDAAA,uCAAA;;AAFJ,GAGE,CAAI7C,SAAKoR;AACP,OAAC1Q,2CAAgBjB,EAAE,AAACkO,+CAAO,AAACzF,kDAAuBzI,GAAG,AAACyI,kDAAuBpC;;AAJlF,GAKE,CAAI9F,SAAK,SAAA,RAAKoR;AACZ,OAAC1Q,2CAAgBjB,EAAE,oGAAA,pGAACkO,+CAAO,AAACzF,kDAAuBzI,sFAAIqG;;AAN3D,AAQI,MAAA,AAAAjD,gDAAA,0CAAA;;;;;;AAEZ,AAAA,AAAA,CAAAihB,8CAAA,UAAA;;AAAA,CAAApV,yCAAA,UAEE,WAAajP,EAAEqG,EAAEwH;AAAjB,AACE,MAAA,AAAAzK,gDAAA,sCAAA;;;AAHJ,AAAA,CAAAihB,8CAAA,YAAA;;AAAA,CAAApV,yCAAA,YAAA,WAKejP,EAAEqG,EAAEwH;AALnB,AAMI,MAAA,AAAAzK,gDAAA,0CAAA;;;AANJ,AAAA,CAAAihB,8CAAA,YAAA;;AAAA,CAAApV,yCAAA,YAQE,WAAajP,EAAEqG,EAAEwH;AAAjB,AACE,OAAC5M,2CAAgBjB,EACf,iBAAM6N,UAAI,AAACrN,gBAAKqN;AAAhB,AACE,GACE,aAAA,ZAAIA;AACF,OAACoC,mCAAQjQ,EAAEqG;;AAFf,AAII,IAAMie,OAAK,WAAA,VAAKzW;AAAhB,AACE,oDAAA,WAAA0W,iBAAAC,zEAAC3T;AAAD,AAAO,gDAAA0T,iBAAAC,1DAACvV,2EAAoBqV;GACvB,AAAC7b,kDAAuBzI,GACxB,AAACyI,kDAAuBpC;;;;;AAE3C,AAAA,AAAA,CAAAoe,yCAAA,UAAA;;AAAA,CAAAC,wCAAA,UAEI,WAAY1kB,EAAE6J,MAAMhI;AAApB,AACE,MAAA,AAAAuB,gDAAA,8BAAA;;;AAHN,AAAA,CAAAqhB,yCAAA,YAAA;;AAAA,CAAAC,wCAAA,YAAA,WAKgB1kB,EAAE6J,MAAMhI;AALxB,AAMM,MAAA,AAAAuB,gDAAA,0CAAA;;;AANN,AAAA,CAAAqhB,yCAAA,YAAA;;AAAA,CAAAC,wCAAA,YAQI,WAAY1kB,EAAE6J,MAAMhI;AAApB,AACE,OAAc,AAACyhB,0CAAatjB,mEAAG6J,MAAMhI;;AAE3C,AAAA,AAAA,CAAA8iB,yCAAA,UAAA;;AAAA,CAAAvV,wCAAA,UAEI,WAAYpP,EAAE4kB;AAAd,AACE,GAAI,AAACphB,cAAIohB;AACP,MAAA,AAAAxhB,gDAAA,sCAAA;;AACApD;;;;AALR,AAAA,CAAA2kB,yCAAA,YAAA;;AAAA,CAAAvV,wCAAA,YAAA,WAOgBpP,EAAE4kB;AAPlB,AAQM,GAAI,AAACphB,cAAIohB;AACP,MAAA,AAAAxhB,gDAAA,kDAAA;;AACApD;;;;AAVR,AAAA,CAAA2kB,yCAAA,YAAA;;AAAA,CAAAvV,wCAAA,YAYI,WAAYpP,EAAE4kB;AAAd,AACE,OAACC,iDAAoB7kB,EAAE4kB;;AAE7B,AAAA,AAAA,CAAAE,yCAAA,UAAA;;AAAA,CAAA5V,wCAAA,UAEI,WAAYlP,EAAE+kB;AAAd,AACE,OAACC,iDAAoBhlB,EAAE+kB;;;AAH7B,AAAA,CAAAD,yCAAA,YAAA;;AAAA,CAAA5V,wCAAA,YAAA,WAWuBlP,EAAE+kB;AAXzB,AAYsB,OAACC,iDAAoBhlB,EAAE+kB;;;AAZ7C,AAAA,CAAAD,yCAAA,YAAA;;AAAA,CAAA5V,wCAAA,YAeI,WAAYlP,EAAE+kB;AAAd,AACE,IAAME,SAAOF;IACPpV,SAAO,AAACxP,wCAAaH;IACrB0R,QAAM,AAACpM,gBAAMqK;IACbuV,QAAM,AAAC5f,gBAAM2f;AAHnB,AAIE,GACE,EAAK,CAAIvT,UAAMwT,YAAO,AAAChZ,mDAAqB+Y,OAAOtV;AAAS3P;;AAD9D,AAKQ,OAACglB,iDAAoBhlB,EAAE+kB;;;;AAEvC,AAAA,AAAA,CAAAI,6CAAA,UAAA;;AAAA,CAAAxJ,6CAAA,UAEI,WAAiB3b,EAAEqG;AAAnB,AACE,OAAC2e,iDAAoB3e,EAAE,AAAClG,wCAAaH;;;AAH3C,AAAA,CAAAmlB,6CAAA,YAAA;;AAAA,CAAAxJ,6CAAA,YAKI,WAAiB3b,EAAEqG;AAAnB,AACE,IAAM+e,KAAG,AAACjlB,wCAAaH;IAAGqlB,KAAG,AAACllB,wCAAakG;AAA3C,AACE,GAAI,AAAC6F,mDAAqBkZ,GAAGC;AAC3Bhf;;AACA,OAAC6I,wCAAa7I,EAAE+e;;;AAE1B,AAAA,AAAA,CAAAE,+CAAA,UAAA;;AAAA,CAAAlb,+CAAA,UAEI,WAAmBpK,EAAEqG;AAArB,AACE,OAACpF,2CAAgBjB,EAAE,AAAC2b,6CAAkB3b,EAAEqG;;;AAH9C,AAAA,CAAAif,+CAAA,YAAA;;AAAA,CAAAlb,+CAAA,YAKI,WAAmBpK,EAAEqG;AAArB,AACE,OAACpF,2CAAgBjB,EAAE,AAAC2b,6CAAkB3b,EAAEqG;;AAE9C,AAAA,AAAA,CAAAkf,oCAAA,UAAA;;AAAA,CAAAC,mCAAA,UAEI,WAAOxlB;AAAP,AAAA;;;AAFJ,AAAA,CAAAulB,oCAAA,YAAA;;AAAA,CAAAC,mCAAA,YAKI,WAAOxlB;AAAP,AACEA;;AAGN,AAAA,AAAA,CAAAylB,0CAAA,UAAA;;AAAA,CAAA7a,wDAAA,UAEI,WAA4B5K;AAA5B,AAAA;;;AAFJ,AAAA,CAAAylB,0CAAA,YAAA;;AAAA,CAAA7a,wDAAA,YAAA,WAKgC5K;AALhC,AAOMA;;;AAPN,AAAA,CAAAylB,0CAAA,YAAA;;AAAA,CAAA7a,wDAAA,YASI,WAA4B5K;AAA5B,AACE,IAAMO,OAAK,AAACC,gBAAK,AAACC,6CAAkBT;AAApC,AACE,GACE,UAAA,TAAIO;AACA,OAACS,qCAAUhB;;AAFjB,GAGE,CAAA,QAAMO;AACJ,GAAI,EAAI,AAACmd,qBAAK1d,QAAG,AAAC0lB,4BAAY1lB;AAC5B,OAAC6Q,6CAAK7P,qCAAUhB;;AAChB,IAAM2L,IAAE,AAACnL,gBAAK,gDAAA,hDAAC0H,8CAAmBlI;AAAlC,AACE,QAAA,JAAOmI;UAAP,NAAWuE;;AAAX,AACE,GAAI,CAAGvE,IAAEwD;AACP,eAAO,KAAA,JAAKxD;eAAG,AAACwd,6CAAKjZ,IAAI,AAAC1J,qCAAUhD,EAAEmI;;;;;AACtCuE;;;;;;AAVZ,GAWE,AAACgZ,4BAAY1lB;AACT,OAAC6Q,6CAAKjG,wDAA6B5K;;AAZzC,GAaE,AAAAuI,cAAA,AAAA3C,+CAAQ5F;AACJ,OAAC6Q,6CAAKjG,wDAA6B,AAACnC,kDAAuBzI;;AAdjE,GAeE,AAAC0d,qBAAK1d;AACF,OAAC6Q,6CAAKjG,wDAA6B5K;;AAhBzC,AAkBM,MAAA,AAAAoD,gDAAA,CAAA,mHAAA,+DAAA,lFAA2D,AAAqBS,eAAM7D,sDAASA;;;;;;;;AAE7G,AAAA,AAAA,CAAA4lB,4CAAA,UAAA;;AAAA,CAAAC,4CAAA,UAEI,WAAgB7lB,EAAE4B;AAAlB,AAAwB,MAAA,AAAAwB,gDAAA,wCAAA;;;AAF5B,CAAA0iB,yCAAA,UAGI,WAAa9lB,EAAE4B;AAAf,AAAqB,MAAA,AAAAwB,gDAAA,wCAAA;;;AAHzB,AAAA,CAAAwiB,4CAAA,YAAA;;AAAA,CAAAC,4CAAA,YAKI,WAAgB7lB,EAAE4B;AAAlB,AACE,GAAI,CAAA,QAAM,AAACpB,gBAAK,AAACC,6CAAkBmB;AACjC,OAACX,2CAAgBjB,EAAE,AAAC6Q,6CAAK5D,iBAAO,AAAClH,0CAAenE;;AAChD,MAAA,AAAAwB,gDAAA,wDAAA;;;;AARR,CAAA0iB,yCAAA,YASI,WAAa9lB,EAAE4B;AAAf,AACE,GAAI,CAAA,QAAM,AAACpB,gBAAK,AAACC,6CAAkBmB;AACjC,OAACX,2CAAgBjB,EAAE,KAAAgd,2BAAA,KAAA,EAAA,IAAA,AAAAA,sCAAA,OAAA,NAAQpb;;AAC3B,MAAA,AAAAwB,gDAAA,qDAAA;;;AAER,AAAA,AAAA,CAAA2iB,0CAAA,UAAA;;AAAA,CAAAC,wCAAA,UAEI,WAAYhmB;AAAZ,AAAA,0FAAA;;;AAFJ,AAAA,CAAA+lB,0CAAA,YAAA;;AAAA,CAAAC,wCAAA,YAAA,WAKgBhmB;AALhB,AAAA,0FAMOA;;;AANP,AAAA,CAAA+lB,0CAAA,YAAA;;AAAA,CAAAC,wCAAA,YAQI,WAAYhmB;AAAZ,AACE,IAAMO,OAAK,AAACC,gBAAK,AAACC,6CAAkBT;AAApC,AACE,GACE,UAAA,TAAIO;AACF,4FAAA,mFAAA,xKAAC2O,wCAAa,AAACoU,0CAAatjB;;AAFhC,GAGE,UAAA,TAAIO;AACFP;;AAJJ,GAKE,AAACuI,cAAI,AAACrD,gDAAelF;AAEnB,OAACimB,wCAAajmB;;AAPlB,AAAA;;;;;;AAYR,AAAA,AAAA,CAAAkmB,4CAAA,UAAA;;AAAA,CAAAD,wCAAA,UAEI,WAAYjmB;AAAZ,AAAA,0FAAA;;;AAFJ,AAAA,CAAAkmB,4CAAA,YAAA;;AAAA,CAAAD,wCAAA,YAAA,WAKgBjmB;AALhB,AAAA,0FAMOA;;;AANP,AAAA,CAAAkmB,4CAAA,YAAA;;AAAA,CAAAD,wCAAA,YAQI,WAAYjmB;AAAZ,AACE,IAAMO,OAAK,AAACC,gBAAK,AAACC,6CAAkBT;AAApC,AACE,GACE,CAAA,QAAMO;AADR,0FAEK,AAACS,qCAAUhB;;AAFhB,oBAGE,AAAC4J,+CAAc5J;AACb,OAACuF,oCAASvF;;AAJd,AAMI,OAACiO,cAAI,AAAClI,0CAAe/F;;;;;AAEjC,AAAA,AAAA,CAAAmmB,yCAAA,UAAA;;AAAA,CAAApU,sCAAA,UAEI,WAAU/R,EAAEgC;AAAZ,AACE,6CAAA,mFAAA,zHAAC+P,sIAAiB/P;;;AAHxB,AAAA,CAAAmkB,yCAAA,YAAA;;AAAA,CAAApU,sCAAA,YAAA,WAKc/R,EAAEgC;AALhB,AAMM,6CAAA,tCAAC+P,yHAAY/R,UAAGgC;;;AANtB,AAAA,CAAAmkB,yCAAA,YAAA;;AAAA,CAAApU,sCAAA,YAQI,WAAU/R,EAAEgC;AAAZ,AACE,GAAI,AAACnB,6CAAE,AAACV,wCAAaH,GAAGgC;AACtBhC;;AACA,IAAMomB,KAAG,AAAC5N,4CAAiBxY;IACrBqmB,KAAG,AAACnY,+CAAO,AAACnI,0CAAe/F,GAAG,AAACqP,+CAAO+W;IACtCE,kBAAgB,4DAAqBD,OAAGrkB;AAAxB,AACE,IAAA/B,qBAAW,AAACuD,cAAIxB;AAAhB,AAAA,GAAA/B;AAAA,QAAAA,JAASsD;AAAT,AACE,IAAMgjB,KAAG,AAAC3iB,eAAKL;IACTijB,OAAK,gEAAA,hEAACpmB,+CAAOC,qBAAIkmB;AADvB,AAEE,mDAAA,WAAAE,vDAAC3d;AAAD,AAAM,yDAAA2d,lDAACH,mEAAkBC;GAAI,AAACG,kDAAUF,KAAKH;;AAC/C,OAAC1iB,gBAAM0iB;;;AAPjC,AAQE,IAAApmB,qBAAe,AAACuD,cAAIxB;AAApB,AAAA,GAAA/B;AAAA,gBAAAA,ZAAS+B;AAAT,AACE,IAAM2kB,KAAG,AAACnmB,gBAAK,AAACmD,gBAAM3B;IAChB4kB,QAAM,AAACN,gBAAgBD,GAAGrkB;AADhC,AAEE,IAAA2G,mBACE,AAACrH,+CAAoBtB,EAAE,AAACoO,6CAAKuY,GAAGC;AADlC,AAAA,oBAAAje;AAAAA;;AAEE,sDAAA,/CAACrH,gFAAuB,AAAC8M,6CAAKuY,GAAGC;;;AACrC,OAACjjB,gBAAM0iB;;;;AAEnB,AAAA,AAAA,CAAAQ,2CAAA,UAAA;;AAAA,CAAAC,2CAAA,UAEI,WAAe9mB,EAAEgC;AAAjB,AACE,+CAAA,xCAACkN,6CAAiBlN;;;AAHxB,AAAA,CAAA6kB,2CAAA,YAAA;;AAAA,CAAAC,2CAAA,YAAA,WAKmB9mB,EAAEgC;AALrB,AAMM,OAACkN,wCAAalP,EAAEgC;;;AANtB,AAAA,CAAA6kB,2CAAA,YAAA;;AAAA,CAAAC,2CAAA,YAQI,WAAe9mB,EAAEgC;AAAjB,AACE,oBAAI,AAACkD,gDAAelF;AAClB,MAAA,AAAAoD,gDAAA,CAAA,SAAA,4TAAA,xNAA8D,CAAC2jB,yEAAAA,4EAAAA,LAAM/mB,wDAAAA;;AACrE,OAAC+R,sCAAW/R,EAAEgC;;;AAEtB,AAAA,AAAA,CAAAglB,wCAAA,UAAA;;AAAA,CAAA/lB,2CAAA,UAEI,WAAejB,EAAEinB;AAAjB,AACEA;;;AAHN,AAAA,CAAAD,wCAAA,YAAA;;AAAA,CAAA/lB,2CAAA,YAAA,WAKmBjB,EAAEinB;AALrB,AAMMA;;;AANN,AAAA,CAAAD,wCAAA,YAAA;;AAAA,CAAA/lB,2CAAA,YAQI,WAAejB,EAAEinB;AAAjB,AAEE,IAAMA,YAAM,EAAI,kBAAWjf,jBAAKif,kCAAO,AAACrc,wDAA6Bqc,OAAOA;AAA5E,AACE,IAAAte,mBAAI,AAACrH,+CAAoBtB,EAAEinB;AAA3B,AAAA,oBAAAte;AAAAA;;AACGse;;;AAEX,AAAA,AAAA,CAAAC,wCAAA,YAAA;;AAAA,CAAAC,0CAAA,YAAA,WAEgBnnB,EAAEonB;AAFlB,AAQQ,GAAI,AAAA7e,cAAA,AAAA3C,+CAAQwhB;AACV,0DAAA,WAAAC,9DAAC9V,0CAAe6V;AAAhB,AAA0B,kBAAAC,XAACC,SAAStnB;;;AACpC,OAACsnB,SAAStnB,EAAEonB;;;;AAVtB,AAAA,CAAAF,wCAAA,YAAA;;AAAA,CAAAC,0CAAA,YAYE,WAAcnnB,EAAEonB;AAAhB,AAMM,GAAI,AAAA7e,cAAA,AAAA3C,+CAAQwhB;AACV,mDAAA,WAAAG,iBAAAC,xEAACjW,0CAAevR;AAAhB,AAAmB,gBAAAunB,iBAAAC,1BAACF;GAAgBF;;AACpC,mDAAA,WAAAK,vDAAClW,0CAAevR;AAAhB,AAAmB,gBAAAynB,TAACH,0BAAWF;;;;AAEzC,AAAA,AAAA,CAAAM,sCAAA,YAAA;;AAAA,CAAAC,qCAAA,YAAA,WAEY3nB;AAFZ,AAEe,QAAGA,IAAEA;;;AAFpB,AAAA,CAAA0nB,sCAAA,YAAA;;AAAA,CAAAC,qCAAA,YAIG,WAAS3nB;AAAT,AAAY,OAAC0G,+CAAoB1G,EAAEA;;AAEtC,AAAA,AAAA,CAAA4nB,wCAAA,YAAA;;AAAA,CAAAC,uCAAA,YAAA,WAEe7nB;AAFf,AAGM,IAAM8nB,MAAI,AAACC,SAAS,GAAW/nB;AAA/B,AACE,QAAA,MAAO,CAAA,MAAO8nB;;;AAJtB,AAAA,CAAAF,wCAAA,YAAA;;AAAA,CAAAC,uCAAA,YAMI,WAAW7nB;AAAX,AACE,OAACuR,0CAAevR,EAAEgoB;;AAExB,AAAA,AAAA,CAAAC,+CAAA,YAAA;;AAAA,CAAAC,6CAAA,YAEI,WAAYloB;AAAZ,AACE,OAACoT,gDAAgBpT,EAAEgoB;;AAEzB,AAAA,AAAA,CAAAG,wCAAA,YAAA;;AAAA,CAAAC,uCAAA,YAAA,WAEepoB;AAFf,AAGM,IAAMqoB,KAAG,AAACN,SAAiB/nB;AAA3B,AACE,OAACsoB,SAAS,CAAA,MAAOD;;;AAJzB,AAAA,CAAAF,wCAAA,YAAA;;AAAA,CAAAC,uCAAA,YAMI,WAAWpoB;AAAX,AACE,OAACuR,0CAAevR,EAAEuoB;;AAExB,AAAA,AAAA,CAAAC,uCAAA,YAAA;;AAAA,CAAAC,sCAAA,YAEI,WAAUzoB;AAAV,AACE,IAAM0oB,KAAG,AAACC,kCAAO3oB;AAAjB,AACE,OAACgT,6CAAkB0V,GAAG,AAACjiB,0CAAeiiB;;AAE9C,AAAA,AAAA,CAAAE,8CAAA,YAAA;;AAAA,CAAAC,4CAAA,YAEI,WAAW7oB;AAAX,AACE,AAAC8oB,wCAAQ9oB;;AACT,AAACkT,mDAAmBlT,EAAE,AAACyG,0CAAezG;;AACtCA;;AAEN,AAAA,AAAA,CAAA+oB,+CAAA,YAAA;;AAAA,CAAAC,6CAAA,YAEI,WAAYhpB;AAAZ,AACE,OAACoT,gDAAgBpT,EAAEuoB;;AAEzB,AAAA,AAAA,CAAAU,oCAAA,YAAA;;AAAA,CAAAC,mCAAA,YAAA,WAEWlpB;AAFX,AAGM,gBAAA,TAACmpB,aAAqBnpB;;;AAH5B,AAAA,CAAAipB,oCAAA,YAAA;;AAAA,CAAAC,mCAAA,YAKI,WAAOlpB;AAAP,AACE,OAACuR,0CAAevR,EAAEopB;;AAExB,AAAA,AAAA,CAAAC,2CAAA,YAAA;;AAAA,CAAAC,yCAAA,YAEI,WAAQtpB;AAAR,AACE,OAACoT,gDAAgBpT,EAAEopB;;AAsDzB,AAAA,AAAA,CAAAG,8CAAA,YAAA;;AAAA,CAAAC,kCAAA,YAAA,WAAAxpB;AAAA,AAAA,OAAAwG,SAAAxG;;;AAAA,CAAAypB,mCAAA,YAAA,WAAAzpB;AAAA,AAAA,OAAA0pB,UAAA1pB;;;AAAA,CAAA2pB,mCAAA,YAAA,WAAA3pB;AAAA,AAAA,OAAA4pB,UAAA5pB;;;AAAA,CAAA6pB,mCAAA,YAAA,WAAA7pB;AAAA,AAAA,OAAA8pB,UAAA9pB;;;AAAA,CAAA+pB,mCAAA,YAAA,WAAA/pB;AAAA,AAAA,OAAAgqB,UAAAhqB;;;AAAA,CAAAiqB,mCAAA,YAAA,WAAAjqB;AAAA,AAAA,OAAAkqB,UAAAlqB;;;AAAA,CAAAmqB,kCAAA,YAAA,WAAAnqB;AAAA,AAAA,OAAAoqB,SAAApqB;;;AAAA,CAAAqqB,mCAAA,YAAA,WAAArqB;AAAA,AAAA,OAAAsqB,UAAAtqB;;;AAAA,CAAA2oB,kCAAA,YAAA,WAAA3oB;AAAA,AAAA,OAAA+nB,SAAA/nB;;;AAAA,CAAAuqB,oCAAA,YAAA,WAAAvqB;AAAA,AAAA,OAAAwqB,WAAAxqB;;;AAAA,CAAAyqB,kCAAA,YAAA,WAAAzqB;AAAA,AAAA,OAAAsoB,SAAAtoB;;;AAAA,CAAA0qB,oCAAA,YAAA,WAAA1qB;AAAA,AAAA,OAAA2qB,WAAA3qB;;;AAAA,CAAA4qB,oCAAA,YAAA,WAAA5qB;AAAA,AAAA,OAAA6qB,UAAA7qB;;;AAAA,CAAAwU,qCAAA,YAAA,WAAAxU;AAAA,AAAA,OAAA8qB,UAAA9qB;;;AAAA,CAAA+qB,kCAAA,YAAA,WAAA/qB;AAAA,AAAA,OAAAgrB,SAAAhrB;;;AAAA,CAAAirB,mCAAA,YAAA,WAAAjrB;AAAA,AAAA,OAAAkrB,UAAAlrB;;;AAAA,CAAAmrB,mCAAA,YAAA,WAAAnrB;AAAA,AAAA,OAAA2G,UAAA3G;;;AAAA,CAAAorB,kCAAA,YAAA,WAAAprB;AAAA,AAAA,OAAAqrB,SAAArrB;;;AAAA,CAAAsrB,mCAAA,YAAA,WAAAtrB;AAAA,AAAA,OAAAurB,UAAAvrB;;;AAAA,CAAAwrB,yCAAA,YAAA,WAAAxrB;AAAA,AAAA,OAAAyrB,mDAAAzrB;;;AAAA,CAAA0rB,yCAAA,YAAA,WAAA1rB;AAAA,AAAA,OAAA2rB,mDAAA3rB;;;AAAA,AAAA,CAAAupB,8CAAA,YAAA;;AAAA,CAAAC,kCAAA,YAAA,WAAAxpB;AAAA,AAAA,OAAAuR,0CAAAvR,EAAA,WAAA4rB;AAAA,AAAA,OAAAplB,SAAAolB;;;;AAAA,CAAAnC,mCAAA,YAAA,WAAAzpB;AAAA,AAAA,OAAAuR,0CAAAvR,EAAA,WAAA4rB;AAAA,AAAA,OAAAlC,UAAAkC;;;;AAAA,CAAAjC,mCAAA,YAAA,WAAA3pB;AAAA,AAAA,OAAAuR,0CAAAvR,EAAA,WAAA4rB;AAAA,AAAA,OAAAhC,UAAAgC;;;;AAAA,CAAA/B,mCAAA,YAAA,WAAA7pB;AAAA,AAAA,OAAAuR,0CAAAvR,EAAA,WAAA4rB;AAAA,AAAA,OAAA9B,UAAA8B;;;;AAAA,CAAA7B,mCAAA,YAAA,WAAA/pB;AAAA,AAAA,OAAAuR,0CAAAvR,EAAA,WAAA4rB;AAAA,AAAA,OAAA5B,UAAA4B;;;;AAAA,CAAA3B,mCAAA,YAAA,WAAAjqB;AAAA,AAAA,OAAAuR,0CAAAvR,EAAA,WAAA4rB;AAAA,AAAA,OAAA1B,UAAA0B;;;;AAAA,CAAAzB,kCAAA,YAAA,WAAAnqB;AAAA,AAAA,OAAAuR,0CAAAvR,EAAA,WAAA4rB;AAAA,AAAA,OAAAxB,SAAAwB;;;;AAAA,CAAAvB,mCAAA,YAAA,WAAArqB;AAAA,AAAA,OAAAuR,0CAAAvR,EAAA,WAAA4rB;AAAA,AAAA,OAAAtB,UAAAsB;;;;AAAA,CAAAjD,kCAAA,YAAA,WAAA3oB;AAAA,AAAA,OAAAuR,0CAAAvR,EAAA,WAAA4rB;AAAA,AAAA,OAAA7D,SAAA6D;;;;AAAA,CAAArB,oCAAA,YAAA,WAAAvqB;AAAA,AAAA,OAAAuR,0CAAAvR,EAAA,WAAA4rB;AAAA,AAAA,OAAApB,WAAAoB;;;;AAAA,CAAAnB,kCAAA,YAAA,WAAAzqB;AAAA,AAAA,OAAAuR,0CAAAvR,EAAA,WAAA4rB;AAAA,AAAA,OAAAtD,SAAAsD;;;;AAAA,CAAAlB,oCAAA,YAAA,WAAA1qB;AAAA,AAAA,OAAAuR,0CAAAvR,EAAA,WAAA4rB;AAAA,AAAA,OAAAjB,WAAAiB;;;;AAAA,CAAAhB,oCAAA,YAAA,WAAA5qB;AAAA,AAAA,OAAAuR,0CAAAvR,EAAA,WAAA4rB;AAAA,AAAA,OAAAf,UAAAe;;;;AAAA,CAAApX,qCAAA,YAAA,WAAAxU;AAAA,AAAA,OAAAuR,0CAAAvR,EAAA,WAAA4rB;AAAA,AAAA,OAAAd,UAAAc;;;;AAAA,CAAAb,kCAAA,YAAA,WAAA/qB;AAAA,AAAA,OAAAuR,0CAAAvR,EAAA,WAAA4rB;AAAA,AAAA,OAAAZ,SAAAY;;;;AAAA,CAAAX,mCAAA,YAAA,WAAAjrB;AAAA,AAAA,OAAAuR,0CAAAvR,EAAA,WAAA4rB;AAAA,AAAA,OAAAV,UAAAU;;;;AAAA,CAAAT,mCAAA,YAAA,WAAAnrB;AAAA,AAAA,OAAAuR,0CAAAvR,EAAA,WAAA4rB;AAAA,AAAA,OAAAjlB,UAAAilB;;;;AAAA,CAAAR,kCAAA,YAAA,WAAAprB;AAAA,AAAA,OAAAuR,0CAAAvR,EAAA,WAAA4rB;AAAA,AAAA,OAAAP,SAAAO;;;;AAAA,CAAAN,mCAAA,YAAA,WAAAtrB;AAAA,AAAA,OAAAuR,0CAAAvR,EAAA,WAAA4rB;AAAA,AAAA,OAAAL,UAAAK;;;;AAAA,CAAAJ,yCAAA,YAAA,WAAAxrB;AAAA,AAAA,OAAAuR,0CAAAvR,EAAA,WAAA4rB;AAAA,AAAA,OAAAH,mDAAAG;;;;AAAA,CAAAF,yCAAA,YAAA,WAAA1rB;AAAA,AAAA,OAAAuR,0CAAAvR,EAAA,WAAA4rB;AAAA,AAAA,OAAAD,mDAAAC;;;;AAAA,AAAA,CAAArC,8CAAA,WAAA;;AAAA,CAAAC,kCAAA,WAAA,WAAAxpB;AAAA,AAAA,OAAAuR,0CAAAvR,EAAA,WAAA6rB;AAAA,AAAA,OAAArlB,SAAAqlB;;;;AAAA,CAAApC,mCAAA,WAAA,WAAAzpB;AAAA,AAAA,OAAAuR,0CAAAvR,EAAA,WAAA6rB;AAAA,AAAA,OAAAnC,UAAAmC;;;;AAAA,CAAAlC,mCAAA,WAAA,WAAA3pB;AAAA,AAAA,OAAAuR,0CAAAvR,EAAA,WAAA6rB;AAAA,AAAA,OAAAjC,UAAAiC;;;;AAAA,CAAAhC,mCAAA,WAAA,WAAA7pB;AAAA,AAAA,OAAAuR,0CAAAvR,EAAA,WAAA6rB;AAAA,AAAA,OAAA/B,UAAA+B;;;;AAAA,CAAA9B,mCAAA,WAAA,WAAA/pB;AAAA,AAAA,OAAAuR,0CAAAvR,EAAA,WAAA6rB;AAAA,AAAA,OAAA7B,UAAA6B;;;;AAAA,CAAA5B,mCAAA,WAAA,WAAAjqB;AAAA,AAAA,OAAAuR,0CAAAvR,EAAA,WAAA6rB;AAAA,AAAA,OAAA3B,UAAA2B;;;;AAAA,CAAA1B,kCAAA,WAAA,WAAAnqB;AAAA,AAAA,OAAAuR,0CAAAvR,EAAA,WAAA6rB;AAAA,AAAA,OAAAzB,SAAAyB;;;;AAAA,CAAAxB,mCAAA,WAAA,WAAArqB;AAAA,AAAA,OAAAuR,0CAAAvR,EAAA,WAAA6rB;AAAA,AAAA,OAAAvB,UAAAuB;;;;AAAA,CAAAlD,kCAAA,WAAA,WAAA3oB;AAAA,AAAA,OAAAuR,0CAAAvR,EAAA,WAAA6rB;AAAA,AAAA,OAAA9D,SAAA8D;;;;AAAA,CAAAtB,oCAAA,WAAA,WAAAvqB;AAAA,AAAA,OAAAuR,0CAAAvR,EAAA,WAAA6rB;AAAA,AAAA,OAAArB,WAAAqB;;;;AAAA,CAAApB,kCAAA,WAAA,WAAAzqB;AAAA,AAAA,OAAAuR,0CAAAvR,EAAA,WAAA6rB;AAAA,AAAA,OAAAvD,SAAAuD;;;;AAAA,CAAAnB,oCAAA,WAAA,WAAA1qB;AAAA,AAAA,OAAAuR,0CAAAvR,EAAA,WAAA6rB;AAAA,AAAA,OAAAlB,WAAAkB;;;;AAAA,CAAAjB,oCAAA,WAAA,WAAA5qB;AAAA,AAAA,OAAAuR,0CAAAvR,EAAA,WAAA6rB;AAAA,AAAA,OAAAhB,UAAAgB;;;;AAAA,CAAArX,qCAAA,WAAA,WAAAxU;AAAA,AAAA,OAAAuR,0CAAAvR,EAAA,WAAA6rB;AAAA,AAAA,OAAAf,UAAAe;;;;AAAA,CAAAd,kCAAA,WAAA,WAAA/qB;AAAA,AAAA,OAAAuR,0CAAAvR,EAAA,WAAA6rB;AAAA,AAAA,OAAAb,SAAAa;;;;AAAA,CAAAZ,mCAAA,WAAA,WAAAjrB;AAAA,AAAA,OAAAuR,0CAAAvR,EAAA,WAAA6rB;AAAA,AAAA,OAAAX,UAAAW;;;;AAAA,CAAAV,mCAAA,WAAA,WAAAnrB;AAAA,AAAA,OAAAuR,0CAAAvR,EAAA,WAAA6rB;AAAA,AAAA,OAAAllB,UAAAklB;;;;AAAA,CAAAT,kCAAA,WAAA,WAAAprB;AAAA,AAAA,OAAAuR,0CAAAvR,EAAA,WAAA6rB;AAAA,AAAA,OAAAR,SAAAQ;;;;AAAA,CAAAP,mCAAA,WAAA,WAAAtrB;AAAA,AAAA,OAAAuR,0CAAAvR,EAAA,WAAA6rB;AAAA,AAAA,OAAAN,UAAAM;;;;AAAA,CAAAL,yCAAA,WAAA,WAAAxrB;AAAA,AAAA,OAAAuR,0CAAAvR,EAAA,WAAA6rB;AAAA,AAAA,OAAAJ,mDAAAI;;;;AAAA,CAAAH,yCAAA,WAAA,WAAA1rB;AAAA,AAAA,OAAAuR,0CAAAvR,EAAA,WAAA6rB;AAAA,AAAA,OAAAF,mDAAAE;;;AACA,AAAA,AAAA,CAAAC,qDAAA,YAAA;;AAAA,CAAAC,wCAAA,YAAA,WAAA/rB;AAAA,AAAA,MAAA,AAAAoD,gDAAA,yBAAA;;;AAAA,CAAA4oB,yCAAA,YAAA,WAAAhsB;AAAA,AAAA,MAAA,AAAAoD,gDAAA,yBAAA;;;AAAA,CAAA6oB,yCAAA,YAAA,WAAAjsB;AAAA,AAAA,MAAA,AAAAoD,gDAAA,yBAAA;;;AAAA,CAAA8oB,yCAAA,YAAA,WAAAlsB;AAAA,AAAA,MAAA,AAAAoD,gDAAA,yBAAA;;;AAAA,CAAA+oB,yCAAA,YAAA,WAAAnsB;AAAA,AAAA,MAAA,AAAAoD,gDAAA,yBAAA;;;AAAA,CAAAgpB,yCAAA,YAAA,WAAApsB;AAAA,AAAA,MAAA,AAAAoD,gDAAA,yBAAA;;;AAAA,CAAAipB,wCAAA,YAAA,WAAArsB;AAAA,AAAA,MAAA,AAAAoD,gDAAA,yBAAA;;;AAAA,CAAAkpB,yCAAA,YAAA,WAAAtsB;AAAA,AAAA,MAAA,AAAAoD,gDAAA,yBAAA;;;AAAA,CAAA0lB,wCAAA,YAAA,WAAA9oB;AAAA,AAAA,MAAA,AAAAoD,gDAAA,yBAAA;;;AAAA,CAAAmpB,0CAAA,YAAA,WAAAvsB;AAAA,AAAA,MAAA,AAAAoD,gDAAA,yBAAA;;;AAAA,CAAAopB,wCAAA,YAAA,WAAAxsB;AAAA,AAAA,MAAA,AAAAoD,gDAAA,yBAAA;;;AAAA,CAAAqpB,0CAAA,YAAA,WAAAzsB;AAAA,AAAA,MAAA,AAAAoD,gDAAA,yBAAA;;;AAAA,CAAAspB,0CAAA,YAAA,WAAA1sB;AAAA,AAAA,MAAA,AAAAoD,gDAAA,yBAAA;;;AAAA,CAAAupB,2CAAA,YAAA,WAAA3sB;AAAA,AAAA,MAAA,AAAAoD,gDAAA,yBAAA;;;AAAA,CAAAwpB,wCAAA,YAAA,WAAA5sB;AAAA,AAAA,MAAA,AAAAoD,gDAAA,yBAAA;;;AAAA,CAAAypB,yCAAA,YAAA,WAAA7sB;AAAA,AAAA,MAAA,AAAAoD,gDAAA,yBAAA;;;AAAA,CAAA0pB,yCAAA,YAAA,WAAA9sB;AAAA,AAAA,MAAA,AAAAoD,gDAAA,yBAAA;;;AAAA,CAAA2pB,wCAAA,YAAA,WAAA/sB;AAAA,AAAA,MAAA,AAAAoD,gDAAA,yBAAA;;;AAAA,CAAA4pB,yCAAA,YAAA,WAAAhtB;AAAA,AAAA,MAAA,AAAAoD,gDAAA,yBAAA;;;AAAA,CAAA6pB,+CAAA,YAAA,WAAAjtB;AAAA,AAAA,MAAA,AAAAoD,gDAAA,yBAAA;;;AAAA,CAAA8pB,+CAAA,YAAA,WAAAltB;AAAA,AAAA,MAAA,AAAAoD,gDAAA,yBAAA;;;AAAA,AAAA,CAAA0oB,qDAAA,YAAA;;AAAA,CAAAC,wCAAA,YAAA,WAAA/rB;AAAA,AAAA,OAAAoT,gDAAApT,EAAA,WAAAmtB;AAAA,AAAA,OAAA3mB,SAAA2mB;;;;AAAA,CAAAnB,yCAAA,YAAA,WAAAhsB;AAAA,AAAA,OAAAoT,gDAAApT,EAAA,WAAAmtB;AAAA,AAAA,OAAAzD,UAAAyD;;;;AAAA,CAAAlB,yCAAA,YAAA,WAAAjsB;AAAA,AAAA,OAAAoT,gDAAApT,EAAA,WAAAmtB;AAAA,AAAA,OAAAvD,UAAAuD;;;;AAAA,CAAAjB,yCAAA,YAAA,WAAAlsB;AAAA,AAAA,OAAAoT,gDAAApT,EAAA,WAAAmtB;AAAA,AAAA,OAAArD,UAAAqD;;;;AAAA,CAAAhB,yCAAA,YAAA,WAAAnsB;AAAA,AAAA,OAAAoT,gDAAApT,EAAA,WAAAmtB;AAAA,AAAA,OAAAnD,UAAAmD;;;;AAAA,CAAAf,yCAAA,YAAA,WAAApsB;AAAA,AAAA,OAAAoT,gDAAApT,EAAA,WAAAmtB;AAAA,AAAA,OAAAjD,UAAAiD;;;;AAAA,CAAAd,wCAAA,YAAA,WAAArsB;AAAA,AAAA,OAAAoT,gDAAApT,EAAA,WAAAmtB;AAAA,AAAA,OAAA/C,SAAA+C;;;;AAAA,CAAAb,yCAAA,YAAA,WAAAtsB;AAAA,AAAA,OAAAoT,gDAAApT,EAAA,WAAAmtB;AAAA,AAAA,OAAA7C,UAAA6C;;;;AAAA,CAAArE,wCAAA,YAAA,WAAA9oB;AAAA,AAAA,OAAAoT,gDAAApT,EAAA,WAAAmtB;AAAA,AAAA,OAAApF,SAAAoF;;;;AAAA,CAAAZ,0CAAA,YAAA,WAAAvsB;AAAA,AAAA,OAAAoT,gDAAApT,EAAA,WAAAmtB;AAAA,AAAA,OAAA3C,WAAA2C;;;;AAAA,CAAAX,wCAAA,YAAA,WAAAxsB;AAAA,AAAA,OAAAoT,gDAAApT,EAAA,WAAAmtB;AAAA,AAAA,OAAA7E,SAAA6E;;;;AAAA,CAAAV,0CAAA,YAAA,WAAAzsB;AAAA,AAAA,OAAAoT,gDAAApT,EAAA,WAAAmtB;AAAA,AAAA,OAAAxC,WAAAwC;;;;AAAA,CAAAT,0CAAA,YAAA,WAAA1sB;AAAA,AAAA,OAAAoT,gDAAApT,EAAA,WAAAmtB;AAAA,AAAA,OAAAtC,UAAAsC;;;;AAAA,CAAAR,2CAAA,YAAA,WAAA3sB;AAAA,AAAA,OAAAoT,gDAAApT,EAAA,WAAAmtB;AAAA,AAAA,OAAArC,UAAAqC;;;;AAAA,CAAAP,wCAAA,YAAA,WAAA5sB;AAAA,AAAA,OAAAoT,gDAAApT,EAAA,WAAAmtB;AAAA,AAAA,OAAAnC,SAAAmC;;;;AAAA,CAAAN,yCAAA,YAAA,WAAA7sB;AAAA,AAAA,OAAAoT,gDAAApT,EAAA,WAAAmtB;AAAA,AAAA,OAAAjC,UAAAiC;;;;AAAA,CAAAL,yCAAA,YAAA,WAAA9sB;AAAA,AAAA,OAAAoT,gDAAApT,EAAA,WAAAmtB;AAAA,AAAA,OAAAxmB,UAAAwmB;;;;AAAA,CAAAJ,wCAAA,YAAA,WAAA/sB;AAAA,AAAA,OAAAoT,gDAAApT,EAAA,WAAAmtB;AAAA,AAAA,OAAA9B,SAAA8B;;;;AAAA,CAAAH,yCAAA,YAAA,WAAAhtB;AAAA,AAAA,OAAAoT,gDAAApT,EAAA,WAAAmtB;AAAA,AAAA,OAAA5B,UAAA4B;;;;AAAA,CAAAF,+CAAA,YAAA,WAAAjtB;AAAA,AAAA,OAAAoT,gDAAApT,EAAA,WAAAmtB;AAAA,AAAA,OAAA1B,mDAAA0B;;;;AAAA,CAAAD,+CAAA,YAAA,WAAAltB;AAAA,AAAA,OAAAoT,gDAAApT,EAAA,WAAAmtB;AAAA,AAAA,OAAAxB,mDAAAwB;;;;AAAA,AAAA,CAAArB,qDAAA,WAAA;;AAAA,CAAAC,wCAAA,WAAA,WAAA/rB;AAAA,AAAA,OAAAoT,gDAAApT,EAAA,WAAAotB;AAAA,AAAA,OAAA5mB,SAAA4mB;;;;AAAA,CAAApB,yCAAA,WAAA,WAAAhsB;AAAA,AAAA,OAAAoT,gDAAApT,EAAA,WAAAotB;AAAA,AAAA,OAAA1D,UAAA0D;;;;AAAA,CAAAnB,yCAAA,WAAA,WAAAjsB;AAAA,AAAA,OAAAoT,gDAAApT,EAAA,WAAAotB;AAAA,AAAA,OAAAxD,UAAAwD;;;;AAAA,CAAAlB,yCAAA,WAAA,WAAAlsB;AAAA,AAAA,OAAAoT,gDAAApT,EAAA,WAAAotB;AAAA,AAAA,OAAAtD,UAAAsD;;;;AAAA,CAAAjB,yCAAA,WAAA,WAAAnsB;AAAA,AAAA,OAAAoT,gDAAApT,EAAA,WAAAotB;AAAA,AAAA,OAAApD,UAAAoD;;;;AAAA,CAAAhB,yCAAA,WAAA,WAAApsB;AAAA,AAAA,OAAAoT,gDAAApT,EAAA,WAAAotB;AAAA,AAAA,OAAAlD,UAAAkD;;;;AAAA,CAAAf,wCAAA,WAAA,WAAArsB;AAAA,AAAA,OAAAoT,gDAAApT,EAAA,WAAAotB;AAAA,AAAA,OAAAhD,SAAAgD;;;;AAAA,CAAAd,yCAAA,WAAA,WAAAtsB;AAAA,AAAA,OAAAoT,gDAAApT,EAAA,WAAAotB;AAAA,AAAA,OAAA9C,UAAA8C;;;;AAAA,CAAAtE,wCAAA,WAAA,WAAA9oB;AAAA,AAAA,OAAAoT,gDAAApT,EAAA,WAAAotB;AAAA,AAAA,OAAArF,SAAAqF;;;;AAAA,CAAAb,0CAAA,WAAA,WAAAvsB;AAAA,AAAA,OAAAoT,gDAAApT,EAAA,WAAAotB;AAAA,AAAA,OAAA5C,WAAA4C;;;;AAAA,CAAAZ,wCAAA,WAAA,WAAAxsB;AAAA,AAAA,OAAAoT,gDAAApT,EAAA,WAAAotB;AAAA,AAAA,OAAA9E,SAAA8E;;;;AAAA,CAAAX,0CAAA,WAAA,WAAAzsB;AAAA,AAAA,OAAAoT,gDAAApT,EAAA,WAAAotB;AAAA,AAAA,OAAAzC,WAAAyC;;;;AAAA,CAAAV,0CAAA,WAAA,WAAA1sB;AAAA,AAAA,OAAAoT,gDAAApT,EAAA,WAAAotB;AAAA,AAAA,OAAAvC,UAAAuC;;;;AAAA,CAAAT,2CAAA,WAAA,WAAA3sB;AAAA,AAAA,OAAAoT,gDAAApT,EAAA,WAAAotB;AAAA,AAAA,OAAAtC,UAAAsC;;;;AAAA,CAAAR,wCAAA,WAAA,WAAA5sB;AAAA,AAAA,OAAAoT,gDAAApT,EAAA,WAAAotB;AAAA,AAAA,OAAApC,SAAAoC;;;;AAAA,CAAAP,yCAAA,WAAA,WAAA7sB;AAAA,AAAA,OAAAoT,gDAAApT,EAAA,WAAAotB;AAAA,AAAA,OAAAlC,UAAAkC;;;;AAAA,CAAAN,yCAAA,WAAA,WAAA9sB;AAAA,AAAA,OAAAoT,gDAAApT,EAAA,WAAAotB;AAAA,AAAA,OAAAzmB,UAAAymB;;;;AAAA,CAAAL,wCAAA,WAAA,WAAA/sB;AAAA,AAAA,OAAAoT,gDAAApT,EAAA,WAAAotB;AAAA,AAAA,OAAA/B,SAAA+B;;;;AAAA,CAAAJ,yCAAA,WAAA,WAAAhtB;AAAA,AAAA,OAAAoT,gDAAApT,EAAA,WAAAotB;AAAA,AAAA,OAAA7B,UAAA6B;;;;AAAA,CAAAH,+CAAA,WAAA,WAAAjtB;AAAA,AAAA,OAAAoT,gDAAApT,EAAA,WAAAotB;AAAA,AAAA,OAAA3B,mDAAA2B;;;;AAAA,CAAAF,+CAAA,WAAA,WAAAltB;AAAA,AAAA,OAAAoT,gDAAApT,EAAA,WAAAotB;AAAA,AAAA,OAAAzB,mDAAAyB;;;AAEA,AAAA,AAAA,CAAAC,mDAAA,YAAA;;AAAA,CAAAC,4CAAA,YAEI,WAAgBttB;AAAhB,AACE,IAAME,KAAG,AAACC,wCAAaH;IACjButB,OAAK,AAACjoB,gBAAMpF;IACZK,OAAK,AAACiL,8CAAMgiB,cAAIttB;IAChButB,YAAU,iBAAApP,qBAAA,wDAAAqP;AAAA,AAAA,YAAA5pB,kBAAA,KAAA;AAAA,AAAA,IAAA4pB,eAAAA;;AAAA,AAAA,IAAAtkB,qBAAA,AAAA5F,cAAAkqB;AAAA,AAAA,GAAAtkB;AAAA,AAAA,IAAAskB,eAAAtkB;AAAA,AAAA,GAAA,AAAAC,6BAAAqkB;AAAA,IAAAhP,kBA6V6B,AAAAnV,sBAAAmkB;IA7V7B/O,qBAAA,AAAArZ,gBAAAoZ;IAAAiP,WAAA,AAAA9O,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAiP,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAjP;AAAA,QAAA,AAAAI,eAAAL,gBAAAkP,nCAAMzlB;AAAN,AAAA,AAAA,AAAA6W,uBAAA2O,SAAsB,AAACzqB,qCAAUlD,EAAE,AAACqP,+CAAOke,KAAKplB;;AAAhD,eAAA,CAAAylB,WAAA;;;;AAAA;;;;;AAAA,OAAA3O,qBAAA,AAAAC,gBAAAyO,UAAA,AAAAE,8CAAA,AAAArkB,qBAAAkkB;;AAAA,OAAAzO,qBAAA,AAAAC,gBAAAyO,UAAA;;;AAAA,QAAA,AAAAhqB,gBAAA+pB,pBAAMvlB;AAAN,AAAA,OAAAyD,8GAAA,AAAAiiB,8CAAA,AAAAzO,eAAAsO,5JAAsB,AAACxqB,qCAAUlD,EAAE,AAACqP,+CAAOke,KAAKplB;;;AAAhD;;;;GAAA,KAAA;;AAAA,AAAA,OAAAkW,mBAAQ,AAACjR,8CAAM7M;;AAH/B,AAIE,OAACutB,8CAAc9tB,EAAEytB;;AAEzB,AAAA,AAAA,CAAAM,uDAAA,YAAA;;AAAA,CAAAC,8CAAA,YAEI,WAAkBhuB,EAAEO;AAApB,AACE,OAAC0tB,8CAAmBjuB,EAAE,oDAAA,pDAACqP,+CAAO9O;;;AAHpC,CAAA0tB,8CAAA,YAII,WAAkBjuB,EAAEkuB;AAApB,AACE,IAAM3tB,OAAK,AAAC+E,gBAAM4oB;IACZA,sBAAgB,AAACtjB,wDAA6BsjB;IAC9CC,KAAG,AAAClgB,cAAI,oDAAA,pDAACoB,+CAAO9O;IAChB6tB,KAAG,AAACngB,cAAI,iBAAAoQ,qBAAA,wDAAAgQ;AAAA,AAAA,YAAAvqB,kBAAA,KAAA;AAAA,AAAA,IAAAuqB,eAAAA;;AAAA,AAAA,IAAAjlB,qBAAA,AAAA5F,cAAA6qB;AAAA,AAAA,GAAAjlB;AAAA,AAAA,IAAAilB,eAAAjlB;AAAA,AAAA,GAAA,AAAAC,6BAAAglB;AAAA,IAAA3P,kBAkV+B,AAAAnV,sBAAA8kB;IAlV/B1P,qBAAA,AAAArZ,gBAAAoZ;IAAA4P,WAAA,AAAAzP,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAA4P,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAA5P;AAAA,QAAA,AAAAI,eAAAL,gBAAA6P,nCAAMpmB;AAAN,AAAA,AAAA,AAAA6W,uBAAAsP,SACH,AAACnf,8CAAMgf,GAAGhmB,EAAE,AAACzE,4CAAIwqB,oBAAgB/lB;;AAD9B,eAAA,CAAAomB,WAAA;;;;AAAA;;;;;AAAA,OAAAtP,qBAAA,AAAAC,gBAAAoP,UAAA,AAAAE,8CAAA,AAAAhlB,qBAAA6kB;;AAAA,OAAApP,qBAAA,AAAAC,gBAAAoP,UAAA;;;AAAA,QAAA,AAAA3qB,gBAAA0qB,pBAAMlmB;AAAN,AAAA,OAAAyD,sIAAA,AAAA4iB,8CAAA,AAAApP,eAAAiP,pLACH,AAAClf,8CAAMgf,GAAGhmB,EAAE,AAACzE,4CAAIwqB,oBAAgB/lB;;;AAD9B;;;;GAAA,KAAA;;AAAA,AAAA,OAAAkW,mBAAQ,AAACjR,8CAAM7M;;AAH7B,AAKE,OAACU,2CAAgBjB,EAAEouB;;AAE3B,AAAA,AAAA,CAAAK,iDAAA,YAAA;;AAAA,CAAAC,iDAAA,YAEI,WAAqB1uB,EAAE2uB;AAAvB,AACE,IAAMvpB,IAAE,AAACwF,wDAA6B+jB;IAChChjB,IAAE,AAACrG,gBAAMF;IACTwB,IAAE,AAACpF,yCAAcxB,EAAE2L,EAAEA;IACrB/E,QAAE,kBAAI,AAAC1B,gDAAe0B,IAAGA,EAAE,AAACtG,2DAAyBsG;AAH3D,AAIE,IAAAyB,wBAAYsD;AAAZ,AAAA,cAAA,VAAUxD;;AAAV,AAAA,GAAA,WAAAE,VAAUF;AAAV,AACE,6JAAA,7JAAC1C,2CAAWmB,MAAEuB,QAAE,CAAC/C,kCAAAA,2CAAAA,XAAE+C,uBAAAA;;AADrB,eAAA,WAAA,VAAUA;;;;AAAV;;;;AAEAvB;;AAGR,AAAA,AAAA,CAAAgoB,mDAAA,YAAA;;AAAA,CAAAC,oDAAA,YAEI,WAAwB7uB,EAAE8uB;AAA1B,AACE,IAAMC,MAAI,gDAAShkB,IAAI+jB;AAAb,AACE,GAAI,AAAC1Q,uBAAO0Q;AACR/jB;;AACA,IAAMikB,UAAQ,AAACxuB,gBAAK,kDAAA,lDAAC0H,8CAAmB6C;IAClCkkB,YAAU,qFAAA,4BAAA,hHAACH,2CAAAA,gDAAAA;IACXI,gBAAc,AAAC1uB,gBAAK,wDAAA,xDAAC0H,8CAAmB+mB;IACxCE,UAAQ,CAAGH,UAAQE;IACnBd,KAAG,AAACngB,cAAI,iBAAAoQ,qBAAA,8DAAA+Q;AAAA,AAAA,YAAAtrB,kBAAA,KAAA;AAAA,AAAA,IAAAsrB,eAAAA;;AAAA,AAAA,IAAAhmB,qBAAA,AAAA5F,cAAA4rB;AAAA,AAAA,GAAAhmB;AAAA,AAAA,IAAAgmB,eAAAhmB;AAAA,AAAA,GAAA,AAAAC,6BAAA+lB;AAAA,IAAA1Q,kBAwTe,AAAAnV,sBAAA6lB;IAxTfzQ,qBAAA,AAAArZ,gBAAAoZ;IAAA2Q,WAAA,AAAAxQ,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAA2Q,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAA3Q;AAAA,QAAA,AAAAI,eAAAL,gBAAA4Q,nCAAMnnB;AAAN,AAAA,AAAA,AAAA6W,uBAAAqQ,SACK,EAAI,CAAGlnB,IAAE6mB,UACL,6CAAA,7CAACQ,8EAAQ,AAACthB,+CAAO,CAACnD,oCAAAA,uCAAAA,LAAI5C,mBAAAA,IACL,yCAAA,zCAAC5G,0EAAiB2tB,iBACnC,6CAAA,7CAACM,8EAAQ,AAACthB,+CAAO,yCAAA,zCAAC3M,0EAAiBytB,SAClB,iBAAAS,WAAW,CAAGtnB,IAAE6mB;AAAhB,AAAA,0FAAAS,gCAAAA,lHAACR,0CAAAA,oDAAAA;;;AAL3B,eAAA,CAAAK,WAAA;;;;AAAA;;;;;AAAA,OAAArQ,qBAAA,AAAAC,gBAAAmQ,UAAA,AAAAE,oDAAA,AAAA/lB,qBAAA4lB;;AAAA,OAAAnQ,qBAAA,AAAAC,gBAAAmQ,UAAA;;;AAAA,QAAA,AAAA1rB,gBAAAyrB,pBAAMjnB;AAAN,AAAA,OAAAyD,eACK,EAAI,CAAGzD,IAAE6mB,UACL,6CAAA,7CAACQ,8EAAQ,AAACthB,+CAAO,CAACnD,oCAAAA,uCAAAA,LAAI5C,mBAAAA,IACL,yCAAA,zCAAC5G,0EAAiB2tB,iBACnC,6CAAA,7CAACM,8EAAQ,AAACthB,+CAAO,yCAAA,zCAAC3M,0EAAiBytB,SAClB,iBAAAU,WAAW,CAAGvnB,IAAE6mB;AAAhB,AAAA,0FAAAU,gCAAAA,lHAACT,0CAAAA,oDAAAA;QAL3B,AAAAM,oDAAA,AAAAnQ,eAAAgQ;;;AAAA;;;;GAAA,KAAA;;AAAA,AAAA,OAAA/Q,mBAAQ,AAACjR,8CAAM+hB;;AAJ7B,AAUM,OAACJ,sCAAIX,GAAG,0DAAA,1DAACuB,+CAAOb;;;AAbtC,AAcE,WAAA,JAACC,qCAAOD;;AAEhB,AAAA,AAAA,CAAAc,gDAAA,YAAA;;AAAA,CAAAC,qDAAA,YAEE,WAAmB7vB;AAAnB,AACE,IAAMuM,KAAG,AAAC/L,gBAAK,gDAAA,hDAAC0H,8CAAmBlI;IAC7BwM,KAAG,AAAChM,gBAAK,gDAAA,hDAAC0H,8CAAmBlI;AADnC,AAEE,GAAI,EAAK,sEAAA,rEAAI,AAACQ,gBAAK,AAACC,6CAAkBT,kBAAO,CAAIuM,OAAGC;AAClD,IAAOrE,IAAE,gBAAA,hBAAC3H;;AAAV,AACE,GAAI,CAAG2H,IAAEoE;AACP,GAAI,iBAAOkB,IAAE,gBAAA,hBAACjN;;AAAV,AACE,GAAI,CAAGiN,IAAEjB;AACP,IAAMwjB,OAAK,AAAC/sB,qCAAUjD,EAAEmI,EAAEsF;AAA1B,AACE,GAAI,OAASuiB;AACX,GAAI,CAAI7nB,MAAEsF;AACR,GAAI,UAAA,TAAYuiB;AAAW,eAAO,KAAA,JAAKviB;;;;AAAvC;;;AACA,GAAI,UAAA,TAAOuiB;AAAM,eAAO,KAAA,JAAKviB;;;;AAA7B;;;;AAHJ;;;AAFJ;;;;;AAQJ,eAAO,KAAA,JAAKtF;;;;AATd;;;AADF;;;;;AAFJ;;;;AALN,CAAA2nB,iDAAA,YAqBE,WAAe9vB;AAAf,AACE,8BAAA,WAAAiwB,lCAACpqB;AAAD,AAAS,SAAK,OAAAoqB,mCAAY,CAAAA,qBAAA;GAAW,AAAClqB,0CAAe/F;;;AAtBzD,CAAA+vB,+CAAA,YAuBE,WAAa/vB;AAAb,AACE,IAAAkwB,WAAM,AAAC1vB,gBAAK,AAACC,6CAAkBT;AAA/B,AAAA,QAAAkwB;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAGI,IAAA9V,oBAAK,AAAC+V,8CAAQnwB;AAAd,AAAA,GAAAoa;AAAiB,OAACgW,gEAA0BpwB;;AAA5Coa;;;;;AACF,OAACvZ,6CAAEb,EAAE,AAAC8M,wCAAa9M;;;;;AA5BzB,AAAA,CAAA4vB,gDAAA,UAAA;;AAAA,CAAAC,qDAAA,UA8BE,WAAmB7vB;AAAnB,AAAA;;;AA9BF,CAAA8vB,iDAAA,UA+BE,WAAe9vB;AAAf,AAAA;;;AA/BF,CAAA+vB,+CAAA,UAgCE,WAAa/vB;AAAb,AAAA;;AAKF,AAAA,AAAA,CAAAqwB,6CAAA,YAAA;;AAAA,CAAAC,0CAAA,YAEE,WAAcjqB,EAAEqJ;AAAhB,AACE,IAAM6gB,OAAK,4CAAA,WAAAC,vDAAC1nB;AAAD,AAAM,8CAAA0nB,vCAACttB,qCAAUmD;GAAM,AAACyC,4CAAI/C,0CAAe2J;AAAtD,AACE,IAAA/G,mBACE,oEAAA,uDAAA,zHAAM,AAAAJ,cAAA,AAAA3C,+CAAQS,KAAG,AAAC/E,+CAAoB+E,EAAEkqB;AAD1C,AAAA,oBAAA5nB;AAAAA;;AAEE,sDAAA,/CAACrH,gFAAuBivB;;;AAEhC,AAAA,AAAA,CAAAE,8CAAA,YAAA;;AAAA,CAAAC,0CAAA,YAEE,WAAcrqB,EAAEqJ,QAAQkhB;AAAxB,AACE,IAAMlhB,cAAQ,AAAC5G,4CAAI/C,0CAAe2J;IAC5BkhB,aAAO,AAAC7qB,0CAAe,+CAAA,/CAACmJ,wCAAa0hB,0FAAQ,AAACtrB,gBAAMoK;AAD1D,AAEE,IAAOrJ,QAAEA;IAATwqB,WAAsBnhB;IAAtBohB,aAAAD;IAAAE,aAAA,AAAAvtB,cAAAstB;IAAAE,eAAA,AAAArtB,gBAAAotB;IAAAA,iBAAA,AAAAntB,eAAAmtB;SAAAC,LAAYW;UAAZZ,NAAiB7U;IAAjB+U,WAAuCL;IAAvCM,aAAAD;IAAAE,aAAA,AAAA3tB,cAAA0tB;IAAAE,eAAA,AAAAztB,gBAAAwtB;IAAAA,iBAAA,AAAAvtB,eAAAutB;QAAAC,JAA+BhsB;SAA/B+rB,LAAmCS;AAAnC,AAAA,IAAOvrB,QAAAA;IAAPwqB,eAAAA;IAAAI,eAAAA;;AAAA,AAAA,IAAO5qB,QAAAA;IAAPgrB,aAAAR;IAAAS,aAAA,AAAA9tB,cAAA6tB;IAAAE,eAAA,AAAA5tB,gBAAA2tB;IAAAA,iBAAA,AAAA1tB,eAAA0tB;aAAAC,TAAYI;cAAZL,VAAiBpV;IAAjBsV,aAAAP;IAAAQ,aAAA,AAAAjuB,cAAAguB;IAAAE,eAAA,AAAA/tB,gBAAA8tB;IAAAA,iBAAA,AAAA7tB,eAAA6tB;YAAAC,RAA+BtsB;aAA/BqsB,TAAmCG;AAAnC,AACE,oBAAID;AAAG,eAAO,AAAC1sB,qCAAUoB,MAAEsrB,OAAGvsB;eAAG8W;eAAI0V;;;;;;AAAIvrB;;;;;;AANjD,CAAAsqB,gDAAA,YAOE,WAAetqB,EAAEqJ,QAAQkhB;AAAzB,AACE,IAAMlhB,cAAQ,AAAC5G,4CAAI/C,0CAAe2J;IAC5BkhB,aAAO,AAAC7qB,0CAAe,+CAAA,/CAACmJ,wCAAa0hB,0FAAQ,AAACtrB,gBAAMoK;AAD1D,AAEE,IAAAmiB,WAAkBniB;IAAlBoiB,aAAAD;IAAAE,aAAA,AAAAvuB,cAAAsuB;IAAAE,eAAA,AAAAruB,gBAAAouB;IAAAA,iBAAA,AAAAnuB,eAAAmuB;SAAAC,LAAQL;UAARI,NAAa7V;IAAb+V,WAAmCrB;IAAnCsB,aAAAD;IAAAE,aAAA,AAAA3uB,cAAA0uB;IAAAE,eAAA,AAAAzuB,gBAAAwuB;IAAAA,iBAAA,AAAAvuB,eAAAuuB;QAAAC,JAA2BhtB;SAA3B+sB,LAA+BP;AAA/B,AAAA,IAAAC,eAAAA;IAAAI,eAAAA;;AAAA,AAAA,IAAAI,aAAAR;IAAAS,aAAA,AAAA9uB,cAAA6uB;IAAAE,eAAA,AAAA5uB,gBAAA2uB;IAAAA,iBAAA,AAAA1uB,eAAA0uB;aAAAC,TAAQZ;cAARW,VAAapW;IAAbsW,aAAAP;IAAAQ,aAAA,AAAAjvB,cAAAgvB;IAAAE,eAAA,AAAA/uB,gBAAA8uB;IAAAA,iBAAA,AAAA7uB,eAAA6uB;YAAAC,RAA2BttB;aAA3BqtB,TAA+Bb;AAA/B,AACE,oBAAMD;AAAN,AACE,AAAChtB,2CAAW0B,EAAEsrB,OAAGvsB;;AAAG,eAAO8W;eAAI0V;;;;;AADjC;;;;;AAGR,AAAA,AAAA,CAAAe,8CAAA,YAAA;;AAAA,CAAAC,+CAAA,YAEE,WACG5yB;AADH,AAEE,oBAAI,AAAC4J,+CAAc5J;AACjB,OAACiO,cAAI,iBAAAoQ,qBAAA,wDAAAwU;AAAA,AAAA,YAAA/uB,kBAAA,KAAA;AAAA,AAAA,IAAA+uB,eAAAA;;AAAA,AAAA,IAAAzpB,qBAAA,AAAA5F,cAAAqvB;AAAA,AAAA,GAAAzpB;AAAA,AAAA,IAAAypB,eAAAzpB;AAAA,AAAA,GAAA,AAAAC,6BAAAwpB;AAAA,IAAAnU,kBA+OwC,AAAAnV,sBAAAspB;IA/OxClU,qBAAA,AAAArZ,gBAAAoZ;IAAAoU,WAAA,AAAAjU,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAoU,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAApU;AAAA,QAAA,AAAAI,eAAAL,gBAAAqU,nCAAM5qB;AAAN,AAAA,GACe,GAAK,+CAAA,9CAAO,AAACnF,qCAAUhD,EAAEmI;AADxC,AAAA,AAAA6W,uBAAA8T,SAEG3qB;;AAFH,eAAA,CAAA4qB,WAAA;;;;AAAA,eAAA,CAAAA,WAAA;;;;;AAAA;;;;;AAAA,OAAA9T,qBAAA,AAAAC,gBAAA4T,UAAA,AAAAE,8CAAA,AAAAxpB,qBAAAqpB;;AAAA,OAAA5T,qBAAA,AAAAC,gBAAA4T,UAAA;;;AAAA,QAAA,AAAAnvB,gBAAAkvB,pBAAM1qB;AAAN,AAAA,GACe,GAAK,+CAAA,9CAAO,AAACnF,qCAAUhD,EAAEmI;AADxC,OAAAyD,iBAAA,AAAAonB,8CAAA,AAAA5T,eAAAyT,/DAEG1qB;;AAFH,eAAA,AAAAiX,eAAAyT;;;;;;AAAA;;;;GAAA,KAAA;;AAAA,AAAA,OAAAxU,mBAAQ,AAACjR,8CAAM,gDAAA,hDAAClF,8CAAmBlI;;;AAGxC,OAACiO,cAAI,iBAAAoQ,qBAAA,wDAAA4U;AAAA,AAAA,YAAAnvB,kBAAA,KAAA;AAAA,AAAA,IAAAmvB,eAAAA;;AAAA,AAAA,IAAA7pB,qBAAA,AAAA5F,cAAAyvB;AAAA,AAAA,GAAA7pB;AAAA,AAAA,IAAA6pB,eAAA7pB;AAAA,AAAA,GAAA,AAAAC,6BAAA4pB;AAAA,IAAAvU,kBA4OwC,AAAAnV,sBAAA0pB;IA5OxCtU,qBAAA,AAAArZ,gBAAAoZ;IAAAwU,WAAA,AAAArU,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAwU,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAxU;AAAA,QAAA,AAAAI,eAAAL,gBAAAyU,nCAAMhrB;AAAN,AAAA,AAAA,AAAA6W,uBAAAkU,SACG,AAACN,+CAAoB,AAAC9iB,8CAAmB9P,EAAEmI;;AAD9C,eAAA,CAAAgrB,WAAA;;;;AAAA;;;;;AAAA,OAAAlU,qBAAA,AAAAC,gBAAAgU,UAAA,AAAAE,8CAAA,AAAA5pB,qBAAAypB;;AAAA,OAAAhU,qBAAA,AAAAC,gBAAAgU,UAAA;;;AAAA,QAAA,AAAAvvB,gBAAAsvB,pBAAM9qB;AAAN,AAAA,OAAAyD,kHAAA,AAAAwnB,8CAAA,AAAAhU,eAAA6T,hKACG,AAACL,+CAAoB,AAAC9iB,8CAAmB9P,EAAEmI;;;AAD9C;;;;GAAA,KAAA;;AAAA,AAAA,OAAAkW,mBAAQ,AAACjR,8CAAM,gDAAA,hDAAClF,8CAAmBlI;;;;AAI9C,AAAA,AAAA,CAAAqzB,2CAAA,YAAA;;AAAA,CAAAC,8CAAA,YAEE,WAAYtzB;AAAZ,AACE,GAAI,8GAAA,9GAACa,6CAAE,AAACL,gBAAK,AAACC,6CAAkBT;AAC9B,IAAA4zB,aAAgC,AAACzzB,wCAAaH;YAA9C,AAAA0D,4CAAAkwB,WAAA,IAAA,nEAAa3hB;YAAb,AAAAvO,4CAAAkwB,WAAA,IAAA,nEAAyB1hB;AAAzB,AAIO,OAACrM,uBAAO,WAAAkuB;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAArwB,4CAAAswB,WAAA,IAAA,/DAAY7rB;QAAZ,AAAAzE,4CAAAswB,WAAA,IAAA,/DAAoBvmB;QAApB,AAAA/J,4CAAAswB,WAAA,IAAA,/DAAsB5uB;AAAtB,AACE,GACE,AAACvE,6CAAEsH,EAAEsF;AADP;;AAAA,GAEE,EAAK,AAACnF,gDAAKH,EAAEsF,QAAG,OAAA,NAAIrI;AAFtB;;AAAA,AAAA;;;;GAHV,AAAC0D,4CAAI,WAAWX,EAAE6nB;AAAb,AAAmB,YAAAhT,2BAAA,KAAA,EAAA,IAAA,AAAAA,sCAAA,sDAAA,rDAAQ,AAAC6W,eAAK1rB,EAAE+J,OAAO,AAAC4hB,cAAI3rB,EAAE+J,OAAO8d;kEAD7D,AAACjqB,0CAAe/F,zGAEX,AAACoN,8CAAM,CAAG6E,QAAMC;;AAJ9B;;;;AAHJ,CAAAqhB,sDAAA,YAcE,WAAoBvzB;AAApB,AACE,GAAI,AAACmwB,8CAAQnwB;oDAGN,AAACyd,sDAAO,WAAAwW,rHACR,OAACpuB,uBAAOuuB;AADA,AAAA,IAAAF,aAAAD;UAAA,AAAAvwB,4CAAAwwB,WAAA,IAAA,jEAAMhY;SAAN,AAAAxY,4CAAAwwB,WAAA,IAAA,hEAAUC;AAAV,AAAe,OAAC/lB,6CAAK8N,IAAIiY;kKAFjC,8CAAA,9CAACpR,4CAAiB/iB,zJAClB,AAAC8I,4CAAImE,iBAAO,AAACG;;AAFpB;;;;AAfJ,CAAAomB,sDAAA,YAqBE,WAAoBxzB;AAApB,AACE,GAAI,AAACmwB,8CAAQnwB;oDAGN,AAACyd,sDAAO,WAAA4W,rHACR,OAACxuB,uBAAOuuB;AADA,AAAA,IAAAE,aAAAD;UAAA,AAAA3wB,4CAAA4wB,WAAA,IAAA,jEAAYpY;SAAZ,AAAAxY,4CAAA4wB,WAAA,IAAA,hEAAgBH;AAAhB,AAAqB,OAACI,6CAAK,OAAA,NAAKrY,WAAKiY;kKAF7C,8CAAA,9CAACpR,4CAAiB/iB,zJAClB,AAAC8I,4CAAImE,iBAAO,AAACG;;AAFpB;;;;AAtBJ,CAAAqmB,uDAAA,YA4BE,WAAqBzzB;AAArB,AACE,MAAA,AAAAoD,gDAAA,4BAAA;;AACA,OAACqwB,uDAAsB,AAAC7oB,wDAA6B5K;;;AA9BzD,CAAA0zB,2DAAA,YA+BE,WAAyB1zB;AAAzB,AACE,MAAA,AAAAoD,gDAAA,4BAAA;;;AAhCJ,CAAAuwB,gDAAA,YAiCE,WAAc3zB,EAAEya;AAAhB,AACE,IAAAL,oBAAK,AAAC+V,8CAAQnwB;AAAd,AAAA,GAAAoa;AACK,OAACI,oDACC,AAAC/I,8CAAmBzR,EAAE,AAAC8M,wCAAa9M,IACpC,AAACguB,8CAAmBhuB,EAAE,gDAAA,hDAACkI,8CAAmBlI,QAC1Cya;;AAJPL;;;AAMJ,AAAA,AAAA,CAAAoa,sCAAA,UAAA;;AAAA,CAAAC,qCAAA,UAEI,WAASpuB,EAAEquB;AAAX,AACE,GAAM,AAAClxB,cAAIkxB;AAAX,AAAiB,MAAA,AAAAtxB,gDAAA,CAAA,uGAAA,hBAAkDsxB;;AAAnE;;AADF;;;AAFJ,AAAA,CAAAF,sCAAA,YAAA;;AAAA,CAAAC,qCAAA,YAAA,WAMapuB,EAAEquB;AANf,AAOM,GAAM,AAAClxB,cAAIkxB;AAAX,AAAiB,MAAA,AAAAtxB,gDAAA,CAAA,oHAAA,hBAA+DsxB;;AAAhF;;AACAruB;;;AARN,AAAA,CAAAmuB,sCAAA,YAAA;;AAAA,CAAAC,qCAAA,YAUI,WAASpuB,EAAEquB;AAAX,AACE,IAAA/rB,mBACE,AAACgsB,0CAAetuB,EAAEquB;AADpB,AAAA,oBAAA/rB;AAAAA;;AAEE,OAACisB,iDAAoBvuB,EAAEquB;;;AAE/B,AAAA,AAAA,CAAAG,0CAAA,UAAA;;AAAA,CAAAF,0CAAA,UAEI,WAActuB,EAAEquB;AAAhB,AACE,GAAM,AAAClxB,cAAIkxB;AAAX,AAAiB,MAAA,AAAAtxB,gDAAA,CAAA,uGAAA,hBAAkDsxB;;AAAnE;;AADF;;;AAFJ,AAAA,CAAAG,0CAAA,YAAA;;AAAA,CAAAF,0CAAA,YAUI,WAActuB,EAAEquB;AAAhB,AACE,OAACE,iDAAoBvuB,EAAEquB;;;AAX7B,AAAA,CAAAG,0CAAA,YAAA;;AAAA,CAAAF,0CAAA,YAAA,WAMkBtuB,EAAEquB;AANpB,AAOM,GAAM,AAAClxB,cAAIkxB;AAAX,AAAiB,MAAA,AAAAtxB,gDAAA,CAAA,oHAAA,hBAA+DsxB;;AAAhF;;AACAruB;;AAKN,AAAA,AAAA,CAAAmuB,sCAAA,YAAA;;AAAA,CAAAC,qCAAA,YAAA,WAEWpuB,EAAEquB;AAFb,AAGI,GAAI,AAACtW,uBAAOsW;AACVruB;;AACA,MAAA,AAAAjD,gDAAA,CAAA,gHAAA,bAA8DiD;;;AAEpE,iDAAA,jDAAOyuB,0GAAcJ;AAArB,AACE,OAACt0B,+CAAO,WAAK20B,GAAGC;AAAR,AACE,IAAA3W,qBAAA,uEAAA4W;AAAA,AAAA,YAAAnxB,kBAAA,KAAA;AAAA,AAAA,IAAAmxB,eAAAA;;AAAA,AAAA,IAAA7rB,qBAAA,AAAA5F,cAAAyxB;AAAA,AAAA,GAAA7rB;AAAA,AAAA,IAAAmV,mBAAAnV;AAAA,AAAA,QAAA,AAAAzF,gBAAA4a,pBAAMlY;AAAN,AAAA,IAAAmY,uBAAA;4FAAA0W;AAAA,AAAA,YAAApxB,kBAAA,KAAA;;AAAA,AAAA,IAAAoxB,eAAAA;;AAAA,AAAA,IAAA9rB,yBAAA,AAAA5F,cAAA0xB;AAAA,AAAA,GAAA9rB;AAAA,AAAA,IAAA8rB,eAAA9rB;AAAA,AAAA,GAAA,AAAAC,6BAAA6rB;AAAA,IAAAxW,kBA2JuC,AAAAnV,sBAAA2rB;IA3JvCvW,qBAAA,AAAArZ,gBAAAoZ;IAAAyW,WAAA,AAAAtW,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAyW,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAzW;AAAA,QAAA,AAAAI,eAAAL,gBAAA0W,nCAAW9uB;AAAX,AAAA,AAAA,AAAA0Y,uBAAAmW,SACE,AAACvpB,eAAKvF,EAAEC;;AADV,eAAA,CAAA8uB,WAAA;;;;AAAA;;;;;AAAA,OAAAnW,qBAAA,AAAAC,gBAAAiW,UAAA,AAAAE,2EAAA,AAAA7rB,qBAAA0rB;;AAAA,OAAAjW,qBAAA,AAAAC,gBAAAiW,UAAA;;;AAAA,QAAA,AAAAxxB,gBAAAuxB,pBAAW5uB;AAAX,AAAA,OAAAsF,mCAAA,AAAAypB,2EAAA,AAAAjW,eAAA8V,9GACE,AAACtpB,eAAKvF,EAAEC;;;AADV;;;;;CAAA,KAAA;;;IAAA+Y,mBAAA,AAAA7b,cAAA,AAAAgb,qBAAauW;AAAb,AAAA,GAAA1V;AAAA,OAAAnR,+CAAAmR,iBAAA,AAAAiW,6DAAA,AAAAlW,eAAA6V;;AAAA,eAAA,AAAA7V,eAAA6V;;;;;AAAA;;;;GAAA,KAAA;;AAAA,AAAA,OAAA5W,mBAAQ2W;GACO,AAACnkB,6CAAK5D,iBAAO,AAACsoB,eAAKb,OAAO,AAACtV,eAAK,AAACjS,kBAAQunB;;AAEpE,4CAAA,5CAAOc,gGAASjF;AAAhB,AACE,OAACuE,+CAAa,AAACjkB,6CAAK4O,gBAAM,AAACtf,wCAAaowB;;AAG1C,AAAA,AAAA,CAAAkF,4CAAA,YAAA;;AAAA,CAAAC,4CAAA,YAEE,WAAgB11B,EAAE00B,KAAKnE;AAAvB,AACE,IACM3jB,KAAG,iBAAAjE,mBAAI,AAACsC,6CAAkBjL;AAAvB,AAAA,oBAAA2I;AAAAA;;AACG,OAACrI,2DAAyBN;;;IAChCoF,IAAE,AAACuvB,0CAAe30B,EAAE00B;AAH1B,AAIE,AAAC5sB,2CAAW1C,EAAEmrB;;AACd3jB;;AAEN,AAAA,AAAA,CAAA+oB,mDAAA,YAAA;;AAAA,CAAAC,2CAAA,YAEG,WAAS51B;AAAT,AAAA;;;AAFH,CAAA61B,6CAAA,YAIG,WAAiB71B;AAAjB,AACG,OAACk2B,mDAAW,AAACnwB,0CAAe/F;;;AALlC,CAAA81B,4CAAA,YAMG,WAAgB91B;AAAhB,AACG,OAACm2B,kDAAU,AAACpwB,0CAAe/F;;;AAPjC,CAAA+1B,+CAAA,YAQG,WAAmB/1B,EAAEm0B;AAArB,AACG,OAAC+B,mDAAW/B;;;AATlB,CAAA6B,8CAAA,YAUG,WAAkBh2B,EAAEm0B;AAApB,AACG,OAACgC,kDAAUhC;;;AAXjB,CAAA8B,2CAAA,YAYG,WAAej2B,EAAEqG;AAAjB,AACG,OAACwvB,6CAAkB71B;;AAKzB,AAAA,AAAA,CAAAo2B,+CAAA,YAAA;;AAAA,CAAAC,oCAAA,YAEI,WAAQr2B,EAAE6N,IAAI1F;AAAd,AACE,GAAI,EAAA,CAAA,gCAAA,zBAAM,0BAAA,1BAAC3H,0BAAAA,VAAK2H,0BAAAA,MAAG,yEAAA,xEAAK,AAAC3H,gBAAK,AAAC0H,8CAAmBlI,EAAE6N;AAApD;;AAEE,MAAA,AAAAzK,gDAAA,CAAA,0FAAA,bAAwC+E;;;;AALhD,CAAAmuB,qCAAA,YAMI,WAASt2B,EAAE6N;AAAX,AACE,GAAI,EAAA,CAAA,kCAAA,3BAAM,4BAAA,5BAACrN,4BAAAA,ZAAKqN,4BAAAA,QAAK,oEAAA,nEAAK,AAACrN,gBAAK,AAACC,6CAAkBT;AAAnD;;AAEE,MAAA,AAAAoD,gDAAA,CAAA,sFAAA,fAAkCyK;;;AAE1C,AAAA,AAAA,CAAA0oB,2CAAA,YAAA;;AAAA,CAAAC,0CAAA,YAEI,WAAcx2B,EAAEmI;AAAhB,AACE,IAAM0F,MAAI,oEAAA,nEAAK,AAACrN,gBAAK,AAACC,6CAAkBT;AAAxC,AACE,OAACq2B,oCAASr2B,EAAE6N,IAAI1F;;;AAJxB,CAAAsuB,2CAAA,YAKI,WAAez2B;AAAf,AACE,IAAM6N,MAAI,oEAAA,nEAAK,AAACrN,gBAAK,AAACC,6CAAkBT;AAAxC,AACE,OAACs2B,qCAAUt2B,EAAE6N;;AAMrB,AAAA,AAAA,CAAA6oB,oCAAA,YAAA;;AAAA,CAAAC,mCAAA,YAEE,WAAO32B,EAAE42B;AAAT,AACE,GACE,AAAC/1B,6CAAE+1B,EAAyCC;AAA8B,OAACnjB,0CAAe,AAACnC,0CAAevR,EAAE82B;;AAD9G,GAEE,OAASF;AAAG,IAAMG,wBAAsB,AAACtwB,0CAAe,AAAC0gB,0CAAe,AAAC5V,0CAAevR,EAAE82B,uCAAUF;AAAxF,AACE,IAAAI,cAAO/c;IAAPgd,cAAUL;AAAV,AAAA,oBAAA,CAAAI,4CAAAA,0CAAA,IAAAC,eAAAD,sBAAA,IAAAC;AACIF;;AADJ,oBAAA,CAAAC,4CAAAA,0CAAA,IAAAC,eAAAD,sBAAA,IAAAC;AAEI,OAACtwB,UAAUowB;;AAFf,oBAAA,CAAAC,4CAAAA,0CAAA,IAAAC,eAAAD,sBAAA,IAAAC;AAGI,OAACjN,UAAU+M;;AACb,OAACzP,SAASyP,sBAAsB,CAAA,MAAOH;;;;;AAPzD,AAQQ,MAAA,AAAAxzB,gDAAA,qBAAA;;;;;AAIZ,8CAAA,9CAAM8zB,oGAAWl3B,EAAWm3B,QAAQjlB,MAAMD,MAAMmlB,QACtBC,GAAYzF,GAAY0F;AADlD,AAEE,IAAMC,IAAE,AAAU1c,8CAAmB,8CAAA,9CAACmT,+EAAsB/b;IACtDC,YAAM,AAAC1R,gBAAK0R;IACZD,YAAM,AAACzR,gBAAKyR;IACZmlB,cAAQ,AAAC52B,gBAAK42B;AAHpB,AAIE,AAAA,IAAQjvB,UAAE,eAAA,dAAKivB;;AAAf,AAAA,GAAwB,WAAA,VAAGjvB;AAA3B,AACE,IAAMqvB,cAAM,CAAMF,OAAOnvB;AAAzB,AACE,eAAA,dAAMkvB,GAAGlvB;;AACT,AAAA,IAAQsF,UAAE,WAAA,VAAKtF;;AAAf,AAAA,GAAkB,CAAGsF,UAAEwE;AAAvB,AACE,CAAMolB,GAAG5pB,WACH,CAAM0pB,QACA,CAAG,CAAG1pB,UAAEyE,aACL/J;;AAJjB,eAA8B,WAAA,VAAKsF;;;;AAAnC;;;;AAAA;AAKA,AAAA,IAAQA,UAAEtF;;AAAV,AAAA,GAAY,CAAGsF,UAAEwE;AAAjB,AACE,CAAM2f,GAAGnkB,WACH,CAAG,CAAM4pB,GAAGlvB,YACT,CAAMovB,EACA,CAAG,CAAGpvB,UAAE8J,aACLxE;;AALpB,eAAwB,WAAA,VAAKA;;;;AAA7B;;;;AAAA;AAMA,AAAA,IAAQA,UAAE,WAAA,VAAKtF;;AAAf,AAAA,GAAkB,CAAGsF,UAAEwE;AAAvB,AACE,IAAMwlB,UAAE,CAAMJ,GAAG5pB;AAAjB,AACE,AAAA,IAAQgF,UAAEtK;;AAAV,AAAA,GAAY,CAAGsK,UAAER;AAAjB,AACE,IAAMylB,cAAM,CAAA,CAAG,CAAGjqB,UAAEwE,aACL9J,WAAE,CAAGsK,UAAEtK;AADtB,AAEE,CAAMypB,GAAGnf,WAAE,CAAG,CAAMmf,GAAGnf,YACT,CAAGglB,UACA,CAAMF,EAAEG;;AAL7B,eAAwB,WAAA,VAAKjlB;;;;AAA7B;;;;AAAA;AAFJ,eAA8B,WAAA,VAAKhF;;;;AAAnC;;;;AAAA;AAQA,AAAA,IAAQA,UAAEtF;;AAAV,AAAA,GAAY,CAAGsF,UAAEwE;AAAjB,AACE,CAAM2f,GAAGnkB,WAAE,CAAG,CAAMmkB,GAAGnkB,YACT+pB;;AAFhB,eAAwB,WAAA,VAAK/pB;;;;AAA7B;;;;AAAA;AAIA,AAAA,IAAQA,UAAEtF;;AAAV,AAAA,GAAY,CAAGsF,UAAEwE;AAAjB,AACE,IAAMwlB,UAAE,CAAMJ,GAAG5pB;AAAjB,AACE,AAAA,IAAQgF,UAAEtK;;AAAV,AAAA,GAAY,CAAGsK,UAAER;AAAjB,AACE,IAAM0lB,eAAO,CAAA,CAAG,CAAGlqB,UAAEwE,aACL9J,WAAE,CAAGsK,UAAEtK;AADvB,AAEE,CAAMovB,EAAEI,gBAAO,CAAG,CAAMJ,EAAEI,iBACR,CAAGF,UAAE,CAAM7F,GAAGnf;;AAJpC,eAAwB,WAAA,VAAKA;;;;AAA7B;;;;AAAA;AAFJ,eAAwB,WAAA,VAAKhF;;;;AAA7B;;;;AAAA;AA1BJ,eAAiC,WAAA,VAAKtF;;;;AAAtC;;;;AAAA;AAiCA,sDAAA,/CAACkD,6CAAkBrL,qFAAGiS,UAAMA,kBACT,WAAW9J,EAAQsF;AAAnB,AACE,QAAM8pB,EAAE,CAAG,CAAGpvB,IAAE8J,aAAOxE;;;AAEhD,8CAAA,9CAAMmqB,oGAAW53B,EAAW4B,KAAKsQ,MAAMD,MAAMmlB,QAAQS;AAArD,AACE,IAAM5lB,YAAM,AAACzR,gBAAKyR;IACZC,YAAM,AAAC1R,gBAAK0R;IACZklB,cAAQ,AAAC52B,gBAAK42B;IACdU,KAAG,+CAAA,/CAACzsB,6CACErL,qFAAGiS,UAAMC,kBACT,WAAW/J,EAAQsF;AAAnB,AACE,GAAI,yBAAA,vBAAK,CAAGtF,IAAEivB,oBACL,CAAI3pB,KAAEtF,QACN,CAAGsF,IAAEyE;AACZ,QAAMtQ,KAAK,CAAG,CAAGuG,IAAE+J,aAAOzE;;AAH5B;;;AANd,AAWE,oBAAIoqB;AACF,IAAMpb,OAAK,AAAChU,kDAAuBqvB;IAC7BC,gBAAc,AAACv3B,gBAAK,AAACJ,+CACL,WAAWgE,IAAI4zB;AAAf,AAAsB,GAAI,AAACnyB,uBAAOuuB,sBAAM4D;AAAO,cAAA,NAAK5zB;;AAAKA;;GADrD,IAGJqY;AAJtB,AAME,gDAAA,zCAAC1K,sCAAW+lB,sFAAI5lB,UAAM,CAAGD,YAAM8lB;;AACjCD;;;AAEN,mDAAA,nDAAMG,8GAAyBd,QAAQjb,IAAIhK,MACrBD,MAAeolB,GAAYC;AADjD,AAEE,IAAMpb,UAAI,AAAC1b,gBAAK0b;IACVhK,YAAM,AAAC1R,gBAAK0R;IACZD,YAAM,AAACzR,gBAAKyR;AAFlB,AAGE,IAAO0lB,eAAO,AAACn3B,gBAAK,CAAG0b,UAAI,CAAGA,UAAIhK;IAC3B/J,UAAE,AAAC3H,gBAAK0b;;AADf,AAEE,GAAM,CAAG/T,UAAE8J;AAAX,AACE,CAAMolB,GAAGlvB,WAAE,CAAMgvB,QAAQQ;;AACzB,eAAO,CAAGA,eAAOzlB;eACV,WAAA,VAAK/J;;;;;AAHd;;;;AAIF,IAAM+vB,OAAa,AAAC1sB,8CAAM2sB,cAAI,4CAAA,WAAAC,vDAACtvB;AAAD,AAAM,OAACtC,SAAS4xB;GACzB,AAAC1T,wCAAa2S,GAAGnb,QAAI,CAAGjK,YAAMiK;AADnD,AAEE,GAAI,kDAAA,lDAACrb,6CAAEq3B;AAAP,kDAAA,uDAAA;;AAEE,IAAMxvB,IAAE;AAAA,IAAQP,UAAE+T;;AAAV,AAAA,GAAc,CAAG/T,UAAE8J;AAAnB,AACE,CAAMolB,GAAGlvB,WAAE,CAAG,CAAMkvB,GAAGlvB,YAAG+vB;;AAD5B,eAA0B,WAAA,VAAK/vB;;;;AAA/B;;;;AAAA;;;IAEFkwB,gBACS,AAACj4B,+CAAO,WAAa2K,IAAY5H,xEACjC,AAACwD;AADO,AAA4B,QAAGoE,MAAI,CAAG5H,IAAEA;OADhD,AAACuhB,wCAAa2S,GAAGnb,QAAI,CAAGjK,YAAMiK,pEAC9B;IAEToc,QAAM,CAAMjB,GAAGnb;IACfmc,UAAI,EAAI,SAAA,RAAMC,cAAO,GAAGD,KAAKA;IAC7BE,MAAI,CAAGD,QAAMD;IACbb,QAAM,CAAGe,MAAIF;IACbA,UAAI,CAAGA,UAAIH;AATjB,AAUE,CAAMZ,OAAOpb,WAAIsb;;AACjB,AAAA,IAAQrvB,UAAE,WAAA,VAAK+T;;AAAf,AAAA,GAAoB,CAAG/T,UAAE8J;AAAzB,AACE,CAAMolB,GAAGlvB,WAAE,CAAG,CAAMkvB,GAAGlvB,YAAGowB;;AAD5B,eAAgC,WAAA,VAAKpwB;;;;AAArC;;;;AAAA;AAEA,eAAA,dAAMkvB,GAAGnb;;AAbX,kDAAA,6DAAA,gEAAA,mDAAA,yDAAA,uDAAA,zOAcUsb,+DACCF,uDACJD,oDACCgB;;;AAGhB,8CAAA,9CAAMG,oGAAoBrB,QAAQjb,IAAIhK,MAAMD,MAAe2f,GACjCyF,GAAGG,MAAMa;AADnC,AAEE,IAAMnc,UAAI,AAAC1b,gBAAK0b;IACVjK,YAAM,AAACzR,gBAAKyR;IACZC,YAAM,AAAC1R,gBAAK0R;IACZulB,IAAE,CAAMJ,GAAGnb;IACXuc,aAAM,WAAA,VAAKvc;IACXsb,YAAcA;IACda,UAAYA;AANlB,AAOE,AAAA,IAAQlwB,UAAEswB;;AAAV,AAAA,GAAgB,CAAGtwB,UAAE+J;AAArB,AACE,CAAM0f,GAAGzpB,WAAE,CAAMgvB,QACA,CAAGhvB,UACA,CAAG+T,UAAIhK;;AAH7B,eAA4B,WAAA,VAAK/J;;;;AAAjC;;;;AAAA;AAIA,AAAA,IAAQA,UAAEswB;;AAAV,AAAA,GAAgB,CAAGtwB,UAAE8J;AAArB,AACE,IAAM0lB,eAAO,CAAGc,aACA,CAAGtwB,UAAE+J;AADrB,AAEE,AAAA,IAAQzE,UAAEgrB;;AAAV,AAAA,GAAgB,CAAGhrB,UAAEyE;AAArB,AACE,CAAM0f,GAAGnkB,WACH,CAAG,CAAMmkB,GAAGnkB,YACT,CAAG,CAAM4pB,GAAGlvB,YACT,CAAMgvB,QAAQ,CAAGQ,eACA,CAAGlqB,UAAEgrB;;AALpC,eAA4B,WAAA,VAAKhrB;;;;AAAjC;;;;AAAA;AAHJ,eAA4B,WAAA,VAAKtF;;;;AAAjC;;;;AAAA;AASA,AAAA,IAAQA,UAAEswB;;AAAV,AAAA,GAAgB,CAAGtwB,UAAE+J;AAArB,AACE,CAAM0f,GAAGzpB,WAAE,CAAG,CAAMypB,GAAGzpB,YACTqvB;;AAFhB,eAA4B,WAAA,VAAKrvB;;;;AAAjC;;;;AAAA;AAIA,AAAA,IAAQA,UAAE+T;;AAAV,AAAA,GAAc,CAAG/T,UAAE8J;AAAnB,AACE,IAAMwlB,cAAE,CAAMJ,GAAGlvB;AAAjB,AACE,AAAA,IAAQsF,UAAEgrB;;AAAV,AAAA,GAAgB,CAAGhrB,UAAEyE;AAArB,AACE,IAAMylB,eAAO,CAAA,CAAG,CAAGxvB,UAAE+J,aACLumB,cACA,CAAGhrB,UAAEgrB;AAFrB,AAGE,CAAMtB,QAAQQ,gBACR,CAAG,CAAMR,QAAQQ,iBAAQ,CAAGF,cAAE,CAAM7F,GAAGnkB;;AALjD,eAA4B,WAAA,VAAKA;;;;AAAjC;;;;AAAA;AAFJ,eAA0B,WAAA,VAAKtF;;;;AAA/B;;;;AAAA;AASA,GAAM,CAAG+T,UAAIhK;AAAb,AACE,CAAMilB,QAAQ,CAAGjb,UAAI,CAAGA,UAAIhK,eAAgB,GAAGmmB;;AADjD;;AAGA,AAAA,IAAQlwB,UAAEswB;;AAAV,AAAA,GAAgB,CAAGtwB,UAAE8J;AAArB,AACE,CAAMklB,QACA,CAAGjb,UAAI,CAAG/T,UAAE+J,eACZ,CAAMmlB,GAAGlvB;;AAHjB,eAA4B,WAAA,VAAKA;;;;AAAjC;;;;AAAA;AApCF,kDAAA,mEAAA,RAwCYgvB,0DACLvF;;AAGT,AAAA,AAAA,CAAA8G,+CAAA,YAAA;;AAAA,CAAAC,iCAAA,YAEE,WAAK34B,EAAE44B;AAAP,AACE,IAAAC,aAAoB,AAAC14B,wCAAaH;YAAlC,AAAA0D,4CAAAm1B,WAAA,IAAA,nEAAO5mB;YAAP,AAAAvO,4CAAAm1B,WAAA,IAAA,nEAAa3mB;IACPD,YAAM,AAACzR,gBAAKyR;IACZC,YAAM,AAAC1R,gBAAK0R;IACZklB,UAAQ,iBAAA0B,kBAAK5mB;IAAL6mB,kBAAW9mB;AAAX,AAAA,SAAA6mB,kBAAAC,mBAAAD,kBAAAC;;IACRC,UAAQ,iBAAAC,kBAAK/mB;IAALgnB,kBAAWjnB;AAAX,AAAA,SAAAgnB,kBAAAC,mBAAAD,kBAAAC;;AAJd,AAKE,IAAO/B,UAAQ,AAACtc,8CAAmB7a;IAC5B4xB,KAAG,AAAC7W,qDAAaie;IACjB3B,KAAG,AAACtc,qDAAaie;IACjB1B,SAAO,AAACvc,qDAAaqc;YAH5B,RAIOI;UAJP,NAKOa;QALP,JAMOlwB;;AANP,AAOE,GAAI,CAAGA,IAAEivB;AACP,IAAA+B,aACM,AAAClB,iDACAd,QAAQhvB,EAAE+J,UACVD,UAAMolB,GAAGC;IAHhB6B,iBAAA,AAAAC,4BAAAD;aAAA,AAAAE,4CAAAF,eAAA,pEAAc9B;gBAAd,AAAAgC,4CAAAF,eAAA,vEAAiB3B;iBAAjB,AAAA6B,4CAAAF,eAAA,xEAAuB7B;cAAvB,AAAA+B,4CAAAF,eAAA,rEAA8Bd;YAA9B,AAAAgB,4CAAAF,eAAA,nEAAkCG;AAAlC,AAIE,oBAAUA;AAAV;;AAAA,AACE,IAAAC,aACM,AAACf,4CAAUrB,QAAQhvB,EAAE+J,UAAMD,UAChB2f,GAAGyF,OAAGG,UAAMa;IAF7BkB,iBAAA,AAAAH,4BAAAG;kBAAA,AAAAF,4CAAAE,eAAA,zEAAcpC;aAAd,AAAAkC,4CAAAE,eAAA,pEAAsB3H;AAAtB,AAGE,eAAOuF;eAAQvF;eAAGyF;eAAGC;eACNE;eAAea;eAAK,KAAA,JAAKlwB;;;;;;;;;;;uFAO7C,AAACW,4CAAI,nIACL,oDAAA,7CAAC0mB;kBADIiK;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAA/1B,4CAAAg2B,WAAA,IAAA,/DAAMjnB;QAAN,AAAA/O,4CAAAg2B,WAAA,IAAA,/DAAQt0B;AAAR,AAAA,0FAAaqN,EAAE,CAACrN,kCAAAA,oCAAAA;;CALrB,sBAAA,2CAAA,8CAAA,/GAACo0B;;AAAD,AACM,OAACtC,4CAAUl3B,EAAEm3B,QAAQjlB,UAAMD,UAChBmlB,QAAQC,GAAGzF,GAAG0F;;CAF/B,+CAAA;;AAAA,AAGM,OAACM,4CAAU53B,EAAEm3B,QAAQjlB,UAAMD,UAAMmlB,QAAQ,AAAA,yFAAUwB;;SACxD,AAAA,wFAASA;;;;;AAKrB,AAAA,AAAA,CAAAe,qDAAA,YAAA;;AAAA,CAAAC,uCAAA,YAEE,WAAW55B,EAAE44B;AAAb,AACE,oBAAA94B;AAAA,IAAA+5B,4DAAA/5B;IAAAg6B,4DAAA;AAAA,AAAA,CAAAh6B,8EAAAg6B;;AAAA,IAAA,AAAA,IAAAC,qBAAA,AAAA74B;YAAA,AAAAD,2CAAA84B,nDAA4B/5B,sEAAAA;AAA5B,AAA8B,OAAC45B,uCAAY55B,MAAE44B;UAA7C,AAAA,CAAA94B,8EAAA+5B;;AAAA;;;AAEJ,AAAA,AAAA,CAAAG,+CAAA,YAAA;;AAAA,CAAAC,iCAAA,YAEE,WAAKj6B,EAAE44B;AAAP,AACE,oBAAA94B;AAAA,IAAAo6B,4DAAAp6B;IAAAq6B,4DAAA;AAAA,AAAA,CAAAr6B,8EAAAq6B;;AAAA,IAAA,AAAA,IAAAJ,qBAAA,AAAA74B;YAAA,AAAAD,2CAAA84B,nDAA4B/5B,sEAAAA;AAA5B,AAA8B,OAACi6B,iCAAMj6B,MAAE44B;UAAvC,AAAA,CAAA94B,8EAAAo6B;;AAAA;;;AAEJ,AAAA,AAAA,CAAAE,gDAAA,YAAA;;AAAA,CAAAC,kCAAA,YAEE,WAAMr6B,EAAE44B;AAAR,AACE,oBAAA94B;AAAA,IAAAw6B,4DAAAx6B;IAAAy6B,4DAAA;AAAA,AAAA,CAAAz6B,8EAAAy6B;;AAAA,IAAA,AAAA,IAAAR,qBAAA,AAAA74B;YAAA,AAAAD,2CAAA84B,nDAA4B/5B,sEAAAA;AAA5B,AAA8B,OAACq6B,kCAAOr6B,MAAE44B;UAAxC,AAAA,CAAA94B,8EAAAw6B;;AAAA;;;AAEJ,AAAA,AAAA,CAAAE,kDAAA,YAAA;;AAAA,CAAAC,oCAAA,YAEE,WAAQz6B,EAAE44B;AAAV,AACE,oBAAA94B;AAAA,IAAA46B,4DAAA56B;IAAA66B,4DAAA;AAAA,AAAA,CAAA76B,8EAAA66B;;AAAA,IAAA,AAAA,IAAAZ,qBAAA,AAAA74B;YAAA,AAAAD,2CAAA84B,nDAA4B/5B,sEAAAA;AAA5B,AAA8B,OAACy6B,oCAASz6B,MAAE44B;UAA1C,AAAA,CAAA94B,8EAAA46B;;AAAA;;;AAEJ,AAAA,AAAA,CAAAE,2CAAA,YAAA;;AAAA,CAAAC,oCAAA,YAEE,WAAQx0B,EAAEC;AAAV,AACE,oBAAAxG;AAAA,IAAAg7B,4DAAAh7B;IAAAi7B,4DAAA;AAAA,AAAA,CAAAj7B,8EAAAi7B;;AAAA,IAAA,AAAA,IAAAhB,qBAAA,AAAA74B;YAAA,AAAAD,2CAAA84B,nDAA4B1zB,sEAAAA;AAA5B,AAA8B,OAACw0B,oCAASx0B,MAAEC;UAA1C,AAAA,CAAAxG,8EAAAg7B;;AAAA;;;AAEJ,AAAA,AAAA,CAAAE,4CAAA,YAAA;;AAAA,CAAAC,4CAAA,YAEE,WAAgB50B,EAAEC;AAAlB,AACE,oBAAAxG;AAAA,IAAAo7B,4DAAAp7B;IAAAq7B,4DAAA;AAAA,AAAA,CAAAr7B,8EAAAq7B;;AAAA,IAAA,AAAA,IAAApB,qBAAA,AAAA74B;YAAA,AAAAD,2CAAA84B,nDAA4B1zB,sEAAAA;AAA5B,AAA8B,OAAC40B,4CAAiB50B,MAAEC;UAAlD,AAAA,CAAAxG,8EAAAo7B;;AAAA","names":["clojure.core.matrix.impl.defaults/*trying-current-implementation*","clojure.core.matrix.impl.defaults/calc-element-count","m","temp__5802__auto__","sh","clojure.core.matrix.protocols/get-shape","cljs.core.reduce","cljs.core/*","clojure.core.matrix.impl.defaults/construct-mutable-matrix","dims","cljs.core/long","clojure.core.matrix.protocols/dimensionality","type","clojure.core.matrix.protocols/element-type","double?","cljs.core._EQ_","js/Number","clojure.core.matrix.impl.wrappers/wrap-scalar","clojure.core.matrix.protocols/get-0d","clojure.core.matrix.protocols/coerce-param","clojure.core.matrix.implementations.get_canonical_object","clojure.core.matrix.protocols/PImplementation","clojure.core.matrix.protocols/implementation-key","clojure.core.matrix.protocols/meta-info","clojure.core.matrix.protocols/construct-matrix","clojure.core.matrix.protocols/new-vector","clojure.core.matrix.protocols/new-matrix","clojure.core.matrix.protocols/new-matrix-nd","clojure.core.matrix.protocols/supports-dimensionality?","cljs.core/PROTOCOL_SENTINEL","data","length","rows","columns","shape","dimensions","cljs.core/Keyword","clojure.core.matrix.implementations/get-canonical-object-or-throw","clojure.core.matrix.protocols/PSparse","clojure.core.matrix.protocols/sparse-coerce","clojure.core.matrix.protocols/sparse","clojure.core.matrix.protocols/PNative","clojure.core.matrix.protocols/native","clojure.core.matrix.protocols/native?","clojure.core.matrix.protocols/PNewSparseArray","clojure.core.matrix.protocols/new-sparse-array","clojure.core.matrix.protocols/PDense","clojure.core.matrix.protocols/dense-coerce","clojure.core.matrix.protocols/dense","clojure.core.matrix.protocols/PIndexedAccess","clojure.core.matrix.protocols/get-1d","clojure.core.matrix.protocols/get-2d","clojure.core.matrix.protocols/get-nd","x","cljs.core.ex_info","y","indexes","s","cljs.core/seq","js/Array","cljs.core.nth","cljs.core/first","cljs.core/next","cljs.core/type","cljs.core/LazySeq","cljs.core/seqable?","cljs.core/Range","clojure.core.matrix.protocols/PArrayMetrics","clojure.core.matrix.protocols/nonzero-count","clojure.core.matrix.protocols/element-reduce","cnt","e","clojure.core.matrix.protocols/PZeroDimensionConstruction","clojure.core.matrix.protocols/new-scalar-array","value","clojure.core.matrix.protocols/PZeroDimensionAccess","clojure.core.matrix.protocols/set-0d!","clojure.core.matrix.protocols/set-nd!","clojure.core.matrix.protocols/PZeroDimensionSet","clojure.core.matrix.protocols/set-0d","clojure.core.matrix.protocols/PIndexedSetting","clojure.core.matrix.protocols/set-1d","clojure.core.matrix.protocols/set-2d","clojure.core.matrix.protocols/set-nd","clojure.core.matrix.protocols/is-mutable?","row","v","column","cljs.core/count","clojure.core.matrix.protocols/clone","clojure.core.matrix.protocols/set-1d!","clojure.core.matrix.protocols/set-2d!","clojure.core.matrix.protocols/PNumerical","clojure.core.matrix.protocols/numerical?","clojure.core.matrix.protocols/is-scalar?","cljs.core/every?","cljs.core/number?","clojure.core.matrix.protocols/element-seq","clojure.core.matrix.protocols/PVectorOps","clojure.core.matrix.protocols/vector-dot","clojure.core.matrix.protocols/length","clojure.core.matrix.protocols/length-squared","clojure.core.matrix.protocols/normalise","a","b","clojure.core.matrix.protocols/pre-scale","Math/abs","clojure.core.matrix.protocols/element-sum","clojure.core.matrix.protocols/element-multiply","Math/sqrt","r","clojure.core.matrix.protocols/scale","clojure.core.matrix.protocols/PVectorDistance","clojure.core.matrix.protocols/distance","clojure.core.matrix.protocols/matrix-sub","clojure.core.matrix.protocols/PVectorCross","clojure.core.matrix.protocols/cross-product","clojure.core.matrix.protocols/cross-product!","x1","y1","z1","x2","y2","z2","clojure.core.matrix.protocols/PMutableVectorOps","clojure.core.matrix.protocols/normalise!","clojure.core.matrix.protocols/scale!","clojure.core.matrix.protocols/PAssignment","clojure.core.matrix.protocols/assign!","clojure.core.matrix.protocols/assign-array!","cljs.core/ISeq","msize","clojure.core.matrix.protocols/dimension-count","i","xdims","n__5636__auto__","cljs.core.not_EQ_","cljs.core/not","xss","clojure.core.matrix.protocols/get-major-slice-seq","_","or__5045__auto__","clojure.core.matrix.protocols/same-shapes?","cljs.core.doall","cljs.core.map","clojure.core.matrix.protocols/get-major-slice-view-seq","seq__32929","chunk__32930","count__32931","i__32932","temp__5804__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","ms","arr","alen","clojure.core.matrix.protocols/is-vector?","start","ss","skip","vals__19444__auto__","clojure.core.matrix.protocols/PImmutableAssignment","clojure.core.matrix.protocols/assign","source","clojure.core.matrix.protocols/broadcast-coerce","clojure.core.matrix.protocols/PMutableFill","clojure.core.matrix.protocols/fill!","clojure.core.matrix.protocols/PMatrixCloning","clojure.core.matrix.protocols/PSparseArray","clojure.core.matrix.protocols/is-sparse?","clojure.core.matrix.protocols/PImmutableMatrixConstruction","clojure.core.matrix.protocols/immutable-matrix","clojure.core.matrix.protocols/convert-to-nested-vectors","clojure.core.matrix.protocols/PZeroCount","clojure.core.matrix.protocols/zero-count","acc","clojure.core.matrix.protocols/PMutableMatrixConstruction","clojure.core.matrix.protocols/mutable-matrix","clojure.core.matrix.protocols/PMutableCoercion","clojure.core.matrix.protocols/ensure-mutable","clojure.core.matrix.protocols/PComputeMatrix","clojure.core.matrix.protocols/compute-matrix","f","ix","cljs.core.apply","clojure.core.matrix.utils/base-index-seq-for-shape","clojure.core.matrix.protocols/PDimensionInfo","n","cljs.core/cons","cljs.core/List","cljs.core/IndexedSeq","cljs.core/Cons","clojure.core.matrix.protocols/PSameShape","clojure.core.matrix.protocols/same-shape?","clojure.core.matrix.utils/same-shape-object?","clojure.core.matrix.protocols/PMatrixOps","clojure.core.matrix.protocols/trace","clojure.core.matrix.protocols/inverse","clojure.core.matrix.protocols/determinant","rc","cc","Math/min","res","imp","mm","clojure.core.matrix.protocols/PTranspose","clojure.core.matrix.protocols/transpose","G__32998","cljs.core/mapv","cljs.core/vector","clojure.core.matrix.protocols/transpose-dims","cljs.core/reverse","cljs.core.range","clojure.core.matrix.protocols/PTransposeDims","ordering","clojure.core.matrix.protocols/PTransposeInPlace","clojure.core.matrix.protocols/transpose!","j","t","clojure.core.matrix.protocols/PRotate","clojure.core.matrix.protocols/rotate","dim","places","c","cljs.core/mod","cljs.core/vec","cljs.core.concat","cljs.core/take-last","cljs.core.take","clojure.core.matrix.protocols/PRotateAll","clojure.core.matrix.protocols/rotate-all","shifts","p__33001","vec__33002","shift","cljs.core.map_indexed","clojure.core.matrix.protocols/PShift","clojure.core.matrix.protocols/shift","clojure.core.matrix.protocols/shift-all","z","clojure.core.matrix.protocols/generic-zero","clojure.core.matrix.protocols/join-along","clojure.core.matrix.protocols/broadcast","cljs.core.assoc","clojure.core.matrix.protocols/submatrix","cljs.core.repeat","p__33007","vec__33008","clojure.core.matrix.protocols/POrder","clojure.core.matrix.protocols/order","indices","mshape","subshape","p1__33011#","clojure.core.matrix.protocols/get-major-slice","p1__33012#","p2__33013#","clojure.core.matrix.protocols/join","clojure.core.matrix.impl.defaults/output-rank","pairs","dest","cljs.core.object_array","Long/valueOf","clojure.core.matrix.protocols/PIndexRank","clojure.core.matrix.protocols/index-rank","G__33017","clojure.core.matrix.protocols/element-count","cljs.core.sort_by","cljs.core/second","cljs.core.mapv","comp","G__33018","p1__33016#","clojure.core.matrix.protocols/PMatrixProducts","clojure.core.matrix.protocols/inner-product","clojure.core.matrix.protocols/outer-product","clojure.core.matrix.protocols/matrix-add","sl","p1__33019#","clojure.core.matrix.protocols/element-map","clojure.core.matrix.protocols/PMatrixMultiply","clojure.core.matrix.protocols/matrix-multiply","mdims","adims","vec__33022","arows","acols","clojure.core.matrix.protocols/reshape","vec__33025","mrows","mcols","acount","vec__33028","vec__33031","mutable","new-m-type","new-m","k","vec__33034","clojure.core.matrix.protocols/broadcast-compatible","clojure.core.matrix.protocols/PMatrixMultiplyMutable","clojure.core.matrix.protocols/element-multiply!","clojure.core.matrix.protocols/matrix-multiply!","clojure.core.matrix.protocols/PMatrixDivide","clojure.core.matrix.protocols/element-divide","clojure.core.matrix.protocols/PMatrixDivideMutable","clojure.core.matrix.protocols/element-divide!","cljs.core//","clojure.core.matrix.protocols/element-map!","vec__33039","clojure.core.matrix.protocols/PSummable","cljs.core/+","clojure.core.matrix.protocols/PElementMinMax","clojure.core.matrix.protocols/element-min","clojure.core.matrix.protocols/element-max","clojure.core.matrix.protocols/element-clamp","best","p1__33042#","clojure.core.matrix.protocols/PCompare","clojure.core.matrix.protocols/element-compare","clojure.core.matrix.protocols/element-if","clojure.core.matrix.protocols/element-lt","clojure.core.matrix.protocols/element-le","clojure.core.matrix.protocols/element-gt","clojure.core.matrix.protocols/element-ge","clojure.core.matrix.protocols/element-ne","clojure.core.matrix.protocols/element-eq","clojure.core.matrix.impl.mathsops/signum","clojure.core.matrix.protocols/signum","vec__33072","clojure.core.matrix.protocols/broadcast-same-shape","p1__33043#","p1__33044#","p1__33045#","p2__33046#","p1__33047#","p2__33048#","p1__33050#","p2__33051#","p3__33052#","p1__33053#","p1__33054#","p2__33055#","p1__33056#","p1__33058#","p2__33059#","p1__33060#","p1__33061#","p2__33062#","p1__33063#","p1__33064#","p2__33065#","p1__33066#","p1__33067#","p2__33068#","p1__33069#","p1__33070#","p2__33071#","clojure.core.matrix.protocols/PAddProduct","clojure.core.matrix.protocols/add-product","clojure.core.matrix.protocols/PAddProductMutable","clojure.core.matrix.protocols/add-product!","clojure.core.matrix.protocols/matrix-add!","clojure.core.matrix.protocols/PAddScaled","clojure.core.matrix.protocols/add-scaled","factor","clojure.core.matrix.protocols/PAddScaledMutable","clojure.core.matrix.protocols/add-scaled!","clojure.core.matrix.protocols/PAddScaledProduct","clojure.core.matrix.protocols/add-scaled-product","clojure.core.matrix.protocols/PAddScaledProductMutable","clojure.core.matrix.protocols/add-scaled-product!","clojure.core.matrix.protocols/PScaleAdd","clojure.core.matrix.protocols/scale-add!","m1","m2","constant","clojure.core.matrix.protocols/PScaleAdd2","clojure.core.matrix.protocols/scale-add","clojure.core.matrix.protocols/PLerp","clojure.core.matrix.protocols/lerp","clojure.core.matrix.protocols/lerp!","clojure.core.matrix.protocols/PAddInnerProductMutable","clojure.core.matrix.protocols/add-inner-product!","clojure.core.matrix.protocols/PAddOuterProductMutable","clojure.core.matrix.protocols/add-outer-product!","clojure.core.matrix.protocols/PSetInnerProductMutable","clojure.core.matrix.protocols/set-inner-product!","clojure.core.matrix.protocols/PTypeInfo","js/Object","clojure.core.matrix.protocols/PGenericValues","clojure.core.matrix.protocols/generic-one","clojure.core.matrix.protocols/generic-value","clojure.core.matrix.protocols/PVectorTransform","clojure.core.matrix.protocols/vector-transform","clojure.core.matrix.protocols/vector-transform!","cljs.core/IFn","cljs.core/vector?","clojure.core.matrix.protocols/PMatrixScaling","p1__33081#","cljs.core.partial","clojure.core.matrix.protocols/PMatrixMutableScaling","clojure.core.matrix.protocols/pre-scale!","p1__33082#","clojure.core.matrix.protocols/PMatrixAdd","clojure.core.matrix.protocols/negate","vec__33085","vec__33088","cljs.core/-","clojure.core.matrix.protocols/PMatrixAddMutable","clojure.core.matrix.protocols/matrix-sub!","clojure.core.matrix.protocols/PNegation","clojure.core.matrix.protocols/PMatrixEquality","clojure.core.matrix.protocols/matrix-equals","x__19479__auto__","cljs.core/not-any?","cljs.core/false?","cljs.core/==","clojure.core.matrix.protocols/PValueEquality","clojure.core.matrix.protocols/value-equals","and__5043__auto__","cljs.core/true?","cljs.core/=","clojure.core.matrix.protocols/PMatrixEqualityEpsilon","clojure.core.matrix.protocols/matrix-equals-epsilon","eps","js/Math.abs","p1__33093#","clojure.core.matrix.protocols/PDoubleArrayOutput","clojure.core.matrix.protocols/to-double-array","clojure.core.matrix.protocols/as-double-array","cljs.core.double_array","clojure.core.matrix.protocols/PObjectArrayOutput","clojure.core.matrix.protocols/to-object-array","clojure.core.matrix.protocols/as-object-array","clojure.core.matrix.protocols/PRowOperations","clojure.core.matrix.protocols/swap-rows","clojure.core.matrix.protocols/multiply-row","clojure.core.matrix.protocols/add-row","clojure.core.matrix.protocols/PRowSetting","clojure.core.matrix.protocols/set-row","clojure.core.matrix.protocols/set-row!","svec","clojure.core.matrix.protocols/broadcast-like","clojure.core.matrix.protocols/get-major-slice-view","clojure.core.matrix.protocols/PColumnSetting","clojure.core.matrix.protocols/set-column","clojure.core.matrix.protocols/set-column!","scol","clojure.core.matrix.protocols/get-column","idx","clojure.core.matrix.protocols/PSliceMap","clojure.core.matrix.protocols/slice-map","clojure.core.matrix.impl.common/construct-matrix","more","clojure.core.matrix.protocols/PFilterSlices","clojure.core.matrix.protocols/filter-slices","slcs","cljs.core/filterv","clojure.core.matrix.protocols/PAddEmap","clojure.core.matrix.protocols/add-emap!","clojure.core.matrix.protocols/PSetEmap","clojure.core.matrix.protocols/set-emap!","clojure.core.matrix.protocols/PFunctionalOperations","cljs.core/PersistentVector","p1__33098#","moremore","p1__33099#","p2__33100#","rest__33101#","p1__33102#","p2__33103#","init","cljs.core.mapcat","cljs.core/seq?","clojure.core.matrix.impl.common.mapmatrix","vec__33107","arrays","shapes","clojure.core.matrix.protocols/common-shape","p1__33104#","clojure.core.matrix.impl.common/mapmatrix","clojure.core.matrix.impl.defaults/cart","colls","cljs.core/empty?","iter__5523__auto__","s__33111","xs__6360__auto__","iterys__5519__auto__","s__33113","c__5521__auto__","size__5522__auto__","b__33115","cljs.core/chunk-buffer","i__33114","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__33112","cljs.core/rest","fs__5520__auto__","iter__33110","G__33116","clojure.core.matrix.impl.defaults/indices-seq","cljs.core/range","clojure.core.matrix.protocols/PMapIndexed","clojure.core.matrix.protocols/element-map-indexed","clojure.core.matrix.protocols/element-map-indexed!","G__33125","G__33126","p1__33117#","G__33127","G__33128","G__33129","p1__33118#","p2__33119#","rest__33120#","p1__33121#","p2__33122#","G__33130","G__33131","G__33132","G__33133","G__33134","G__33135","p1__33123#","p2__33124#","vec__33136","cljs.core/map","cljs.core.list_STAR_","G__33139","G__33140","G__33141","G__33142","G__33143","clojure.core.matrix.protocols/PElementCount","clojure.core.matrix.protocols/PValidateShape","clojure.core.matrix.protocols/validate-shape","expected-shape","efirst","enext","p1__33144#","clojure.core.matrix.protocols/PMatrixSlices","clojure.core.matrix.protocols/get-row","clojure.core.matrix.protocols/get-slice","clojure.core.matrix.impl.wrappers/wrap-slice","dimension","ldimension","clojure.core.matrix.protocols/PBLASBase","clojure.core.matrix.protocols/gemm!","clojure.core.matrix.protocols/gemv!","trans-a?","trans-b?","alpha","beta","clojure.core.matrix.protocols/PMatrixColumns","clojure.core.matrix.protocols/get-columns","G__33148","clojure.core.matrix.protocols/get-slice-seq","clojure.core.matrix.protocols/PMatrixRows","clojure.core.matrix.protocols/get-rows","G__33149","clojure.core.matrix.protocols/PSliceView","clojure.core.matrix.protocols/PSliceView2","clojure.core.matrix.protocols/get-slice-view","clojure.core.matrix.impl.wrappers/wrap-nd","clojure.core.matrix.protocols/PSliceSeq","s__33153","b__33155","i__33154","iter__33152","p1__33150#","clojure.core.matrix.protocols/PSliceSeq2","p1__33157#","clojure.core.matrix.protocols/PSliceViewSeq","s__33163","b__33165","i__33164","iter__33162","clojure.core.matrix.protocols/PSliceJoin","clojure.core.matrix.protocols/PSliceJoinAlong","ddim","p1__33182#","p2__33183#","clojure.core.matrix.protocols/PSubVector","clojure.core.matrix.protocols/subvector","clojure.core.matrix.protocols/PSubMatrix","index-ranges","clojure.core.matrix.impl.wrappers/wrap-submatrix","clojure.core.matrix.protocols/PBroadcast","new-shape","clojure.core.matrix.impl.wrappers/wrap-broadcast","nshape","ndims","clojure.core.matrix.protocols/PBroadcastLike","sm","sa","clojure.core.matrix.protocols/PBroadcastCoerce","clojure.core.matrix.protocols/PPack","clojure.core.matrix.protocols/pack","clojure.core.matrix.protocols/PConversion","cljs.core/sequential?","cljs.core.conj","clojure.core.matrix.protocols/PRowColMatrix","clojure.core.matrix.protocols/column-matrix","clojure.core.matrix.protocols/row-matrix","clojure.core.matrix.protocols/PVectorView","clojure.core.matrix.protocols/as-vector","clojure.core.matrix.protocols/to-vector","clojure.core.matrix.protocols/PVectorisable","clojure.core.matrix.protocols/PReshaping","gv","es","partition-shape","ns","plen","p1__33211#","cljs.core.partition","fs","parts","clojure.core.matrix.protocols/PReshapeView","clojure.core.matrix.protocols/reshape-view","clojure.core.matrix.impl.defaults/class","clojure.core.matrix.protocols/PCoercion","param","clojure.core.matrix.protocols/PExponent","clojure.core.matrix.protocols/element-pow","exponent","p1__33215#","Math/pow","p1__33219#","p2__33220#","p1__33221#","clojure.core.matrix.protocols/PSquare","clojure.core.matrix.protocols/square","clojure.core.matrix.protocols/PLogistic","clojure.core.matrix.protocols/logistic","e-t","Math/exp","clojure.core.matrix.impl.common/logistic-fn","clojure.core.matrix.protocols/PLogisticMutable","clojure.core.matrix.protocols/logistic!","clojure.core.matrix.protocols/PSoftplus","clojure.core.matrix.protocols/softplus","et","Math/log","clojure.core.matrix.impl.common/softplus-fn","clojure.core.matrix.protocols/PSoftmax","clojure.core.matrix.protocols/softmax","em","clojure.core.matrix.protocols/exp","clojure.core.matrix.protocols/PSoftmaxMutable","clojure.core.matrix.protocols/softmax!","clojure.core.matrix.protocols/exp!","clojure.core.matrix.protocols/PSoftplusMutable","clojure.core.matrix.protocols/softplus!","clojure.core.matrix.protocols/PReLU","clojure.core.matrix.protocols/relu","Math/max","clojure.core.matrix.impl.common/relu-fn","clojure.core.matrix.protocols/PReLUMutable","clojure.core.matrix.protocols/relu!","clojure.core.matrix.protocols/PMathsFunctions","clojure.core.matrix.protocols/abs","clojure.core.matrix.protocols/acos","Math/acos","clojure.core.matrix.protocols/asin","Math/asin","clojure.core.matrix.protocols/atan","Math/atan","clojure.core.matrix.protocols/cbrt","Math/cbrt","clojure.core.matrix.protocols/ceil","Math/ceil","clojure.core.matrix.protocols/cos","Math/cos","clojure.core.matrix.protocols/cosh","Math/cosh","clojure.core.matrix.protocols/floor","Math/floor","clojure.core.matrix.protocols/log","clojure.core.matrix.protocols/log10","Math/log10","clojure.core.matrix.protocols/round","Math/rint","Math/sign","clojure.core.matrix.protocols/sin","Math/sin","clojure.core.matrix.protocols/sinh","Math/sinh","clojure.core.matrix.protocols/sqrt","clojure.core.matrix.protocols/tan","Math/tan","clojure.core.matrix.protocols/tanh","Math/tanh","clojure.core.matrix.protocols/to-degrees","clojure.core.matrix.impl.mathsops/to-degrees*","clojure.core.matrix.protocols/to-radians","clojure.core.matrix.impl.mathsops/to-radians*","p1__32147__32148__auto__","p1__32149__32150__auto__","clojure.core.matrix.protocols/PMathsFunctionsMutable","clojure.core.matrix.protocols/abs!","clojure.core.matrix.protocols/acos!","clojure.core.matrix.protocols/asin!","clojure.core.matrix.protocols/atan!","clojure.core.matrix.protocols/cbrt!","clojure.core.matrix.protocols/ceil!","clojure.core.matrix.protocols/cos!","clojure.core.matrix.protocols/cosh!","clojure.core.matrix.protocols/floor!","clojure.core.matrix.protocols/log!","clojure.core.matrix.protocols/log10!","clojure.core.matrix.protocols/round!","clojure.core.matrix.protocols/signum!","clojure.core.matrix.protocols/sin!","clojure.core.matrix.protocols/sinh!","clojure.core.matrix.protocols/sqrt!","clojure.core.matrix.protocols/tan!","clojure.core.matrix.protocols/tanh!","clojure.core.matrix.protocols/to-degrees!","clojure.core.matrix.protocols/to-radians!","p1__32151__32152__auto__","p1__32153__32154__auto__","clojure.core.matrix.protocols/PMatrixSubComponents","clojure.core.matrix.protocols/main-diagonal","rank","cljs.core/min","diag-vals","s__33275","b__33277","i__33276","iter__33274","clojure.core.matrix.implementations/construct","clojure.core.matrix.protocols/PSpecialisedConstructors","clojure.core.matrix.protocols/identity-matrix","clojure.core.matrix.protocols/diagonal-matrix","diagonal-values","zs","dm","s__33288","b__33290","i__33289","iter__33287","clojure.core.matrix.protocols/PPermutationMatrix","clojure.core.matrix.protocols/permutation-matrix","permutation","clojure.core.matrix.protocols/PBlockDiagonalMatrix","clojure.core.matrix.protocols/block-diagonal-matrix","blocks","aux","acc-dim","new-block","new-block-dim","new-dim","s__33297","b__33299","i__33298","iter__33295","cljs.core.into","G__33302","G__33304","cljs.core.subvec","clojure.core.matrix.protocols/PMatrixPredicates","clojure.core.matrix.protocols/identity-matrix?","clojure.core.matrix.protocols/zero-matrix?","clojure.core.matrix.protocols/symmetric?","elem","p1__33307#","G__33311","clojure.core.matrix.impl.common/square?","clojure.core.matrix.impl.common/symmetric-matrix-entries?","clojure.core.matrix.protocols/PIndicesAccess","clojure.core.matrix.protocols/get-indices","vals","p1__33315#","clojure.core.matrix.protocols/PIndicesSetting","clojure.core.matrix.protocols/set-indices","clojure.core.matrix.protocols/set-indices!","values","G__33326","vec__33328","seq__33329","first__33330","G__33327","vec__33331","seq__33332","first__33333","vec__33342","seq__33343","first__33344","vec__33345","seq__33346","first__33347","id","vs","G__33354","vec__33356","seq__33357","first__33358","G__33355","vec__33359","seq__33360","first__33361","vec__33368","seq__33369","first__33370","vec__33371","seq__33372","first__33373","clojure.core.matrix.protocols/PNonZeroIndices","clojure.core.matrix.protocols/non-zero-indices","s__33376","b__33378","i__33377","iter__33375","s__33386","b__33388","i__33387","iter__33385","clojure.core.matrix.protocols/PMatrixTypes","clojure.core.matrix.protocols/diagonal?","clojure.core.matrix.protocols/upper-triangular?","clojure.core.matrix.protocols/lower-triangular?","clojure.core.matrix.protocols/positive-definite?","clojure.core.matrix.protocols/positive-semidefinite?","clojure.core.matrix.protocols/orthogonal?","vec__33394","cljs.core/quot","cljs.core/rem","p__33398","vec__33399","p__33403","vec__33404","xs","cljs.core/zero?","p__33407","vec__33408","cljs.core.drop","clojure.core.matrix.protocols/PSelect","clojure.core.matrix.protocols/select","area","clojure.core.matrix.protocols/select-view","clojure.core.matrix.impl.wrappers/wrap-selection","clojure.core.matrix.protocols/PSelectView","clojure.core.matrix.impl.defaults/area-indices","io","in","s__33415","s__33417","b__33419","i__33418","iter__33416","iter__33414","cljs.core/last","clojure.core.matrix.impl.defaults/indices","clojure.core.matrix.protocols/PSetSelection","clojure.core.matrix.protocols/set-selection","clojure.core.matrix.protocols/PIndexImplementation","clojure.core.matrix.protocols/index?","clojure.core.matrix.protocols/index-to-longs","clojure.core.matrix.protocols/index-to-ints","clojure.core.matrix.protocols/index-from-longs","clojure.core.matrix.protocols/index-from-ints","clojure.core.matrix.protocols/index-coerce","cljs.core.long_array","cljs.core.int_array","clojure.core.matrix.protocols/PDimensionLabels","clojure.core.matrix.protocols/label","clojure.core.matrix.protocols/labels","clojure.core.matrix.protocols/PColumnNames","clojure.core.matrix.protocols/column-name","clojure.core.matrix.protocols/column-names","clojure.core.matrix.protocols/PNorm","clojure.core.matrix.protocols/norm","p","js/Number.POSITIVE_INFINITY","clojure.core.matrix.impl.mathsops/abs","sum-of-element-powers","pred__33421","expr__33422","clojure.core.matrix.impl.defaults/compute-q","qr-data","min-len","us","gammas","q","gamma","u","q-idx","qr-idx","clojure.core.matrix.impl.defaults/compute-r","compact?","cm","non-zero-rows","slice","clojure.core.matrix.impl.defaults/householder-qr","max_","cljs.core/max","p1__33424#","tau","u-idx","u-0","clojure.core.matrix.impl.defaults/update-qr","idx+1","clojure.core.matrix.protocols/PQRDecomposition","clojure.core.matrix.protocols/qr","options","vec__33425","x__5133__auto__","y__5134__auto__","max-len","x__5130__auto__","y__5131__auto__","map__33434","cljs.core/--destructure-map","cljs.core.get","error","map__33435","cljs.core/select-keys","p__33436","vec__33437","clojure.core.matrix.protocols/PCholeskyDecomposition","clojure.core.matrix.protocols/cholesky","*trying-current-implementation*-orig-val__33440","*trying-current-implementation*-temp-val__33441","imp__22412__auto__","clojure.core.matrix.protocols/PLUDecomposition","clojure.core.matrix.protocols/lu","*trying-current-implementation*-orig-val__33445","*trying-current-implementation*-temp-val__33446","clojure.core.matrix.protocols/PSVDDecomposition","clojure.core.matrix.protocols/svd","*trying-current-implementation*-orig-val__33448","*trying-current-implementation*-temp-val__33449","clojure.core.matrix.protocols/PEigenDecomposition","clojure.core.matrix.protocols/eigen","*trying-current-implementation*-orig-val__33453","*trying-current-implementation*-temp-val__33454","clojure.core.matrix.protocols/PSolveLinear","clojure.core.matrix.protocols/solve","*trying-current-implementation*-orig-val__33468","*trying-current-implementation*-temp-val__33469","clojure.core.matrix.protocols/PLeastSquares","clojure.core.matrix.protocols/least-squares","*trying-current-implementation*-orig-val__33472","*trying-current-implementation*-temp-val__33473"],"sourcesContent":["(ns clojure.core.matrix.impl.defaults\n  \"Default implementations for core.matrix protocols\n\n   These should be correct reference implementations for all protocols that work on\n   arbitrary objects. They are not necessarily tuned for performance.\n\n   Default implementations are defined for:\n    - nil (treated as a scalar nil value)\n    - Numbers (treated as scalar numerical values)\n    - Arbitrary arrays for which the protocol is not otherwise defined\n  \"\n  (:require [clojure.core.matrix.protocols :as mp]\n            [clojure.core.matrix.impl.wrappers :as wrap]\n            [clojure.core.matrix.impl.mathsops :as mops :refer [to-degrees* to-radians*]]\n            [clojure.core.matrix.implementations :as imp]\n            [clojure.core.matrix.impl.double-array :as da]\n            [clojure.core.matrix.impl.common :refer [logistic-fn softplus-fn relu-fn construct-matrix\n                                                     square? symmetric-matrix-entries? mapmatrix]]\n            [clojure.core.matrix.utils :as u])\n  #?@(:clj [(:require\n              [clojure.core.matrix.macros :refer [TODO error scalar-coerce c-for doseq-indexed array?]]\n              [clojure.core.matrix.macros-clj :refer [try-current-implementation eps== native-array?]])\n            (:import [clojure.lang ISeq])]\n      :cljs [(:require-macros\n               [clojure.core.matrix.impl.defaults :refer [def-PMathsFunctions def-PMathsFunctionsMutable]]\n               [clojure.core.matrix.macros :refer [TODO error scalar-coerce c-for doseq-indexed array?]]\n               [clojure.core.matrix.macros-cljs :refer [try-current-implementation eps== native-array?]])]))\n\n(def ^:dynamic *trying-current-implementation* nil)\n\n;; =========================================================================\n;; This namespace contains default implementations for core.matrix protocols\n;;\n;; These will be used for any protocol that is not extended to an array type\n;;\n;; In general, default implementations are provided for:\n;; - nil : treated as a nil scalar value\n;; - java.lang.Number : treated as a numerical scalar value\n;; - java.lang.Object : any unrecognised object, will be treated as an array\n;;\n\n#? (:clj (do\n(set! *warn-on-reflection* true)\n(set! *unchecked-math* true)\n\n;; (set! *unchecked-math* :warn-on-boxed) ;; use to check for boxing\n\n;; ============================================================\n;; Utility functions for default implementations\n))\n\n(defn- calc-element-count\n  \"Returns the total count of elements in an array\"\n  ([m]\n    (if-let [sh (mp/get-shape m)]\n      (reduce * sh)\n      1)))\n\n;; TODO: make smarter for different numeric types\n;; TODO: have this return ndarrays once we have cljs support\n(defn construct-mutable-matrix\n  \"Constructs a new mutable matrix with the given data.\"\n  ([m]\n    (let [dims (long (mp/dimensionality m))\n          type (mp/element-type m)\n          double? #?(:clj (or (= Double/TYPE type) (= java.lang.Double type))\n                     :cljs (= js/Number type))]\n      (cond\n        (== dims 0)\n          (wrap/wrap-scalar (mp/get-0d m))\n        (and (== dims 1) double?)\n          #?(:clj (da/construct-double-array m)\n             :cljs (mp/coerce-param (imp/get-canonical-object :aljabr) m))\n        double?\n          (mp/coerce-param (imp/get-canonical-object #?(:clj :ndarray-double :cljs :aljabr)) m)\n        :else\n          (mp/coerce-param (imp/get-canonical-object #?(:clj :ndarray :cljs :aljabr)) m)))))\n\n;; ============================================================\n;; Default implementations\n;; - default behaviour for java.lang.Number scalars\n;; - for stuff we don't recognise (java.lang.Object) we should try to\n;;   implement in terms of simpler operations, on assumption that\n;;   we have fallen through to the default implementation\n\n;; default overall implementation\n\n(extend-protocol mp/PImplementation\n  #?(:clj Object :cljs object)\n    (implementation-key [m] :default)\n    (meta-info [m] {})\n    (construct-matrix [m data]\n      (mp/construct-matrix [] data))\n    (new-vector [m length]\n      (mp/new-vector [] length))\n    (new-matrix [m rows columns]\n      (mp/new-matrix [] rows columns))\n    (new-matrix-nd [m shape]\n      (mp/new-matrix-nd [] shape))\n    (supports-dimensionality? [m dimensions]\n      true)\n\n  ;; keyword implementation looks up the underlying implementation by keyword\n  ;; this is intended to allow keywords to be used for dispatch rather than concrete\n  ;; instances from the underlying implementation, e.g. (coerce :vectorz some-other-array)\n  #?(:clj clojure.lang.Keyword\n     :cljs cljs.core.Keyword)\n    (implementation-key [m] m)\n    (meta-info [m] (mp/meta-info (imp/get-canonical-object-or-throw m)))\n    (construct-matrix [m data]\n      (mp/construct-matrix (imp/get-canonical-object-or-throw m) data))\n    (new-vector [m length]\n      (mp/new-vector (imp/get-canonical-object-or-throw m) length))\n    (new-matrix [m rows columns]\n      (mp/new-matrix (imp/get-canonical-object-or-throw m) rows columns))\n    (new-matrix-nd [m shape]\n      (mp/new-matrix-nd (imp/get-canonical-object-or-throw m) shape))\n    (supports-dimensionality? [m dimensions]\n      (mp/supports-dimensionality? (imp/get-canonical-object-or-throw m) dimensions)))\n\n(extend-protocol mp/PSparse\n  nil\n    (sparse-coerce [m data]\n      (mp/sparse data))\n    (sparse [m]\n      nil)\n  #?(:clj Object :cljs object)\n    (sparse-coerce [m data]\n      nil) ;; allow fall through if sparse coercion is not directly supported\n    (sparse [m]\n      m))\n\n(extend-protocol mp/PNative\n  nil\n    (native [m]\n      nil)\n    (native? [m] false)\n  #?(:clj Object :cljs object)\n    (native [m]\n      nil) ;; allow fall through if native coercion is not directly supported\n    (native? [m]\n      false))\n\n(extend-protocol mp/PNewSparseArray\n  #?(:clj Object :cljs object)\n    (new-sparse-array [m shape]\n      ;; we don't support sparse arrays by default, so just return nil\n      nil))\n\n(extend-protocol mp/PDense\n  nil\n    (dense-coerce [m data]\n      (mp/dense data))\n    (dense [m]\n      nil)\n  #?(:clj Object :cljs object)\n    (dense-coerce [m data]\n      nil) ;; allow fall-through if dense coercion is not directly supported\n    (dense [m]\n      m))\n\n;; default implementation for matrix ops\n\n(extend-protocol mp/PIndexedAccess\n  nil\n    (get-1d [m x]\n      (error \"Can't do 1D get on nil\"))\n    (get-2d [m x y]\n      (error \"Can't do 2D get on nil\"))\n    (get-nd [m indexes]\n      (if-let [s (seq indexes)]\n        (error \"Can't do ND get on nil with indexes: \" s)\n        m))\n  #?(:clj Number :cljs number)\n    (get-1d [m x]\n      (error \"Can't do 1D get on a scalar number\"))\n    (get-2d [m x y]\n      (error \"Can't do 2D get on a scalar number\"))\n    (get-nd [m indexes]\n      (if-let [s (seq indexes)]\n        (error \"Can't do ND get on a scalar number with indexes: \" s)\n        m))\n  #?(:clj Object :cljs object)\n    (get-1d [m x]\n      (cond\n        (native-array? m) (mp/get-0d (nth m x))\n        :else (mp/get-nd m [x])))\n    (get-2d [m x y]\n      (cond\n        (native-array? m) (mp/get-1d (nth m x) y)\n        :else (mp/get-nd m [x y])))\n    (get-nd [m indexes]\n      (if (seq indexes)\n        (cond\n          (native-array? m) (mp/get-nd (nth m (first indexes)) (next indexes))\n          :else (error \"Indexed get failed, not defined for:\" (#?(:clj class :cljs type) m)))\n        (mp/get-0d m)))\n\n#?@(:cljs\n     [cljs.core/LazySeq\n      (get-1d [m x] (nth m x))\n      (get-2d [m x y]\n        (if (seqable? (first m))\n          (mp/get-1d (nth m x) y)\n          (error \"Can't do 2D get on a lazy seq\")))\n      (get-nd [m indexes]\n        (if (seq indexes)\n          (mp/get-nd (nth m (first indexes)) (next indexes))\n          (mp/get-0d m)))\n\n      cljs.core/Range\n      (get-1d [m x] (nth m x))\n      (get-2d [m x y]\n        (error \"Can't do 2D get on a range\"))\n      (get-nd [m indexes]\n              (if (seq indexes)\n                (mp/get-nd (nth m (first indexes)) (next indexes))\n                (mp/get-0d m)))\n      ]\n))\n\n(extend-protocol mp/PArrayMetrics\n  nil\n    (nonzero-count [m] 1)\n  #?(:clj Number :cljs number)\n    (nonzero-count [m] (if (zero? m) 0 1)) ;; not possible to remove boxing warning\n  #?(:clj Object :cljs object)\n    (nonzero-count [m]\n      (mp/element-reduce m (fn [cnt e] (if (zero? e) cnt (inc cnt))) 0))) ;; not possible to remove boxing warning\n\n(extend-protocol mp/PZeroDimensionConstruction\n  nil\n    (new-scalar-array\n      ([m] 0.0)\n      ([m value]\n        (wrap/wrap-scalar value)))\n  #?(:clj Object :cljs object)\n    (new-scalar-array\n      ([m] (wrap/wrap-scalar 0.0))\n      ([m value] (wrap/wrap-scalar value))))\n\n(extend-protocol mp/PZeroDimensionAccess\n  nil\n    (get-0d [m]\n      nil)\n    (set-0d! [m value]\n      (error \"Can't set the value of nil!\"))\n  #?(:clj String :cljs string)\n    (get-0d [m]\n      m)\n    (set-0d! [m value]\n      (error \"Can't set a string value!\"))\n  #?(:clj clojure.lang.Keyword :cljs cljs.core.Keyword)\n    (get-0d [m]\n      m)\n    (set-0d! [m value]\n      (error \"Can't set a keyword!\"))\n  #?(:clj Number :cljs number)\n    (get-0d [m]\n      m)\n    (set-0d! [m value]\n      (error \"Can't set a scalar number!\"))\n  #?(:clj Object :cljs object)\n    (get-0d [m]\n      ;; assume this is a scalar value\n      m)\n    (set-0d! [m value]\n      (mp/set-nd! m [] value)))\n\n(extend-protocol mp/PZeroDimensionSet\n  nil\n    (set-0d [m value]\n      value ;; should be OK, since scalars satisfy 0d array abstraction\n      )\n  #?(:clj Object :cljs object)\n    (set-0d [m value]\n      value ;; should be OK, since scalars satisfy 0d array abstraction\n      ))\n\n(extend-protocol mp/PIndexedSetting\n  nil\n    (set-1d [m row v]\n      (error \"Can't do 1D set on nil\"))\n    (set-2d [m row column v]\n      (error \"Can't do 2D set on nil\"))\n    (set-nd [m indexes v]\n      (if (seq indexes)\n        (error \"Can't do \" (count indexes) \"D set on nil\")\n        v))\n    (is-mutable? [m]\n      false)\n  #?(:clj Number :cljs number)\n    (set-1d [m row v]\n      (error \"Can't do 1D set on a scalar number\"))\n    (set-2d [m row column v]\n      (error \"Can't do 2D set on a scalar number\"))\n    (set-nd [m indexes v]\n      (if (seq indexes)\n        (error \"Can't do \" (count indexes) \"D set on a scalar number\")\n        v))\n    (is-mutable? [m]\n      false)\n  #?(:clj Object :cljs object)\n    (set-1d [m row v]\n      (let [m (mp/clone m)]\n        (mp/set-1d! m row v)\n        m))\n    (set-2d [m row column v]\n      (let [m (mp/clone m)]\n        (mp/set-2d! m row column v)\n        m))\n    (set-nd [m indexes v]\n      (let [m (mp/clone m)]\n        (mp/set-nd! m indexes v)\n        m))\n    (is-mutable? [m]\n      ;; assume an object is mutable unless we know otherwise.\n      ;; certainly true for arbitrary Java arrays, for example.\n      true))\n\n(extend-protocol mp/PNumerical\n  #?(:clj Number :cljs number)\n    (numerical? [m]\n      true)\n  nil\n    (numerical? [m]\n      false)\n  #?(:clj Object :cljs object)\n    (numerical? [m]\n      (if (mp/is-scalar? m)\n        false ;; it's a scalar but not a number, so we do not recognise it as numerical\n        (every? number? (mp/element-seq m)))))\n\n(extend-protocol mp/PVectorOps\n  #?(:clj Number :cljs number)\n    (vector-dot [a b] (mp/pre-scale b a))\n    (length [a] (Math/abs (double a)))\n    (length-squared [a] (let [a (double a)] (* a a)))\n    (normalise [a]\n      (let [a (double a)]\n        (cond\n          (> a 0.0) 1.0\n          (< a 0.0) -1.0\n          :else 0.0)))\n  #?(:clj Object :cljs object)\n    (vector-dot [a b]\n      ;; compute dot product if we have two vectors, otherwise return nil\n      (when (and (== 1 (long (mp/dimensionality a))) (== 1 (long (mp/dimensionality b))))\n        (mp/element-sum (mp/element-multiply a b))))\n    (length [a]\n      (Math/sqrt (double (mp/length-squared a))))\n    (length-squared [a]\n      (mp/element-reduce a (fn [^double r ^double x] (+ r (* x x))) 0.0))\n    (normalise [a]\n      (mp/scale a (/ 1.0 (Math/sqrt (double (mp/length-squared a)))))))\n\n(extend-protocol mp/PVectorDistance\n  #?(:clj Number :cljs number)\n    (distance [a b]\n      (if (number? b)\n        (Math/abs (- (double b) (double a)))\n        (mp/distance b a)))\n  #?(:clj Object :cljs object)\n    (distance [a b] (double (mp/length (mp/matrix-sub a b)))))\n\n(extend-protocol mp/PVectorCross\n  #?(:clj Object :cljs object)\n    (cross-product [a b]\n      (let [x1 (double (mp/get-1d a 0))\n            y1 (double (mp/get-1d a 1))\n            z1 (double (mp/get-1d a 2))\n            x2 (double (mp/get-1d b 0))\n            y2 (double (mp/get-1d b 1))\n            z2 (double (mp/get-1d b 2))]\n        (mp/construct-matrix a [(- (* y1 z2) (* z1 y2))\n                                (- (* z1 x2) (* x1 z2))\n                                (- (* x1 y2) (* y1 x2))])))\n    (cross-product! [a b]\n      (let [x1 (double (mp/get-1d a 0))\n            y1 (double (mp/get-1d a 1))\n            z1 (double (mp/get-1d a 2))\n            x2 (double (mp/get-1d b 0))\n            y2 (double (mp/get-1d b 1))\n            z2 (double (mp/get-1d b 2))]\n        (mp/set-1d! a 0 (- (* y1 z2) (* z1 y2)))\n        (mp/set-1d! a 1 (- (* z1 x2) (* x1 z2)))\n        (mp/set-1d! a 2 (- (* x1 y2) (* y1 x2)))\n        a)))\n\n(extend-protocol mp/PMutableVectorOps\n  #?(:clj Object :cljs object)\n    (normalise! [a]\n      (mp/scale! a (/ 1.0 (Math/sqrt (double (mp/length-squared a)))))))\n\n(extend-protocol mp/PAssignment\n  #?(:clj Object :cljs object)\n    (assign! [m x]\n      (let [dims (long (mp/dimensionality m))]\n        (cond\n          (== 0 dims) (mp/set-0d! m (mp/get-0d x))\n          (== 1 dims)\n            (if (instance? ISeq x)\n              ;; specialised handling for sequence (since indexed access would be O(n^2))\n              (let [x (seq x)\n                    msize (long (mp/dimension-count m 0))]\n                (loop [i 0 s (seq x)]\n                  (if (>= i msize)\n                    (when s (error \"Mismatches size of sequence in assign!\"))\n                    (do\n                      (mp/set-1d! m i (first s))\n                      (recur (inc i) (next s))))))\n              ;; otherwise use indexed access\n              (let [xdims (long (mp/dimensionality x))\n                    msize (long (mp/dimension-count m 0))]\n                (cond\n                  (== 0 xdims)\n                    (let [value (mp/get-0d x)]\n                      (dotimes [i msize] (mp/set-1d! m i value)))\n                  (== 1 xdims)\n                    (do\n                      (when (not= msize (long (mp/dimension-count x 0))) (error \"Mismatched shapes in assign to array of shape: \" (mp/get-shape m) \" with argument of shape: \" (mp/get-shape x)))\n                      (dotimes [i msize] (mp/set-1d! m i (mp/get-1d x i))))\n                  :else\n                    (error \"Can't assign! with an argument of higher dimensionality\"))))\n\n          (array? m)\n            (let [xdims (long (mp/dimensionality x))]\n              (if (== dims xdims)\n                (let [xss (mp/get-major-slice-seq x)\n                      _ (or (mp/same-shapes? xss) (error \"Inconsistent slice shapes for assign!\"))]\n                  (doall (map (fn [a b] (mp/assign! a b)) (mp/get-major-slice-view-seq m) xss)))\n                (doseq [ms (mp/get-major-slice-view-seq m)] (mp/assign! ms x))))\n           :else\n              (error \"Can't assign to a non-array object: \" (#?(:clj class :cljs type) m)))))\n    (assign-array!\n      ([m arr]\n          (let [alen (long (count arr))]\n            (if (mp/is-vector? m)\n              (dotimes [i alen]\n                (mp/set-1d! m i (nth arr i)))\n              (mp/assign-array! m arr 0 alen))))\n      ([m arr start length]\n          (let [length (long length)\n                start (long start)]\n         (if (mp/is-vector? m)\n              (dotimes [i length]\n                (mp/set-1d! m i (nth arr (+ start i))))\n              (let [ss (seq (mp/get-major-slice-seq m))\n                    skip (long (if ss (calc-element-count (first (mp/get-major-slice-seq m))) 0))]\n                (doseq-indexed [s ss i]\n                  (mp/assign-array! s arr (+ start (* skip i)) skip))))))))\n\n(extend-protocol mp/PImmutableAssignment\n  nil\n    (assign [m source]\n      (let [r (mp/broadcast-coerce m source)]\n        (if (identical? r source) (mp/clone r) r)))\n  #?(:clj Number :cljs number)\n  (assign [m source]\n    source)\n  #?(:clj Object :cljs object)\n    (assign [m source]\n      (let [r (mp/broadcast-coerce m source)]\n        (if (identical? r source) (mp/clone r) r))))\n\n(extend-protocol mp/PMutableFill\n  #?(:clj Object :cljs object)\n    (fill! [m value]\n      (mp/assign! m value)))\n\n(extend-protocol mp/PMatrixCloning\n   nil\n     (clone [m]\n       m)\n   #?(:clj Number :cljs number)\n     (clone [m]\n       m)\n   #?(:clj Object :cljs object)\n     (clone [m]\n       (mp/construct-matrix m m)))\n\n(extend-protocol mp/PSparseArray\n   #?(:clj Object :cljs object)\n     (is-sparse? [m]\n       false))\n\n(extend-protocol mp/PImmutableMatrixConstruction\n  nil\n    (immutable-matrix [m]\n      nil)\n  #?(:clj Object :cljs object)\n    (immutable-matrix [m]\n      (if (mp/is-mutable? m)\n        (mp/convert-to-nested-vectors m)\n        m)))\n\n(extend-protocol mp/PZeroCount\n  nil\n    (zero-count [m]\n      0)\n  #?(:clj Number :cljs number)\n     (zero-count [m]\n       ;; not possible to remove boxing warning, m may be any numeric type\n       (if (zero? m) 1 0))\n  #?(:clj Object :cljs object)\n     (zero-count [m]\n       ;; not possible to remove boxing warning, m may be any numeric type\n       (mp/element-reduce m (fn [acc e] (if (zero? e) (inc acc) acc)) 0)))\n\n\n(extend-protocol mp/PMutableMatrixConstruction\n  nil\n    (mutable-matrix [m]\n      (wrap/wrap-scalar m))\n  #?(:clj Number :cljs number)\n    (mutable-matrix [m]\n      (wrap/wrap-scalar m))\n  #?(:clj Object :cljs object)\n    (mutable-matrix [m]\n      (construct-mutable-matrix m)))\n\n(extend-protocol mp/PMutableCoercion\n  nil\n    (ensure-mutable [m]\n      (wrap/wrap-scalar m))\n  #?(:clj Number :cljs number)\n    (ensure-mutable [m]\n      (wrap/wrap-scalar m))\n  #?(:clj Object :cljs object)\n    (ensure-mutable [m]\n      (if (mp/is-mutable? m)\n        m\n        (construct-mutable-matrix m))))\n\n(extend-protocol mp/PComputeMatrix\n  #?(:clj Object :cljs object)\n    (compute-matrix [m shape f]\n      (let [m (mp/new-matrix-nd m shape)]\n        (reduce (fn [m ix] (mp/set-nd m ix (apply f ix))) m (u/base-index-seq-for-shape shape)))))\n\n(extend-protocol mp/PDimensionInfo\n  nil\n    (dimensionality [m] 0)\n    (is-scalar? [m] true)\n    (is-vector? [m] false)\n    (get-shape [m] nil)\n    (dimension-count [m i] (error \"nil has zero dimensionality, cannot get count for dimension: \" i))\n  #?(:clj clojure.lang.Keyword\n     :cljs cljs.core.Keyword)\n    (dimensionality [m] 0)\n    (is-scalar? [m] true)\n    (is-vector? [m] false)\n    (get-shape [m] nil)\n    (dimension-count [m i] (error \"Keyword has zero dimensionality, cannot get count for dimension: \" i))\n  #?(:clj String :cljs string)\n    (dimensionality [m] 0)\n    (is-scalar? [m] true)\n    (is-vector? [m] false)\n    (get-shape [m] nil)\n    (dimension-count [m i] (error \"String has zero dimensionality, cannot get count for dimension: \" i))\n  #?(:clj Number :cljs number)\n    (dimensionality [m] 0)\n    (is-scalar? [m] true)\n    (is-vector? [m] false)\n    (get-shape [m] nil)\n    (dimension-count [m i] (error \"Number has zero dimensionality, cannot get count for dimension: \" i))\n  #?(:clj Object :cljs object)\n    (dimensionality [m]\n      (cond\n        #?(:clj (.isArray (.getClass m)) :cljs (= js/Array (type m)))\n          (let [n (long (count m))]\n            (if (> n 0) (inc (long (mp/dimensionality (nth m 0)))) 1))\n        :else 0))\n    (is-vector? [m]\n      (cond\n        #?(:clj (.isArray (.getClass m)) :cljs (= js/Array (type m)))\n          (let [n (long (count m))]\n            (or (== n 0) (== 0 (long (mp/dimensionality (nth m 0))))))\n        :else false))\n    (is-scalar? [m]\n      (cond\n        #?(:clj (.isArray (.getClass m)) :cljs (= js/Array (type m))) false ;; Java arrays are core.matrix arrays\n        :else true)) ;; assume objects are scalars unless told otherwise\n    (get-shape [m]\n      (cond\n        #?(:clj (.isArray (.getClass m)) :cljs (= js/Array (type m)))\n          (let [n (count m)]\n            (if (== n 0) [0] (cons n (mp/get-shape (nth m 0)))))\n        :else nil))\n    (dimension-count [m i]\n      (let [i (long i)]\n        (cond\n          #?(:clj (.isArray (.getClass m)) :cljs (= js/Array (type m)))\n            (if (== i 0) (count m) (mp/dimension-count (nth m 0) (dec i)))\n          (== 0 i)\n            (count m)\n          :else (error \"Can't determine count of dimension \" i \" on Object: \" (#?(:clj class :cljs type) m)))))\n\n#?@(:cljs\n     [cljs.core/List\n      (dimensionality [m] (inc (mp/dimensionality (first m))))\n      (is-vector? [m] (== 0 (mp/dimensionality (first m))))\n      (is-scalar? [m] false)\n      (get-shape [m] (cons (count m) (mp/get-shape (first m))))\n      (dimension-count [m x]\n                       (if (== x 0)\n                         (count m)\n                         (mp/dimension-count (first m) (dec x))))\n\n      cljs.core/LazySeq\n      (dimensionality [m] (inc (mp/dimensionality (first m))))\n      (is-vector? [m] (== 0 (mp/dimensionality (first m))))\n      (is-scalar? [m] false)\n      (get-shape [m] (cons (count m) (mp/get-shape (first m))))\n      (dimension-count [m x]\n                       (if (== x 0)\n                         (count m)\n                         (mp/dimension-count (first m) (dec x))))\n\n      cljs.core/IndexedSeq\n      (dimensionality [m] (inc (mp/dimensionality (first m))))\n      (is-vector? [m] (== 0 (mp/dimensionality (first m))))\n      (is-scalar? [m] false)\n      (get-shape [m] (cons (count m) (mp/get-shape (first m))))\n      (dimension-count [m x]\n                       (if (== x 0)\n                         (count m)\n                         (mp/dimension-count (first m) (dec x))))\n\n      cljs.core/Cons\n      (dimensionality [m] (inc (mp/dimensionality (first m))))\n      (is-vector? [m] (== 0 (mp/dimensionality (first m))))\n      (is-scalar? [m] false)\n      (get-shape [m] (cons (count m) (mp/get-shape (first m))))\n      (dimension-count [m x]\n                       (if (== x 0)\n                         (count m)\n                         (mp/dimension-count (first m) (dec x))))\n\n      cljs.core/Range\n      (dimensionality [m] (inc (mp/dimensionality (first m))))\n      (is-vector? [m] (== 0 (mp/dimensionality (first m))))\n      (is-scalar? [m] false)\n      (get-shape [m] (cons (count m) (mp/get-shape (first m))))\n      (dimension-count [m x]\n                       (if (== x 0)\n                         (count m)\n                         (mp/dimension-count (first m) (dec x))))\n      ]))\n\n(extend-protocol mp/PSameShape\n  nil\n    (same-shape? [a b]\n      (== 0 (long (mp/dimensionality b))))\n  #?(:clj String :cljs string)\n    (same-shape? [a b]\n      (== 0 (long (mp/dimensionality b))))\n  #?(:clj Number :cljs number)\n    (same-shape? [a b]\n      (== 0 (long (mp/dimensionality b))))\n  #?(:clj Object :cljs object)\n    (same-shape? [a b]\n      (u/same-shape-object? (mp/get-shape a) (mp/get-shape b))))\n\n;; generic versions of matrix ops\n(extend-protocol mp/PMatrixOps\n  nil\n    (trace [m] m)\n  #?(:clj Number :cljs number)\n    (trace [m] m)\n    (inverse [m] (/ m))\n  #?(:clj Object :cljs object)\n    (trace [m]\n      (when-not (== 2 (long (mp/dimensionality m))) (error \"Trace requires a 2D matrix\"))\n      (let [rc (long (mp/dimension-count m 0))\n            cc (long (mp/dimension-count m 1))\n            dims (Math/min rc cc)]\n        (loop [i 0 res 0.0]\n          (if (>= i dims)\n            res\n            (recur (inc i) (+ res (double (mp/get-2d m i i))))))))\n    (determinant [m]\n      (let [imp (or (imp/get-canonical-object :vectorz) (error \"(let Need to load an implementation which supports determinant, e.g. vectorz-clj\"))\n            m (mp/coerce-param imp m)]\n        (mp/determinant m)))\n    (inverse [m]\n      (let [imp (or (imp/get-canonical-object :vectorz) (error \"Need to load an implementation which supports inverse, e.g. vectorz-clj\"))\n            mm (mp/coerce-param imp m)]\n        (mp/coerce-param m (mp/inverse mm)))))\n\n(extend-protocol mp/PTranspose\n  nil\n    (transpose [m] m)\n  #?(:clj Number :cljs number)\n    (transpose [m] m)\n  #?(:clj Object :cljs object)\n    (transpose [m]\n      (mp/coerce-param\n       m\n       (let [dims (long (mp/dimensionality m))]\n         (case dims\n           0 m\n           1 m\n           2 (apply mapv vector (mp/convert-to-nested-vectors m))\n           (mp/transpose-dims m (reverse (range dims))))))))\n\n(extend-protocol mp/PTransposeDims\n  nil\n    (transpose-dims [m ordering] m)\n  #?(:clj Number :cljs number)\n    (transpose-dims [m ordering] m)\n  #?(:clj Object :cljs object)\n    (transpose-dims [m ordering]\n      (mp/transpose-dims (mp/convert-to-nested-vectors m) ordering)))\n\n(extend-protocol mp/PTransposeInPlace\n  #?(:clj Object :cljs object)\n    (transpose! [m]\n      (let [n (long (mp/dimension-count m 0))]\n        (when (not= n (long (mp/dimension-count m 1))) (error \"transpose! requires a quare matrix\"))\n        (dotimes [i n]\n          (dotimes [j i]\n            (let [t (mp/get-2d m i j)]\n              (mp/set-2d! m i j (mp/get-2d m j i))\n              (mp/set-2d! m j i t)))))\n      m))\n\n(extend-protocol mp/PRotate\n  nil\n    (rotate [m dim places] nil)\n  #?(:clj Number :cljs number)\n    (rotate [m dim places] m)\n  #?(:clj Object :cljs object)\n    (rotate [m dim places]\n      (let [dim (long dim)\n            places (long places)]\n        (cond\n          (<= (long (mp/dimensionality m)) 0)\n            m\n          (== 0 dim)\n            (let [ss (mp/get-major-slice-seq m)\n                  c (long (mp/dimension-count m 0))\n                  sh (long (if (pos? c) (long (mod places c)) 0))]\n              (if (== sh 0)\n                m\n                (vec (concat (take-last (- c sh) ss) (take sh ss)))))\n         :else\n           (mp/rotate (mp/convert-to-nested-vectors m) dim places)))))\n\n\n(extend-protocol mp/PRotateAll\n  nil\n    (rotate-all [m shifts] nil)\n  #?(:clj Number :cljs number)\n    (rotate-all [m shifts] m)\n  #?(:clj Object :cljs object)\n    (rotate-all [m shifts]\n      (reduce (fn [m [^long dim ^long shift]] (if (zero? shift) m (mp/rotate m dim shift)))\n         m\n         (map-indexed (fn [i v] [i v]) shifts))))\n\n(extend-protocol mp/PShift\n  #?(:clj Object :cljs object)\n    (shift [m dim shift]\n      (let [shift (long shift)\n            z (mp/generic-zero m)\n            c (long (mp/dimension-count m dim))\n            sh (vec (mp/get-shape m))]\n        (cond\n          (== shift 0) m\n          (>= shift c) (mp/broadcast-coerce m z)\n          (<= shift (- c)) (mp/broadcast-coerce m z)\n          (< shift 0) (mp/join-along\n                        (mp/broadcast (mp/construct-matrix m z) (assoc sh dim (- shift)))\n                        (mp/submatrix m (map vector\n                                             (vec (repeat (count sh) 0))\n                                             (assoc sh dim (+ c shift))))\n                        dim)\n          (> shift 0) (mp/join-along\n                        (mp/submatrix m (map vector\n                                             (assoc (vec (repeat (count sh) 0)) dim shift)\n                                             (assoc sh dim (- c shift))))\n                        (mp/broadcast (mp/construct-matrix m z) (assoc sh dim shift))\n                        dim)\n          :else (error \"Shouldn't be possible!!\"))))\n    (shift-all [m shifts]\n      (reduce (fn [m [dim ^long shift]] (if (zero? shift) m (mp/shift m dim shift)))\n         m\n         (map-indexed (fn [i v] [i v]) shifts))))\n\n\n(extend-protocol mp/POrder\n  nil\n    (order\n      ([m indices] (error \"Can't reorder a scalar nil\"))\n      ([m dim indices] (error \"Can't reorder a scalar nil\")))\n  #?(:clj Number :cljs number)\n    (order\n      ([m indices] (error \"Can't reorder a scalar number\"))\n      ([m dim indices] (error \"Can't reorder a scalar number\")))\n  #?(:clj Object :cljs object)\n    (order\n      ([m indices]\n        (let [mshape (vec (mp/get-shape m))\n              subshape (assoc m 0 1)\n              ss (map #(mp/broadcast (mp/get-major-slice m %) subshape) indices)]\n          (reduce #(mp/join %1 %2) ss)))\n      ([m dim indices]\n        (mp/order (mp/convert-to-nested-vectors m) dim indices))))\n\n(defn- output-rank\n  \"Outputs a vector containing the rank of array elements, given a sorted sequence of [index value] pairs and a length\"\n  ([pairs n]\n    (let [^objects dest (object-array n)]\n      (loop [i (long 0)\n             pairs (seq pairs)]\n        (when (< i n)\n          (aset dest (first (first pairs)) (Long/valueOf i))\n          (recur (inc i)\n                 (next pairs))))\n      (vec dest))))\n\n(extend-protocol mp/PIndexRank\n  #?(:clj Object :cljs object)\n    (index-rank\n      ([m]\n        (let [dims (long (mp/dimensionality m))]\n          (case dims\n            0 (error \"Can't get indexed rank of a scalar value\")\n            1 (let [n (long (mp/element-count m))]\n                (output-rank (sort-by second (map vector (range (mp/element-count m)) (mp/element-seq m))) n))\n            (mapv mp/index-rank (mp/get-major-slice-seq m)))))\n      ([m comp]\n        (let [dims (long (mp/dimensionality m))]\n          (case dims\n            0 (error \"Can't get indexed rank of a scalar value\")\n            1 (let [n (long (mp/element-count m))]\n                (output-rank (sort-by second comp (map vector (range (mp/element-count m)) (mp/element-seq m))) n))\n            (mapv #(mp/index-rank % comp) (mp/get-major-slice-seq m)))))))\n\n;; not possible to remove boxing warning, may be any numeric type\n(extend-protocol mp/PMatrixProducts\n  #?(:clj Number :cljs number)\n    (inner-product [m a]\n      (if (number? a)\n        (clojure.core/* m a)\n        (mp/pre-scale a m)))\n    (outer-product [m a]\n      (if (number? a)\n        (clojure.core/* m a)\n        (mp/pre-scale a m)))\n  #?(:clj Object :cljs object)\n    (inner-product [m a]\n      (cond\n        (mp/is-scalar? m)\n          (mp/pre-scale a m)\n        (mp/is-scalar? a)\n          (mp/scale m a)\n        (== 1 (long (mp/dimensionality m)))\n          (if (== 1 (long (mp/dimensionality a)))\n            (mp/element-sum (mp/element-multiply m a))\n            (reduce mp/matrix-add (map (fn [sl x] (mp/scale sl x))\n                                       (mp/get-major-slice-seq a)\n                                       (mp/get-major-slice-seq m)))) ;; TODO: implement with mutable accumulation\n        :else\n        (mp/construct-matrix (imp/get-canonical-object) (map #(mp/inner-product % a) (mp/get-major-slice-seq m)))))\n    (outer-product [m a]\n      (cond\n        (mp/is-scalar? m)\n          (mp/pre-scale a m)\n        :else\n        (mp/element-map (mp/convert-to-nested-vectors m) (fn [x] (mp/pre-scale a x)))\n        ;; convert to nested vectors first, this enables trick of extending dimensionality for each element with element-map\n        ;(mp/element-map (mp/convert-to-nested-vectors m) (fn [v] (mp/pre-scale a v)))\n        )))\n\n;; matrix multiply\n;; TODO: document returning NDArray\n(extend-protocol mp/PMatrixMultiply\n  #?(:clj Number :cljs number)\n    (element-multiply [m a]\n      (if (number? a)\n        (clojure.core/* m a)\n        (mp/pre-scale a m)))\n    (matrix-multiply [m a]\n      (cond\n        (number? a) (* m a)\n        (array? a) (mp/pre-scale a m)\n        :else (error \"Don't know how to multiply number with: \" (#?(:clj class :cljs type) a))))\n  #?(:clj Object :cljs object)\n    (matrix-multiply [m a]\n      (let [mdims (long (mp/dimensionality m))\n            adims (long (mp/dimensionality a))]\n        (cond\n         (== adims 0) (mp/scale m a)\n         (and (== mdims 1) (== adims 1)) (mp/vector-dot m a)\n         (and (== mdims 1) (== adims 2))\n           (let [[arows acols] (mp/get-shape a)]\n             (mp/reshape (mp/matrix-multiply (mp/reshape m [1 arows]) a)\n                         [acols]))\n         (and (== mdims 2) (== adims 1))\n           (let [mshape (mp/get-shape m)\n                 [mrows mcols] mshape\n                 acount (mp/element-count a)]\n             (when (not= mcols acount) (error \"Can't multiply matrix of shape: \" mshape \" with a vector of length \" acount))\n             (mp/reshape (mp/matrix-multiply m (mp/reshape a [mcols 1]))\n                         [mrows]))\n         (and (== mdims 2) (== adims 2))\n           (let [mutable (mp/is-mutable? m)\n                 [^long mrows ^long mcols] (mp/get-shape m)\n                 [^long arows ^long acols] (mp/get-shape a)\n                 new-m-type (if mutable m (imp/get-canonical-object :ndarray))\n                 new-m (mp/new-matrix new-m-type mrows acols)]\n             ;; TODO: optimize cache-locality (http://bit.ly/12FgFbl)\n             (c-for [i (long 0) (< i mrows) (inc i)\n                     j (long 0) (< j acols) (inc j)]\n               (mp/set-2d! new-m i j 0))\n             (c-for [i (long 0) (< i mrows) (inc i)\n                    j (long 0) (< j acols) (inc j)\n                    k (long 0) (< k mcols) (inc k)]\n               (mp/set-2d! new-m i j (+ (mp/get-2d new-m i j)\n                                        (* (mp/get-2d m i k)\n                                           (mp/get-2d a k j)))))\n             new-m))))\n    (element-multiply [m a]\n      (if (number? a)\n        (mp/scale m a)\n        (let [[m a] (mp/broadcast-compatible m a)]\n          (mp/element-map m clojure.core/* a)))))\n\n;; matrix multiply\n(extend-protocol mp/PMatrixMultiplyMutable\n  #?(:clj Number :cljs number)\n    (element-multiply! [m a]\n      (error \"Can't do mutable multiply on a scalar number\"))\n    (matrix-multiply! [m a]\n      (error \"Can't do mutable multiply on a scalar number\"))\n  #?(:clj Object :cljs object)\n    (element-multiply! [m a]\n      (mp/assign! m (mp/element-multiply m a)))\n    (matrix-multiply! [m a]\n      (mp/assign! m (mp/matrix-multiply m a))))\n\n(extend-protocol mp/PMatrixDivide\n  #?(:clj Number :cljs number)\n    (element-divide\n      ([m] (/ m))\n      ([m a] (mp/pre-scale (mp/element-divide a) m)))\n  #?(:clj Object :cljs object)\n    (element-divide\n      ([m]\n        (if (mp/get-shape m)\n          (mp/element-map m mp/element-divide)\n          (error \"Don't know how to take reciprocal of \" (type m))))\n      ([m a]\n        (mp/element-multiply m (mp/element-divide a)))))\n\n(extend-protocol mp/PMatrixDivideMutable\n  #?(:clj Number :cljs number)\n\t  (element-divide!\n\t    ([m] (error \"Can't do mutable divide on a scalar number\"))\n\t    ([m a] (error \"Can't do mutable divide on a scalar numer\")))\n  #?(:clj Object :cljs object)\n\t  (element-divide!\n\t    ([m] (mp/element-map! m /))\n\t    ([m a]\n\t       (let [[m a] (mp/broadcast-compatible m a)]\n\t         (mp/element-map! m / a)))))\n\n;; matrix element summation\n(extend-protocol mp/PSummable\n  #?(:clj Number :cljs number)\n    (element-sum [a] a)\n  #?(:clj Object :cljs object)\n    (element-sum [a]\n      (mp/element-reduce a (if (mp/numerical? a) + mp/matrix-add))))\n\n;; not possible to eliminate boxing warnings - needs to handle any numeric type\n(extend-protocol mp/PElementMinMax\n  #?(:clj Number :cljs number)\n    (element-min [m] m)\n    (element-max [m] m)\n    (element-clamp [m a b]\n      (if-not (<= a b)\n        (error \"min argument: \" a \" should be <= max argument: \" b)\n        (if (< m a) a (if (> m b) b m))))\n  #?(:clj Object :cljs object)\n    (element-min [m]\n      (mp/element-reduce m\n                       (fn [best v] (if (or (not best) (< v best)) v best))\n                       nil))\n    (element-max [m]\n      (mp/element-reduce m\n                       (fn [best v] (if (or (not best) (> v best)) v best))\n                       nil))\n    (element-clamp [m a b]\n      (if-not (<= a b)\n        (error \"min argument: \" a \" should be <= max argument: \" b)\n        (mp/element-map m #(if (< %1 a) a (if (> %1 b) b %1))))))\n\n(extend-protocol mp/PCompare\n  #?(:clj Number :cljs number)\n    (element-compare [a b]\n      (if (number? b)\n        (long (mops/signum (- a b)))\n        (mp/signum (mp/matrix-sub a b))))\n    (element-if [m a b]\n      (let [[a b] (mp/broadcast-same-shape a b)]\n        (if (> m 0) a b)))\n    (element-lt [m a]\n      (if (number? a)\n        (if (< m a) 1 0)\n        (mp/element-gt a m)))\n    (element-le [m a]\n      (if (number? a)\n        (if (<= m a) 1 0)\n        (mp/element-ge a m)))\n    (element-gt [m a]\n      (if (number? a)\n        (if (> m a) 1 0)\n        (mp/element-lt a m)))\n    (element-ge [m a]\n      (if (number? a)\n        (if (>= m a) 1 0)\n        (mp/element-le a m)))\n    (element-ne [m a]\n      (if (number? a)\n        (if (not= m a) 1 0)\n        (mp/element-ne a m)))\n    (element-eq [m a]\n      (if (number? a)\n        (if (= m a) 1 0)\n        (mp/element-eq a m)))\n  #?(:clj Object :cljs object)\n    (element-compare [a b]\n      (mp/element-map (mp/matrix-sub a b) #(long (mops/signum %))))\n    (element-if [m a b]\n      (cond\n        (and (number? a) (number? b))\n          (mp/element-map m #(if (> %1 0) a b))\n        (number? a)\n          (mp/element-map m #(if (> %1 0) a %2) b)\n        (number? b)\n          (mp/element-map m #(if (> %1 0) %2 b) a)\n        :else (mp/element-map m #(if (> %1 0) %2 %3) a [b])) ;; note we need [b] because this is a `more` argument\n      )\n    (element-lt [m a]\n      (if (number? a)\n        (mp/element-map m #(if (< %1 a) 1 0))\n        (mp/element-map m #(if (< %1 %2) 1 0) a)))\n    (element-le [m a]\n      (if (number? a)\n        (mp/element-map m #(if (<= %1 a) 1 0))\n        (mp/element-map m #(if (<= %1 %2) 1 0) a)))\n    (element-gt [m a]\n      (if (number? a)\n        (mp/element-map m #(if (> %1 a) 1 0))\n        (mp/element-map m #(if (> %1 %2) 1 0) a)))\n    (element-ge [m a]\n      (if (number? a)\n        (mp/element-map m #(if (>= %1 a) 1 0))\n        (mp/element-map m #(if (>= %1 %2) 1 0) a)))\n    (element-ne [m a]\n      (if (number? a)\n        (mp/element-map m #(if-not (== %1 a) 1 0))\n        (mp/element-map m #(if-not (== %1 %2) 1 0) a)))\n    (element-eq [m a]\n      (if (number? a)\n        (mp/element-map m #(if (== %1 a) 1 0))\n        (mp/element-map m #(if (== %1 %2) 1 0) a))))\n\n;; add-product operations\n(extend-protocol mp/PAddProduct\n  #?(:clj Number :cljs number)\n    (add-product [m a b]\n      (mp/matrix-add (mp/element-multiply a b) m ))\n  #?(:clj Object :cljs object)\n    (add-product [m a b]\n      (mp/matrix-add m (mp/element-multiply a b))))\n\n(extend-protocol mp/PAddProductMutable\n  #?(:clj Number :cljs number)\n    (add-product! [m a b]\n      (error \"Numbers are not mutable\"))\n  #?(:clj Object :cljs object)\n    (add-product! [m a b]\n      (mp/matrix-add! m (mp/element-multiply a b))))\n\n(extend-protocol mp/PAddScaled\n  #?(:clj Number :cljs number)\n    (add-scaled [m a factor]\n      (mp/matrix-add (mp/scale a factor) m))\n  #?(:clj Object :cljs object)\n    (add-scaled [m a factor]\n      (mp/matrix-add m (mp/scale a factor))))\n\n(extend-protocol mp/PAddScaledMutable\n  #?(:clj Number :cljs number)\n    (add-scaled! [m a factor]\n      (error \"Numbers are not mutable\"))\n  #?(:clj Object :cljs object)\n    (add-scaled! [m a factor]\n      (mp/matrix-add! m (mp/scale a factor))))\n\n(extend-protocol mp/PAddScaledProduct\n  #?(:clj Number :cljs number)\n    (add-scaled-product [m a b factor]\n      (mp/matrix-add (mp/scale (mp/element-multiply a b) factor) m))\n  #?(:clj Object :cljs object)\n    (add-scaled-product [m a b factor]\n      (mp/matrix-add m (mp/scale (mp/element-multiply a b) factor))))\n\n(extend-protocol mp/PAddScaledProductMutable\n  #?(:clj Number :cljs number)\n    (add-scaled-product! [m a b factor]\n      (error \"Numbers are not mutable\"))\n  #?(:clj Object :cljs object)\n    (add-scaled-product! [m a b factor]\n      (mp/matrix-add! m (mp/scale (mp/element-multiply a b) factor))))\n\n;; not possible to eliminate boxing warnings - needs to handle any numeric type\n(extend-protocol mp/PScaleAdd\n  #?(:clj Object :cljs object)\n    (scale-add! [m1 a m2 b constant]\n      (mp/element-multiply! m1 a)\n      (when-not (and (number? b) (zero? b)) (mp/add-product! m1 m2 b))\n      (when-not (and (number? constant) (zero? constant)) (mp/matrix-add! m1 constant))\n      m1))\n\n(extend-protocol mp/PScaleAdd2\n  #?(:clj Object :cljs object)\n    (scale-add [m1 a m2 b constant]\n      (let [r (mp/matrix-add (mp/scale m1 a) (mp/scale m2 b))]\n        (if (== 0.0 constant)\n          r\n          (mp/matrix-add r constant)))))\n\n(extend-protocol mp/PLerp\n  #?(:clj Object :cljs object)\n    (lerp [a b factor]\n      (mp/scale-add a (- 1.0 (double factor)) b factor 0.0))\n    (lerp! [a b factor]\n      (mp/scale-add! a (- 1.0 (double factor)) b factor 0.0)))\n\n(extend-protocol mp/PAddInnerProductMutable\n  #?(:clj Object :cljs object)\n    (add-inner-product!\n      ([m a b]\n        (mp/matrix-add! m (mp/inner-product a b)))\n      ([m a b factor]\n        (mp/add-scaled! m (mp/inner-product a b) factor))))\n\n(extend-protocol mp/PAddOuterProductMutable\n  #?(:clj Object :cljs object)\n    (add-outer-product!\n      ([m a b]\n        (mp/matrix-add! m (mp/outer-product a b)))\n      ([m a b factor]\n        (mp/add-scaled! m (mp/outer-product a b) factor))))\n\n(extend-protocol mp/PSetInnerProductMutable\n  #?(:clj Object :cljs object)\n    (set-inner-product!\n      ([m a b]\n        (mp/assign! m (mp/inner-product a b)))\n      ([m a b factor]\n        (mp/assign! m (mp/inner-product a b))\n        (mp/scale! m factor))))\n\n;; type of matrix element\n;; the default is to assume any type is possible\n(extend-protocol mp/PTypeInfo\n  nil\n    (element-type [a]\n      #?(:clj Object :cljs js/Object))\n\n  #?(:clj Object :cljs object)\n    (element-type [a]\n      (if (native-array? a)\n        (.getComponentType (#?(:clj class :cljs type) a))\n        #?(:clj Object :cljs js/Object))))\n\n;; generic element values\n(extend-protocol mp/PGenericValues\n  #?(:clj Object :cljs object)\n    (generic-zero [m]\n      0)\n    (generic-one [m]\n      1)\n    (generic-value [m]\n      0))\n\n;; general transformation of a vector\n(extend-protocol mp/PVectorTransform\n  #?(:clj clojure.lang.IFn\n     :cljs cljs.core.IFn)\n    (vector-transform [m a]\n      (if\n        (vector? m) (mp/matrix-multiply m a)\n        (m a)))\n    (vector-transform! [m a]\n      (if\n        (vector? m) (mp/assign! a (mp/matrix-multiply m a))\n        (mp/assign! a (m a))))\n  #?(:clj Object :cljs object)\n    (vector-transform [m a]\n      (cond\n        (== 2 (long (mp/dimensionality m))) (mp/matrix-multiply m a)\n        :else (error \"Don't know how to transform using: \" (#?(:clj class :cljs type) m))))\n    (vector-transform! [m a]\n      (mp/assign! a (mp/vector-transform m a))))\n\n;; matrix scaling\n;; not possible to eliminate boxing warnings - needs to handle any numeric type\n(extend-protocol mp/PMatrixScaling\n  #?(:clj Number :cljs number)\n    (scale [m a]\n      (if (number? a)\n        (* m a)\n        (mp/pre-scale a m)))\n    (pre-scale [m a]\n      (if (number? a)\n        (* a m)\n        (mp/scale a m)))\n  #?(:clj Object :cljs object)\n    (scale [m a]\n      (mp/element-map m #(* % a)))\n    (pre-scale [m a]\n      (mp/element-map m (partial * a))))\n\n;; not possible to eliminate boxing warnings - needs to handle any numeric type\n(extend-protocol mp/PMatrixMutableScaling\n  #?(:clj Number :cljs number)\n    (scale! [m a]\n      (error \"Can't scale! a numeric value: \" m))\n    (pre-scale! [m a]\n      (error \"Can't pre-scale! a numeric value: \" m))\n  #?(:clj Object :cljs object)\n    (scale! [m a]\n      (mp/element-map! m #(* % a))\n      m)\n    (pre-scale! [m a]\n      (mp/element-map! m (partial * a))\n      m))\n\n;; not possible to eliminate boxing warnings - needs to handle any numeric type\n(extend-protocol mp/PMatrixAdd\n  ;; matrix add for scalars\n  #?(:clj Number :cljs number)\n    (matrix-add [m a]\n      (if (number? a)\n        (+ m a)\n        (mp/matrix-add a m)))\n    (matrix-sub [m a]\n      (if (number? a)\n        (- m a)\n        (mp/negate (mp/matrix-sub a m))))\n  ;; default impelementation - assume we can use emap?\n  #?(:clj Object :cljs object)\n    (matrix-add [m a]\n      (let [[m a] (mp/broadcast-compatible m a)]\n        (mp/element-map m clojure.core/+ a)))\n    (matrix-sub [m a]\n      (let [[m a] (mp/broadcast-compatible m a)]\n        (mp/element-map m clojure.core/- a))))\n\n\n\n(extend-protocol mp/PMatrixAddMutable\n  ;; matrix add for scalars\n  #?(:clj Number :cljs number)\n    (matrix-add! [m a]\n      (error \"Can't do mutable add! on a scalar number\"))\n    (matrix-sub! [m a]\n      (error \"Can't do mutable sub! on a scalar number\"))\n  ;; default impelementation - assume we can use emap?\n  #?(:clj Object :cljs object)\n    (matrix-add! [m a]\n      (mp/element-map! m clojure.core/+ a))\n    (matrix-sub! [m a]\n      (mp/element-map! m clojure.core/- a)))\n\n(extend-protocol mp/PNegation\n  nil\n    (negate [m]\n      (error \"Can't negate nil!\"))\n  #?(:clj Number :cljs number)\n    (negate [m]\n      (- m))\n  #?(:clj Object :cljs object)\n    (negate [m]\n      (mp/scale m -1.0)))\n\n;; equality checking\n;; not possible to eliminate boxing warnings - needs to handle any numeric type\n(extend-protocol mp/PMatrixEquality\n  nil\n    (matrix-equals [a b]\n      (error \"nil is not a valid numerical value in equality testing\"))\n  #?(:clj Number :cljs number)\n    (matrix-equals [a b]\n      (cond\n        (number? b) (== a b)\n        (== 0 (mp/dimensionality b)) (mp/matrix-equals b a) ;; defer to other implementation\n        :else false))\n  #?(:clj Object :cljs object)\n    (matrix-equals [a b]\n      (cond\n        (identical? a b) true\n        (mp/same-shape? a b)\n        (if (== 0 (long (mp/dimensionality a)))\n          (== (mp/get-0d a) (scalar-coerce b))\n          (not-any? false? (map == (mp/element-seq a) (mp/element-seq b))))\n        :else false)))\n\n(extend-protocol mp/PValueEquality\n  nil\n    (value-equals [a b]\n      (or\n        (nil? b)\n        (and\n          (== 0 (long (mp/dimensionality b)))\n          (nil? (mp/get-0d b)))))\n  #?(:clj Number :cljs number)\n  (value-equals [a b]\n    (and\n      (== 0 (long (mp/dimensionality b)))\n      (== a (mp/get-0d b))))\n  #?(:clj Object :cljs object)\n    (value-equals [a b]\n      (and\n        (mp/same-shape? a b)\n        (every? true? (map = (mp/element-seq a) (mp/element-seq b))))))\n\n;; equality checking\n(extend-protocol mp/PMatrixEqualityEpsilon\n  nil\n    (matrix-equals-epsilon [a b eps]\n      (error \"nil is not a valid numerical value in equality testing\"))\n  #?(:clj Number :cljs number)\n    (matrix-equals-epsilon [a b eps]\n      (cond\n        (number? b) (eps== a b eps)\n        (== 0 (long (mp/dimensionality b))) (eps== a (mp/get-0d b) eps)\n        :else false))\n  #?(:clj Object :cljs object)\n    (matrix-equals-epsilon [a b eps]\n      (cond\n        (identical? a b) true\n        (mp/same-shape? a b)\n          (let [eps (double eps)]\n            (every? #(<= (Math/abs (double %)) eps) (map - (mp/element-seq a) (mp/element-seq b))))\n        :else false)))\n\n(extend-protocol mp/PDoubleArrayOutput\n  #?(:clj Number :cljs number)\n    (to-double-array [m]\n      (let [arr (double-array 1)] (aset arr 0 (double m)) arr))\n    (as-double-array [m] nil)\n  #?(:clj Object :cljs object)\n    (to-double-array [m]\n      (double-array (mp/element-seq m)))\n    (as-double-array [m] nil))\n\n(extend-protocol mp/PObjectArrayOutput\n  nil\n    (to-object-array [m]\n      (let [arr (object-array 1)] arr))\n    (as-object-array [m] nil)\n  #?(:clj Number :cljs number)\n    (to-object-array [m]\n      (let [arr (object-array 1)] (aset arr 0 m) arr))\n    (as-object-array [m] nil)\n  #?(:clj Object :cljs object)\n    (to-object-array [m]\n      (object-array (mp/element-seq m)))\n    (as-object-array [m] nil))\n\n;; row operations\n(extend-protocol mp/PRowOperations\n  #?(:clj Object :cljs object)\n    (swap-rows [m i j]\n      (mp/swap-rows (mp/convert-to-nested-vectors m) i j))\n    (multiply-row [m i k]\n      (mp/multiply-row (mp/convert-to-nested-vectors m) i k))\n    (add-row [m i j k]\n      (mp/add-row (mp/convert-to-nested-vectors m) i j k)))\n\n(extend-protocol mp/PRowSetting\n  #?(:clj Object :cljs object)\n    (set-row [m i row]\n      (let [svec (vec (mp/get-major-slice-seq m))\n            row (mp/broadcast-like (svec 0) row)]\n        (mp/coerce-param m (assoc svec i row))))\n    (set-row! [m i row]\n      (let [sl (mp/get-major-slice-view m i)\n            row (mp/broadcast-like sl row)]\n        (mp/assign! sl row)\n        m)))\n\n(extend-protocol mp/PColumnSetting\n  #?(:clj Object :cljs object)\n  (set-column [m i column]\n    (let [scol (mp/get-column m 0)\n          column (mp/broadcast-like scol column)\n          indices (range (mp/dimension-count column 0))\n          new-m (reduce (fn [acc idx]\n                          (mp/set-2d acc idx i (mp/get-1d column idx)))\n                        m indices)]\n      (mp/coerce-param m new-m)))\n  (set-column! [m i column]\n    (let [scol (mp/get-column m 0)\n          column (mp/broadcast-like scol column)]\n      (dotimes [j (mp/dimension-count column 0)]\n        (mp/set-2d! m j i (mp/get-1d column j))))))\n\n;; slice-map\n(extend-protocol mp/PSliceMap\n  #?(:clj Object :cljs object)\n  (slice-map\n    ([m f]\n      (construct-matrix m (mapv f (mp/get-major-slice-seq m))))\n    ([m f a]\n      (construct-matrix m (mapv f\n                                (mp/get-major-slice-seq m)\n                                (mp/get-major-slice-seq a))))\n    ([m f a more]\n      (construct-matrix m (apply mapv f\n                                 (mp/get-major-slice-seq m)\n                                 (mp/get-major-slice-seq a)\n                                 (map mp/get-major-slice-seq more))))))\n\n;; slice-map\n(extend-protocol mp/PFilterSlices\n  #?(:clj Object :cljs object)\n  (filter-slices [m f]\n    (let [slcs (filterv f (mp/get-major-slice-seq m))]\n      ;; check for no slices, in which case we must return nil\n      (if (seq slcs) slcs nil))))\n\n(extend-protocol mp/PAddEmap\n  #?(:clj Object :cljs object)\n  (add-emap!\n    ([dest f a]\n      (mp/matrix-add! dest (mp/element-map a f)))\n    ([dest f a b]\n      (mp/matrix-add! dest (mp/element-map a f b)))\n    ([dest f a b more]\n      (mp/matrix-add! dest (mp/element-map a f b more)))))\n\n(extend-protocol mp/PSetEmap\n  #?(:clj Object :cljs object)\n  (set-emap!\n    ([dest f a]\n      (mp/assign! dest (mp/element-map a f)))\n    ([dest f a b]\n      (mp/assign! dest (mp/element-map a f b)))\n    ([dest f a b more]\n      (mp/assign! dest (mp/element-map a f b more)))))\n\n;; functional operations\n(extend-protocol mp/PFunctionalOperations\n  #?(:clj Number :cljs number)\n    (element-seq [m]\n      (vector m))\n    (element-map\n      ([m f]\n        (f m))\n      ([m f a]\n        (mp/element-map a #(f m %)))\n      ([m f a more]\n        (if-let [moremore (next more)]\n          (mp/element-map a #(apply f m %1 %2 %&) (first more) moremore)\n          (mp/element-map a #(f m %1 %2) (first more)))))\n    (element-map!\n      ([m f]\n        (error \"java.lang.Number instance is not mutable!\"))\n      ([m f a]\n        (error \"java.lang.Number instance is not mutable!\"))\n      ([m f a more]\n        (error \"java.lang.Number instance is not mutable!\")))\n    (element-reduce\n      ([m f]\n        m)\n      ([m f init]\n        (f init m)))\n  #?(:clj Object :cljs object)\n    (element-seq [m]\n      (let [c (#?(:clj #?(:clj class :cljs type) :cljs type) m)\n            dims (long (mp/dimensionality m))]\n        (cond\n          (> dims 1) (mapcat mp/element-seq (mp/get-major-slice-seq m))\n          (seq? m) m\n          (== 0 dims)\n            (vector (mp/get-0d m))\n #?@(:clj [(and (.isArray c) (.isPrimitive (.getComponentType c))) m]\n    :cljs [(= js/Array c) m])\n          (== 1 dims)\n            (mp/convert-to-nested-vectors m)\n          (array? m)\n            (mapcat mp/element-seq (mp/get-major-slice-seq m))\n          :else (error \"Don't know how to create element-seq from: \" m))))\n    (element-map\n      ([m f]\n        (construct-matrix m (mapmatrix f m)))\n      ([m f a]\n        (let [[m a] (mp/broadcast-same-shape m a)]\n          (construct-matrix m (mapmatrix f m a))))\n      ([m f a more]\n        (let [arrays (cons m (cons a more))\n              shapes (map mp/get-shape arrays)\n              sh (or (mp/common-shape shapes) (error \"Attempt to do element map with incompatible shapes: \" (mapv mp/get-shape arrays)))\n              arrays (map #(mp/broadcast % sh) arrays)]\n          (construct-matrix m (apply mapmatrix f arrays)))))\n\n    (element-map!\n      ([m f]\n        (mp/assign! m (mp/element-map m f)))\n      ([m f a]\n        (mp/assign! m (mp/element-map m f a)))\n      ([m f a more]\n        (mp/assign! m (mp/element-map m f a more))))\n    (element-reduce\n      ([m f]\n        (reduce f (mp/element-seq m)))\n      ([m f init]\n        (reduce f init (mp/element-seq m))))\n  nil\n    (element-seq [m] '(nil))\n    (element-map\n      ([m f] (f nil))\n      ([m f a] (f nil a))\n      ([m f a more] (apply f nil a more)))\n    (element-map!\n      ([m f] (error \"Can't do element-map! on nil\"))\n      ([m f a] (error \"Can't do element-map! on nil\"))\n      ([m f a more] (error \"Can't do element-map! on nil\")))\n    (element-reduce\n      ([m f] nil)\n      ([m f init] (f init nil)))\n\n#?@(:cljs\n  [cljs.core/List\n    (element-seq [m]\n     (cond\n        (== 0 (count m))\n          nil\n        (>= (long (mp/dimensionality (nth m 0))) 1)\n          ;; we are a 2D+ array, so be conservative and create a concatenated sequence\n          (mapcat mp/element-seq m)\n        :else\n          ;; we are a 1D vector, so already a valid seqable result for element-seq\n          m))])\n    )\n\n(defn- cart [colls]\n  (if (empty? colls)\n    [[]]\n    (for [x    (first colls)\n          more (cart (rest colls))]\n      (cons x more))))\n\n(defn- indices-seq [m]\n  (cart (map range (mp/get-shape m))))\n\n(extend-protocol mp/PMapIndexed\n  #?(:clj Number :cljs number)\n    (element-map-indexed\n      ([m f]\n        (f [] m))\n      ([m f a]\n        (mp/element-map a #(f [] m %)))\n      ([m f a more]\n        (if-let [moremore (next more)]\n          (mp/element-map a #(apply f [] m %1 %2 %&) (first more) moremore)\n          (mp/element-map a #(f [] m %1 %2) (first more)))))\n    (element-map-indexed!\n      ([m f]\n        (error \"java.lang.Number instance is not mutable!\"))\n      ([m f a]\n        (error \"java.lang.Number instance is not mutable!\"))\n      ([m f a more]\n        (error \"java.lang.Number instance is not mutable!\")))\n  #?(:clj Object :cljs object)\n    (element-map-indexed\n      ([m f]\n        (if (== 0 (long (mp/dimensionality m)))\n          (f [] (mp/get-0d m)) ;; handle case of single element\n          (let [s (map f (indices-seq m) (mp/element-seq m))]\n            (mp/reshape (mp/coerce-param m s)\n                        (mp/get-shape m)))))\n      ([m f a]\n        (if (== 0 (long (mp/dimensionality m)))\n          (let [v (mp/get-0d m)]\n            (mp/element-map-indexed a #(f %1 v %2)))\n          (let [[m a] (mp/broadcast-compatible m a)\n                s (map f (indices-seq m) (mp/element-seq m) (mp/element-seq a))]\n            (mp/reshape (mp/coerce-param m s) ;; TODO: faster construction method?\n                        (mp/get-shape m)))))\n      ([m f a more]\n        (let [s (map f (mp/element-seq m) (mp/element-seq a))\n              s (apply map f (list* (indices-seq m)\n                                    (mp/element-seq m)\n                                    (mp/element-seq a)\n                                    (map mp/element-seq more)))]\n          (mp/reshape (mp/coerce-param m s)\n                      (mp/get-shape m)))))\n    (element-map-indexed!\n      ([m f]\n        (mp/assign! m (mp/element-map-indexed m f)))\n      ([m f a]\n        (mp/assign! m (mp/element-map-indexed m f a)))\n      ([m f a more]\n        (mp/assign! m (mp/element-map-indexed m f a more))))\n  nil\n    (element-map-indexed\n      ([m f] (f [] nil))\n      ([m f a] (f [] nil a))\n      ([m f a more] (apply f [] nil a more)))\n    (element-map-indexed!\n      ([m f] (error \"Can't do element-map-indexed! on nil\"))\n      ([m f a] (error \"Can't do element-map-indexed! on nil\"))\n      ([m f a more] (error \"Can't do element-map-indexed! on nil\"))))\n\n(extend-protocol mp/PElementCount\n  nil (element-count [m] 1)\n  #?(:clj Number :cljs number) (element-count [m] 1)\n  #?(:clj Object :cljs object)\n    (element-count [m]\n      (calc-element-count m)))\n\n(extend-protocol mp/PValidateShape\n  nil\n    (validate-shape \n      ([m] nil)\n      ([m shape] (when-not (nil? shape) (error \"Shape validation failed, was scalar but expected: \" shape))))\n  #?(:clj Object :cljs object)\n    (validate-shape \n      ([m]\n        (mp/validate-shape m (mp/get-shape m)))\n      ([m expected-shape]\n        (cond\n          (== 0 (long (mp/dimensionality m)))\n            (let [sh (mp/get-shape m)]\n              (if (nil? sh)\n                (when-not (nil? expected-shape)\n                  (error \"Shape validation failed, was scalar but expected: \" expected-shape))\n                (if (= (vec sh) (vec expected-shape)) \n                  sh \n                  (error \"Shape validation failed, was \" sh \" but expected: \" expected-shape)))\n              )\n          :else\n            (let [sh (mp/get-shape m)\n                  ss (mp/get-major-slice-seq m)\n                  efirst (or (first expected-shape) (error \"Shape validation failed, was \" sh \" but expected: \" expected-shape))\n                  enext (next expected-shape) \n                  shapes (mapv #(mp/validate-shape % enext) ss)]\n              (if (apply = enext shapes)\n                (vec (cons (mp/dimension-count m 0) (first shapes)))\n                (error \"Inconsistent shapes for sub arrays in \" (#?(:clj class :cljs type) m))))))))\n\n(extend-protocol mp/PMatrixSlices\n  #?(:clj Object :cljs object)\n    (get-row [m i]\n      (if (native-array? m)\n        (nth m i)\n        (mp/get-major-slice m i)))\n    (get-column [m i]\n      (mp/get-slice m 1 i))\n    (get-major-slice [m i]\n      (cond\n        (native-array? m) (nth m i)\n        (== 1 (long (mp/dimensionality m))) (mp/get-1d m i)\n        :else (clojure.core.matrix.impl.wrappers/wrap-slice m i)))\n    (get-slice [m dimension i]\n      (let [ldimension (long dimension)]\n        (cond\n          (== 0 ldimension) (mp/get-major-slice m i)\n          :else (mp/get-slice (mp/convert-to-nested-vectors m) dimension i)))))\n\n(extend-protocol mp/PBLASBase\n  #?(:clj Object :cljs object)\n  (gemm! [c trans-a? trans-b? alpha a b beta]\n    (let [a (if trans-a? (mp/transpose a) a)\n          b (if trans-b? (mp/transpose b) b)]\n      (if-not (== 1.0 (double beta)) (mp/scale! c beta))\n      (mp/add-inner-product! c a b alpha)))\n  (gemv! [c trans-a? alpha a b beta]\n    (let [a (if trans-a? (mp/transpose a) a)]\n      (if-not (== 1.0 (double beta)) (mp/scale! c beta))\n      (mp/add-inner-product! c a b alpha))))\n\n(extend-protocol mp/PMatrixColumns\n  #?(:clj Object :cljs object)\n  (get-columns [m]\n    (case (long (mp/dimensionality m))\n      0 (error \"Can't get columns of a 0-dimensional object\")\n      1 (error \"Can't get columns of a 1-dimensional object\")\n      2 (vec (mp/get-slice-seq m 1))\n      (vec (mapcat mp/get-columns (mp/get-major-slice-seq m))))))\n\n(extend-protocol mp/PMatrixRows\n  #?(:clj Object :cljs object)\n  (get-rows [m]\n    (case (long (mp/dimensionality m))\n      0 (error \"Can't get rows of a 0-dimensional object\")\n      1 (error \"Can't get rows of a 1-dimensional object\")\n      2 (vec (mp/get-major-slice-seq m))\n      (vec (mapcat mp/get-rows (mp/get-major-slice-seq m))))))\n\n(extend-protocol mp/PSliceView\n  #?(:clj Object :cljs object)\n    ;; default implementation uses a lightweight wrapper object\n    (get-major-slice-view [m i]\n      (cond\n        (native-array? m)\n          (let [ss (nth m i)]\n            (if (array? ss)\n              ss\n              (clojure.core.matrix.impl.wrappers/wrap-slice m i)))\n        :else (clojure.core.matrix.impl.wrappers/wrap-slice m i))))\n\n(extend-protocol mp/PSliceView2\n  #?(:clj Object :cljs object)\n    (get-slice-view [m dim i]\n      (if (zero? dim)\n        (mp/get-major-slice-view m i)\n        (mp/get-slice-view (clojure.core.matrix.impl.wrappers/wrap-nd m) dim i))))\n\n(extend-protocol mp/PSliceSeq\n  #?(:clj Object :cljs object)\n    (get-major-slice-seq [m]\n      (let [dims (long (mp/dimensionality m))]\n        (cond\n          (<= dims 0) (error \"Can't get slices on [\" dims \"]-dimensional object\")\n          #?(:clj (.isArray (.getClass m)) :cljs (= js/Array (type m))) (seq m)\n          (== dims 1) (for [i (range (mp/dimension-count m 0))] (mp/get-1d m i))\n          :else (map #(mp/get-major-slice m %) (range (mp/dimension-count m 0)))))))\n\n(extend-protocol mp/PSliceSeq2\n  #?(:clj Object :cljs object)\n    (get-slice-seq [m dimension]\n      (let [ldimension (long dimension)]\n        (cond\n          (== ldimension 0) (mp/get-major-slice-seq m)\n          (< ldimension 0) (error \"Can't get slices of a negative dimension: \" dimension)\n          :else (map #(mp/get-slice m dimension %) (range (mp/dimension-count m dimension)))))))\n\n(extend-protocol mp/PSliceViewSeq\n  #?(:clj Object :cljs object)\n    (get-major-slice-view-seq [m]\n      (let [n (mp/dimension-count m 0)]\n        (for [i (range n)]\n          (mp/get-major-slice-view m i)))))\n\n(extend-protocol mp/PSliceJoin\n  nil\n    (join [m a]\n      (error \"Can't join an array to a nil value!\"))\n  #?(:clj Number :cljs number)\n    (join [m a]\n      (error \"Can't join an array to a scalar number!\"))\n  #?(:clj Object :cljs object)\n    (join [m a]\n      (let [dims (long (mp/dimensionality m))\n            adims (long (mp/dimensionality a))]\n        (cond\n          (== dims 0)\n            (error \"Can't join to a 0-dimensional array!\")\n          (== dims adims)\n            (mp/coerce-param m (concat (mp/get-major-slice-seq m) (mp/get-major-slice-seq a)))\n          (== dims (inc adims))\n            (mp/coerce-param m (concat (mp/get-major-slice-seq m) [a]))\n          :else\n            (error \"Joining with array of incompatible size\")))))\n\n(extend-protocol mp/PSliceJoinAlong\n  nil\n  (join-along [m a dim]\n    (error \"Can't join an array to a nil value!\"))\n  #?(:clj Number :cljs number)\n  (join-along [m a dim]\n    (error \"Can't join an array to a scalar number!\"))\n  #?(:clj Object :cljs object)\n  (join-along [m a dim]\n    (mp/coerce-param m\n      (let [dim (long dim)]\n        (cond\n          (== dim 0)\n            (mp/join m a)\n          :else\n            (let [ddim (dec dim)]\n              (mapv #(mp/join-along %1 %2 ddim)\n                   (mp/get-major-slice-seq m)\n                   (mp/get-major-slice-seq a))))))))\n\n(extend-protocol mp/PSubVector\n  nil\n    (subvector [m start length]\n      (error \"Can't take subvector of nil\"))\n  #?(:clj Number :cljs number)\n    (subvector [m start length]\n      (error \"Can't take subvector of a scalar number\"))\n  #?(:clj Object :cljs object)\n    (subvector [m start length]\n      (mp/subvector (wrap/wrap-nd m) start length)))\n\n(extend-protocol mp/PSubMatrix\n  nil\n    (submatrix [m index-ranges]\n      (if (seq index-ranges)\n        (error \"Can't take partial submatrix of nil\")\n        m))\n  #?(:clj Number :cljs number)\n    (submatrix [m index-ranges]\n      (if (seq index-ranges)\n        (error \"Can't take partial submatrix of a scalar number\")\n        m))\n  #?(:clj Object :cljs object)\n    (submatrix [m index-ranges]\n      (wrap/wrap-submatrix m index-ranges)))\n\n(extend-protocol mp/PBroadcast\n  nil\n    (broadcast [m new-shape]\n      (wrap/wrap-broadcast m new-shape))\n; TODO: efficient way to use current implementation?\n;  Number\n;    (broadcast [m new-shape]\n;      (if (seq new-shape)\n;        (mp/broadcast ())\n;        m))\n  #?(:cljs number)\n  #?(:cljs (broadcast [m new-shape]\n                      (wrap/wrap-broadcast m new-shape)))\n\n  #?(:clj Object :cljs object)\n    (broadcast [m new-shape]\n      (let [nshape new-shape\n            mshape (mp/get-shape m)\n            mdims (count mshape)\n            ndims (count nshape)]\n        (cond\n          (and (== mdims ndims) (u/same-shape-object? nshape mshape)) m\n          ;(and (> ndims mdims) (== mshape (drop (- ndims mdims) nshape)))\n          ;  (let [rep (nth nshape (- ndims mdims 1))]\n          ;    (mp/broadcast (vec (repeat rep m)) new-shape))\n          :else (wrap/wrap-broadcast m new-shape)))))\n\n(extend-protocol mp/PBroadcastLike\n  nil\n    (broadcast-like [m a]\n      (wrap/wrap-broadcast a (mp/get-shape m)))\n  #?(:clj Object :cljs object)\n    (broadcast-like [m a]\n      (let [sm (mp/get-shape m) sa (mp/get-shape a)]\n        (if (u/same-shape-object? sm sa)\n          a\n          (mp/broadcast a sm)))))\n\n(extend-protocol mp/PBroadcastCoerce\n  nil\n    (broadcast-coerce [m a]\n      (mp/coerce-param m (mp/broadcast-like m a)))\n  #?(:clj Object :cljs object)\n    (broadcast-coerce [m a]\n      (mp/coerce-param m (mp/broadcast-like m a))))\n\n(extend-protocol mp/PPack\n  nil\n    (pack [m]\n      nil)\n  #?(:clj Object :cljs object)\n    (pack [m]\n      m))\n\n;; attempt conversion to nested vectors\n(extend-protocol mp/PConversion\n  nil\n    (convert-to-nested-vectors [m]\n      nil)\n  #?(:clj Number :cljs number)\n    (convert-to-nested-vectors [m]\n      ;; we accept a scalar as a \"nested vector\" for these purposes\n      m)\n  #?(:clj Object :cljs object)\n    (convert-to-nested-vectors [m]\n      (let [dims (long (mp/dimensionality m))]\n        (cond\n          (== dims 0)\n              (mp/get-0d m)\n          (== 1 dims)\n            (if (or (seq? m) (sequential? m))\n              (mapv mp/get-0d m)\n              (let [n (long (mp/dimension-count m 0))]\n                (loop [i 0 res []]\n                  (if (< i n)\n                    (recur (inc i) (conj res (mp/get-1d m i)))\n                    res))))\n          (sequential? m)\n              (mapv mp/convert-to-nested-vectors m)\n          (array? m)\n              (mapv mp/convert-to-nested-vectors (mp/get-major-slice-seq m))\n          (seq? m)\n              (mapv mp/convert-to-nested-vectors m)\n          :default\n              (error \"Can't work out how to convert to nested vectors: \" (#?(:clj class :cljs type) m) \" = \" m)))))\n\n(extend-protocol mp/PRowColMatrix\n  nil\n    (column-matrix [m data] (error \"Can't create a column matrix from nil\"))\n    (row-matrix [m data] (error \"Can't create a column matrix from nil\"))\n  #?(:clj Object :cljs object)\n    (column-matrix [m data]\n      (if (== 1 (long (mp/dimensionality data)))\n        (mp/coerce-param m (mapv vector (mp/element-seq data)))\n        (error \"Can't create a column matrix: input must be 1D vector\")))\n    (row-matrix [m data]\n      (if (== 1 (long (mp/dimensionality data)))\n        (mp/coerce-param m (vector data)) ;; i.e. just wrap in a\n        (error \"Can't create a row matrix: input must be 1D vector\"))))\n\n(extend-protocol mp/PVectorView\n  nil\n    (as-vector [m]\n      [nil])\n  #?(:clj Number :cljs number)\n    (as-vector [m]\n      [m])\n  #?(:clj Object :cljs object)\n    (as-vector [m]\n      (let [dims (long (mp/dimensionality m))]\n        (cond\n          (== dims 0)\n            (mp/broadcast (wrap/wrap-nd m) [1])\n          (== dims 1)\n            m\n          (not (mp/is-mutable? m))\n            ;; if not mutable, coercion to a vector works as a view\n            (mp/to-vector m)\n          :else\n            ;; We return nil for this: can't provide a mutable vector view\n            nil))))\n\n(extend-protocol mp/PVectorisable\n  nil\n    (to-vector [m]\n      [nil])\n  #?(:clj Number :cljs number)\n    (to-vector [m]\n      [m])\n  #?(:clj Object :cljs object)\n    (to-vector [m]\n      (let [dims (long (mp/dimensionality m))]\n        (cond\n          (== 0 dims)\n            [(mp/get-0d m)]\n          (mp/is-vector? m)\n            (mp/clone m)\n          :else\n            (vec (mp/element-seq m))))))\n\n(extend-protocol mp/PReshaping\n  nil\n    (reshape [m shape]\n      (mp/reshape [nil] shape))\n  #?(:clj Number :cljs number)\n    (reshape [m shape]\n      (mp/reshape [m] shape))\n  #?(:clj Object :cljs object)\n    (reshape [m shape]\n      (if (= (mp/get-shape m) shape) ;; Short circuit if already the desired shape\n        m\n        (let [gv (mp/generic-value m) ;; generic value for array padding. Typically nil or zero\n              es (concat (mp/element-seq m) (repeat gv))\n              partition-shape (fn partition-shape [es shape]\n                                (if-let [s (seq shape)]\n                                  (let [ns (next s)\n                                        plen (reduce * 1 ns)]\n                                    (map #(partition-shape % ns) (partition plen es)))\n                                  (first es)))]\n          (if-let [shape (seq shape)]\n            (let [fs (long (first shape))\n                  parts (partition-shape es shape)]\n              (or\n                (mp/construct-matrix m (take fs parts))\n                (mp/construct-matrix [] (take fs parts))))\n            (first es))))))\n\n(extend-protocol mp/PReshapeView\n  nil\n    (reshape-view [m shape]\n      (mp/broadcast nil shape))\n  #?(:clj Number :cljs number)\n    (reshape-view [m shape]\n      (mp/broadcast m shape))\n  #?(:clj Object :cljs object)\n    (reshape-view [m shape]\n      (if (mp/is-mutable? m)\n        (TODO \"reshape-view not supported on mutable array of type: \" (class m))\n        (mp/reshape m shape))))\n\n(extend-protocol mp/PCoercion\n  nil\n    (coerce-param [m param]\n      param)\n  #?(:clj Number :cljs number)\n    (coerce-param [m param]\n      param)\n  #?(:clj Object :cljs object)\n    (coerce-param [m param]\n      ;; NOTE: leave param unchanged if coercion not possible (probably an invalid shape for implementation)\n      (let [param (if (instance? ISeq param) (mp/convert-to-nested-vectors param) param)] ;; ISeqs can be slow, so convert to vector first\n        (or (mp/construct-matrix m param)\n           param))))\n\n(extend-protocol mp/PExponent\n  #?(:clj Number :cljs number)\n  (element-pow [m exponent]\n    #?(:clj\n        (if (array? exponent)\n          (mp/element-map exponent #(Math/pow (.doubleValue m) (.doubleValue ^Number %)))\n          (Math/pow (.doubleValue m) (double exponent)))\n       :cljs\n        (if (array? exponent)\n          (mp/element-map exponent #(Math/pow m %))\n          (Math/pow m exponent))))\n  #?(:clj Object :cljs object)\n  (element-pow [m exponent]\n    #?(:clj\n        (if (array? exponent)\n          (mp/element-map m #(Math/pow (.doubleValue ^Number %1) (.doubleValue ^Number %2)) exponent)\n          (mp/element-map m #(Math/pow (.doubleValue ^Number %) exponent)))\n       :cljs\n        (if (array? exponent)\n          (mp/element-map m #(Math/pow %1 %2) exponent)\n          (mp/element-map m #(Math/pow % exponent))))))\n\n(extend-protocol mp/PSquare\n  #?(:clj Number :cljs number)\n   (square [m] (* m m)) ;; can't eliminate boxing warning, may be any numerical type\n  #?(:clj Object :cljs object)\n   (square [m] (mp/element-multiply m m)))\n\n(extend-protocol mp/PLogistic\n  #?(:clj Number :cljs number)\n    (logistic [m]\n      (let [e-t (Math/exp (- (double m)))]\n        (/ 1.0 (+ 1.0 e-t))))\n  #?(:clj Object :cljs object)\n    (logistic [m]\n      (mp/element-map m logistic-fn)))\n\n(extend-protocol mp/PLogisticMutable\n  #?(:clj Object :cljs object)\n    (logistic! [m]\n      (mp/element-map! m logistic-fn)))\n\n(extend-protocol mp/PSoftplus\n  #?(:clj Number :cljs number)\n    (softplus [m]\n      (let [et (Math/exp (double m))]\n        (Math/log (+ 1.0 et))))\n  #?(:clj Object :cljs object)\n    (softplus [m]\n      (mp/element-map m softplus-fn)))\n\n(extend-protocol mp/PSoftmax\n  #?(:clj Object :cljs object)\n    (softmax [m]\n      (let [em (mp/exp m)]\n        (mp/element-divide em (mp/element-sum em)))))\n\n(extend-protocol mp/PSoftmaxMutable\n  #?(:clj Object :cljs object)\n    (softmax! [m]\n      (mp/exp! m)\n      (mp/element-divide! m (mp/element-sum m))\n      m))\n\n(extend-protocol mp/PSoftplusMutable\n  #?(:clj Object :cljs object)\n    (softplus! [m]\n      (mp/element-map! m softplus-fn)))\n\n(extend-protocol mp/PReLU\n  #?(:clj Number :cljs number)\n    (relu [m]\n      (Math/max 0.0 (double m)))\n  #?(:clj Object :cljs object)\n    (relu [m]\n      (mp/element-map m relu-fn)))\n\n(extend-protocol mp/PReLUMutable\n  #?(:clj Object :cljs object)\n    (relu! [m]\n      (mp/element-map! m relu-fn)))\n\n\n#?(:clj  (do\n\n(defmacro def-PMathsFunctions\n  [clj?]\n `(extend-protocol mp/PMathsFunctions\n    ~(if clj? 'Number 'number)\n    ~@(map (fn [[name func cljs-func]]\n             (let [func (if (and cljs-func (not clj?)) cljs-func func)]\n               `(~name [~'m] (~'double (~func (~'double ~'m))))))\n        `~mops/maths-ops)\n\n    ~(if clj? 'Object 'object)\n    ~@(map (fn [[name func cljs-func]]\n             (let [func (if (and cljs-func (not clj?)) cljs-func func)]\n               `(~name [~'m] (mp/element-map ~'m #(~'double (~func (~'double %)))))))\n        `~mops/maths-ops)\n\n    ~@(when (not clj?)\n      `[~'array\n        ~@(map (fn [[name func cljs-func]]\n                 (let [func (if (and cljs-func (not clj?)) cljs-func func)]\n                   `(~name [~'m] (mp/element-map ~'m #(~'double (~func (~'double %)))))))\n               `~mops/maths-ops)\n       ]))\n )\n\n(defmacro def-PMathsFunctionsMutable\n  [clj?]\n  `(extend-protocol mp/PMathsFunctionsMutable\n    ~(if clj? 'Number 'number)\n    ~@(map (fn [[name func cljs-func]]\n             (let [func (if (and cljs-func (not clj?)) cljs-func func)]\n               `(~(symbol (str name \"!\")) [~'m] (error \"Number is not mutable!\"))))\n        `~mops/maths-ops)\n\n    ~(if clj? 'Object 'object)\n    ~@(map (fn [[name func cljs-func]]\n             (let [func (if (and cljs-func (not clj?)) cljs-func func)]\n               `(~(symbol (str name \"!\")) [~'m] (mp/element-map! ~'m #(~'double (~func (~'double %)))))))\n        `~mops/maths-ops)\n\n    ~@(when (not clj?)\n      `[~'array\n        ~@(map (fn [[name func cljs-func]]\n                 (let [func (if (and cljs-func (not clj?)) cljs-func func)]\n                   `(~(symbol (str name \"!\")) [~'m] (mp/element-map! ~'m #(~'double (~func (~'double %)))))))\n               `~mops/maths-ops)\n      ])\n    ))\n))\n\n(def-PMathsFunctions #?(:clj true :cljs false))\n(def-PMathsFunctionsMutable #?(:clj true :cljs false))\n\n(extend-protocol mp/PMatrixSubComponents\n  #?(:clj Object :cljs object)\n    (main-diagonal [m]\n      (let [sh (mp/get-shape m)\n            rank (count sh)\n            dims (apply min sh)\n            diag-vals (for [i (range dims)] (mp/get-nd m (repeat rank i)))]\n        (imp/construct m diag-vals))))\n\n(extend-protocol mp/PSpecialisedConstructors\n  #?(:clj Object :cljs object)\n    (identity-matrix [m dims]\n      (mp/diagonal-matrix m (repeat dims 1.0)))\n    (diagonal-matrix [m diagonal-values]\n      (let [dims (count diagonal-values)\n            diagonal-values (mp/convert-to-nested-vectors diagonal-values)\n            zs (vec (repeat dims 0.0))\n            dm (vec (for [i (range dims)]\n                 (assoc zs i (nth diagonal-values i))))]\n        (mp/coerce-param m dm))))\n\n(extend-protocol mp/PPermutationMatrix\n  #?(:clj Object :cljs object)\n    (permutation-matrix [m permutation]\n      (let [v (mp/convert-to-nested-vectors permutation)\n            n (count v)\n            r (mp/new-matrix m n n)\n            r (if (mp/is-mutable? r) r (construct-mutable-matrix r))]\n        (dotimes [i n]\n          (mp/set-2d! r i (v i) 1.0))\n        r)))\n\n;; TODO: can this implementation be improved?\n(extend-protocol mp/PBlockDiagonalMatrix\n  #?(:clj Object :cljs object)\n    (block-diagonal-matrix [m blocks]\n      (let [aux (fn aux [acc blocks]\n                  (if (empty? blocks)\n                      acc\n                      (let [acc-dim (long (mp/dimension-count acc 0))\n                            new-block (blocks 0)\n                            new-block-dim (long (mp/dimension-count new-block 0))\n                            new-dim (+ acc-dim new-block-dim)\n                            dm (vec (for [i (range new-dim)]\n                                         (if (< i acc-dim)\n                                             (into [] (concat (acc i)\n                                                              (mp/new-vector [] new-block-dim)))\n                                             (into [] (concat (mp/new-vector [] acc-dim)\n                                                              (new-block (- i acc-dim)))))))]\n                            (aux dm (subvec blocks 1)))))]\n        (aux [] blocks))))\n\n(extend-protocol mp/PMatrixPredicates\n  #?(:clj Object :cljs object)\n  (identity-matrix? [m]\n    (let [rc (long (mp/dimension-count m 0))\n          cc (long (mp/dimension-count m 1))]\n      (if (and (== (long (mp/dimensionality m)) 2) (== rc cc))\n        (loop [i (long 0)]\n          (if (< i rc)\n            (if (loop [j (long 0)]\n                  (if (< j cc)\n                    (let [elem (mp/get-2d m i j)]\n                      (if (number? elem)\n                        (if (== i j)\n                          (if (== (double elem) 1.0) (recur (inc j)) false)\n                          (if (zero? elem) (recur (inc j)) false))\n                        false))\n                    true))\n              (recur (inc i))\n              false)\n            true))\n        false)))\n  (zero-matrix? [m]\n    (every? #(and (number? %) (zero? %)) (mp/element-seq m)))\n  (symmetric? [m]\n    (case (long (mp/dimensionality m))\n      0 true\n      1 true\n      2 (and (square? m) (symmetric-matrix-entries? m))\n      (= m (mp/transpose m))))\n  nil\n  (identity-matrix? [m] false)\n  (zero-matrix? [m] false)\n  (symmetric? [m] true))\n\n;; ======================================================\n;; default implementation for higher-level array indexing\n\n(extend-protocol mp/PIndicesAccess\n  #?(:clj Object :cljs object)\n  (get-indices [a indices]\n    (let [vals (map #(mp/get-nd a %1) (map mp/element-seq indices))] ;; TODO: use index coerce?\n      (or\n        (when (array? a) (mp/construct-matrix a vals))\n        (mp/construct-matrix [] vals)))))\n\n(extend-protocol mp/PIndicesSetting\n  #?(:clj Object :cljs object)\n  (set-indices [a indices values]\n    (let [indices (map mp/element-seq indices)\n          values (mp/element-seq (mp/broadcast values [(count indices)]))]\n      (loop [a a [id & idx] indices [v & vs] values]\n        (if id (recur (mp/set-nd a id v) idx vs) a))))\n  (set-indices! [a indices values]\n    (let [indices (map mp/element-seq indices)\n          values (mp/element-seq (mp/broadcast values [(count indices)]))]\n      (loop [[id & idx] indices [v & vs] values]\n        (when id\n          (mp/set-nd! a id v) (recur idx vs))))))\n\n(extend-protocol mp/PNonZeroIndices\n  #?(:clj Object :cljs object)\n  (non-zero-indices\n    [m]\n    (if (mp/is-vector? m)\n      (vec (for [i (range (mp/dimension-count m 0))\n                    :when (not (zero? (mp/get-1d m i)))]\n              i))\n      (vec (for [i (range (mp/dimension-count m 0))]\n              (mp/non-zero-indices (mp/get-major-slice m i)))))))\n\n;; TODO: proper generic implementations\n(extend-protocol mp/PMatrixTypes\n  #?(:clj Object :cljs object)\n  (diagonal? [m]\n    (if (= (long (mp/dimensionality m)) 2)\n      (let [[^long mrows ^long mcols] (mp/get-shape m)]\n        (->> (mp/element-seq m)\n             (map (fn [^long i elem] (vector (quot i mcols) (rem i mcols) elem))\n                  (range (* mrows mcols)))\n             (every? (fn [[^long i ^long j v]]\n                       (cond\n                         (= i j) true\n                         (and (not= i j) (== v 0)) true\n                         :else false)))))\n      false))\n  (upper-triangular? [m]\n    (if (square? m)\n      (->> (mp/get-slice-seq m 0)\n           (map vector (range))\n           (mapcat (fn [[idx xs]] (take idx xs)))\n           (every? zero?))\n      false))\n  (lower-triangular? [m]\n    (if (square? m)\n      (->> (mp/get-slice-seq m 0)\n           (map vector (range))\n           (mapcat (fn [[^long idx xs]] (drop (inc idx) xs)))\n           (every? zero?))\n      false))\n  (positive-definite? [m]\n    (error \"TODO: Not yet implemented\")\n    (mp/positive-definite? (mp/convert-to-nested-vectors m)))\n  (positive-semidefinite? [m]\n    (error \"TODO: Not yet implemented\"))\n  (orthogonal? [m eps]\n    (and (square? m)\n         (mp/matrix-equals-epsilon\n           (mp/matrix-multiply m (mp/transpose m))\n           (mp/identity-matrix m (mp/dimension-count m 0))\n           eps))))\n\n(extend-protocol mp/PSelect\n  nil\n    (select [a area]\n      (when (seq area) (error \"Trying to select on nil with selection: \" area))\n      nil)\n  #?(:clj Number :cljs number)\n    (select [a area]\n      (when (seq area) (error \"Trying to select on numerical scalar with selection: \" area))\n      a)\n  #?(:clj Object :cljs object)\n    (select [a area]\n      (or\n        (mp/select-view a area) ;; use a view if supported by the implementation\n        (wrap/wrap-selection a area))))\n\n(extend-protocol mp/PSelectView\n  nil\n    (select-view [a area]\n      (when (seq area) (error \"Trying to select on nil with selection: \" area))\n      nil)  #?(:clj Object :cljs object)\n  #?(:clj Number :cljs number)\n    (select-view [a area]\n      (when (seq area) (error \"Trying to select on numerical scalar with selection: \" area))\n      a)\n  #?(:clj Object :cljs object)\n    (select-view [a area]\n      (wrap/wrap-selection a area)))\n\n(extend-protocol mp/PSelect\n  #?(:clj Number :cljs number)\n  (select [a area]\n    (if (empty? area)\n      a\n      (error \"Non empty area argument in select, called on Number \" a))))\n\n(defn- area-indices [area]\n  (reduce (fn [io in]\n            (for [a in b io]\n              (cons a b))) (mapv vector (last area)) (rest (reverse area))))\n\n(defn- indices [vals]\n  (area-indices (mapv range (mp/get-shape vals))))\n\n\n(extend-protocol mp/PSetSelection\n  #?(:clj Object :cljs object)\n  (set-selection [m area vals]\n    (let [;; create a mutable clone\n          mm (or (mp/mutable-matrix m)\n                (construct-mutable-matrix m))\n          v (mp/select-view m area)]\n      (mp/assign! v vals)\n      mm)))\n\n(extend-protocol mp/PIndexImplementation\n  #?(:clj Object :cljs object)\n\t  (index? [m]\n      false) ;; we default to saying something isn't an index, unless it is explicitly supported\n\t  (index-to-longs [m]\n      (long-array (mp/element-seq m)))\n\t  (index-to-ints [m]\n      (int-array (mp/element-seq m)))\n\t  (index-from-longs [m xs]\n      (long-array xs))\n\t  (index-from-ints [m xs]\n      (int-array xs))\n\t  (index-coerce [m a]\n      (mp/index-to-longs m)))\n\n;; =======================================================\n;; default label implementation\n\n(extend-protocol mp/PDimensionLabels\n  #?(:clj Object :cljs object)\n    (label [m dim i]\n      (if (<= 0 (long i) (dec (long (mp/dimension-count m dim))))\n        nil\n        (error \"Dimension index out of range: \" i)))\n    (labels [m dim]\n      (if (<= 0 (long dim) (dec (long (mp/dimensionality m))))\n        nil\n        (error \"Dimension out of range: \" dim))))\n\n(extend-protocol mp/PColumnNames\n  #?(:clj Object :cljs object)\n    (column-name [m i]\n      (let [dim (dec (long (mp/dimensionality m)))]\n        (mp/label m dim i)))\n    (column-names [m]\n      (let [dim (dec (long (mp/dimensionality m)))]\n        (mp/labels m dim))))\n\n\n;; =======================================================\n;; default linear algebra implementations\n\n(extend-protocol mp/PNorm\n  #?(:clj Object :cljs object)\n  (norm [m p]\n    (cond\n      (= p #?(:clj Double/POSITIVE_INFINITY :cljs js/Number.POSITIVE_INFINITY)) (mp/element-max (mp/element-map m mops/abs))\n      (number? p) (let [sum-of-element-powers (mp/element-sum (mp/element-pow (mp/element-map m mops/abs) p))]\n                    (condp == p\n                      1 sum-of-element-powers\n                      2 (Math/sqrt sum-of-element-powers)\n                      3 (Math/cbrt sum-of-element-powers)\n                      (Math/pow sum-of-element-powers (/ 1.0 p))))\n      :else (error \"p must be a number\"))))\n\n;; QR decomposition utility functions\n\n(defn compute-q [m ^doubles qr-data mcols mrows min-len\n                 ^doubles us ^doubles vs ^doubles gammas]\n  (let [q ^doubles (mp/to-double-array (mp/identity-matrix [] mrows))\n        mcols (long mcols)\n        mrows (long mrows)\n        min-len (long min-len)]\n    (c-for [i (dec min-len) (> i -1) (dec i)]\n      (let [gamma (aget gammas i)]\n        (aset us i 1.0)\n        (c-for [j (inc i) (< j mrows) (inc j)]\n          (aset us j\n                (aget qr-data\n                      (+ (* j mcols)\n                         i))))\n        (c-for [j i (< j mrows) (inc j)]\n          (aset vs j\n                (* (aget us i)\n                   (aget q\n                         (+ (* i mrows)\n                            j)))))\n        (c-for [j (inc i) (< j mrows) (inc j)]\n          (let [u (aget us j)]\n            (c-for [k i (< k mrows) (inc k)]\n              (let [q-idx (+ (* j mrows)\n                             i (- k i))]\n                (aset vs k (+ (aget vs k)\n                              (* u\n                                 (aget q q-idx))))))))\n        (c-for [j i (< j mrows) (inc j)]\n          (aset vs j (* (aget vs j)\n                        gamma)))\n\n        (c-for [j i (< j mrows) (inc j)]\n          (let [u (aget us j)]\n            (c-for [k i (< k mrows) (inc k)]\n              (let [qr-idx (+ (* j mrows)\n                              i (- k i))]\n                (aset q qr-idx (- (aget q qr-idx)\n                                  (* u (aget vs k))))))))))\n    (mp/compute-matrix m [mrows mrows]\n                       (fn [^long i ^long j]\n                         (aget q (+ (* i mrows) j))))))\n\n(defn compute-r [m ^doubles data mcols mrows min-len compact?]\n  (let [mrows (long mrows)\n        mcols (long mcols)\n        min-len (long min-len)\n        cm (mp/compute-matrix\n              m [mrows mcols]\n              (fn [^long i ^long j]\n                (if (and (< i min-len)\n                         (>= j i)\n                         (< j mcols))\n                  (aget data (+ (* i mcols) j))\n                  0)))]\n    (if compact?\n      (let [slcs (mp/get-major-slice-seq cm)\n            non-zero-rows (long (reduce\n                            (fn [^long cnt slice] (if (every? zero? slice) (inc cnt) cnt))\n                            0\n                            slcs))]\n        ;; TODO: is this broken? Looks like mcols and mrows in wrong order?\n        (mp/reshape cm [mcols (- mrows non-zero-rows)]))\n      cm)))\n\n(defn householder-qr [^doubles qr-data idx mcols\n                      mrows ^doubles us ^doubles gammas]\n  (let [idx (long idx)\n        mcols (long mcols)\n        mrows (long mrows)]\n    (loop [qr-idx (long (+ idx (* idx mcols)))\n           i (long idx)]\n      (when (< i mrows)\n        (aset us i (aget qr-data qr-idx))\n        (recur (+ qr-idx mcols)\n               (inc i))))\n    (let [max_ (double (apply max (map #(Math/abs (double %))\n                         (mp/subvector us idx (- mrows idx)))))]\n      (if (= max_ 0.0)\n        {:error true}\n        (let [_ (c-for [i idx (< i mrows) (inc i)]\n                  (aset us i (/ (aget us i) max_)))\n              tau (->> (mp/subvector us idx (- mrows idx))\n                       (reduce (fn [^double acc ^double x] (+ acc (* x x))) 0.0)\n                       (Math/sqrt))\n              u-idx (aget us idx)\n              tau (if (neg? u-idx) (- tau) tau)\n              u-0 (+ u-idx tau)\n              gamma (/ u-0 tau)\n              tau (* tau max_)]\n          (aset gammas idx gamma)\n          (c-for [i (inc idx) (< i mrows) (inc i)]\n            (aset us i (/ (aget us i) u-0)))\n          (aset us idx 1.0)\n          {:gamma gamma\n           :gammas gammas\n           :us us\n           :tau tau\n           :error false})))))\n\n(defn update-qr [^doubles qr-data idx mcols mrows ^doubles vs\n                 ^doubles us gamma tau]\n  (let [idx (long idx)\n        mrows (long mrows)\n        mcols (long mcols)\n        u (aget us idx)\n        idx+1 (inc idx)\n        gamma (double gamma)\n        tau (double tau)]\n    (c-for [i idx+1 (< i mcols) (inc i)]\n      (aset vs i (aget qr-data\n                       (+ i\n                          (* idx mcols)))))\n    (c-for [i idx+1 (< i mrows) (inc i)]\n      (let [qr-idx (+ idx+1\n                      (* i mcols))]\n        (c-for [j idx+1 (< j mcols) (inc j)]\n          (aset vs j\n                (+ (aget vs j)\n                   (* (aget us i)\n                      (aget qr-data (+ qr-idx\n                                       (- j idx+1)))))))))\n    (c-for [i idx+1 (< i mcols) (inc i)]\n      (aset vs i (* (aget vs i)\n                    gamma)))\n\n    (c-for [i idx (< i mrows) (inc i)]\n      (let [u (aget us i)]\n        (c-for [j idx+1 (< j mcols) (inc j)]\n          (let [qr-idx (+ (* i mcols)\n                          idx+1\n                          (- j idx+1))]\n            (aset qr-data qr-idx\n                  (- (aget qr-data qr-idx) (* u (aget vs j))))))))\n\n    (when (< idx mcols)\n      (aset qr-data (+ idx (* idx mcols)) (double (- tau))))\n\n    (c-for [i idx+1 (< i mrows) (inc i)]\n      (aset qr-data\n            (+ idx (* i mcols))\n            (aget us i)))\n    {:qr-data qr-data\n     :vs vs}))\n\n\n(extend-protocol mp/PQRDecomposition\n  #?(:clj Object :cljs object)\n  (qr [m options]\n    (let [[mrows mcols] (mp/get-shape m)\n          mrows (long mrows)\n          mcols (long mcols)\n          min-len (min mcols mrows)\n          max-len (max mcols mrows)]\n      (loop [qr-data (mp/to-double-array m)\n             vs (double-array max-len)\n             us (double-array max-len)\n             gammas (double-array min-len)\n             gamma 0.0\n             tau 0.0\n             i 0]\n        (if (< i min-len)\n          (let [{:keys [us gamma gammas tau error]}\n                (householder-qr\n                 qr-data i mcols\n                 mrows us gammas)]\n            (when-not error\n              (let [{:keys [qr-data vs]}\n                    (update-qr qr-data i mcols mrows\n                               vs us gamma tau)]\n                (recur qr-data vs us gammas\n                       (double gamma) (double tau) (inc i)))))\n          (->>\n           (select-keys\n            {:Q #(compute-q m qr-data mcols mrows\n                            min-len us vs gammas)\n             :R #(compute-r m qr-data mcols mrows min-len (:compact options))}\n            (:return options))\n           (map (fn [[k v]] [k (v)]))\n           (into {})))))))\n\n;; temp var to prevent recursive coercion if implementation does not support liear algebra operation\n(extend-protocol mp/PCholeskyDecomposition\n  #?(:clj Object :cljs object)\n  (cholesky [m options]\n    (try-current-implementation m (mp/cholesky m options))))\n\n(extend-protocol mp/PLUDecomposition\n  #?(:clj Object :cljs object)\n  (lu [m options]\n    (try-current-implementation m (mp/lu m options))))\n\n(extend-protocol mp/PSVDDecomposition\n  #?(:clj Object :cljs object)\n  (svd [m options]\n    (try-current-implementation m (mp/svd m options))))\n\n(extend-protocol mp/PEigenDecomposition\n  #?(:clj Object :cljs object)\n  (eigen [m options]\n    (try-current-implementation m (mp/eigen m options))))\n\n(extend-protocol mp/PSolveLinear\n  #?(:clj Object :cljs object)\n  (solve [a b]\n    (try-current-implementation a (mp/solve a b))))\n\n(extend-protocol mp/PLeastSquares\n  #?(:clj Object :cljs object)\n  (least-squares [a b]\n    (try-current-implementation a (mp/least-squares a b))))\n\n"],"x_google_ignoreList":[0]}