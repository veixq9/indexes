{"version":3,"sources":["tunnl71/electron_game/canvas.cljs"],"mappings":";AAKA,yCAAA,zCAAMA,0FACHC;AADH,AAEE,IAAMC,WAAS,gDAAA,hDAACC;AAAhB,AACE,+DAAA,2CAAA,oEAAA,sBAAA,7LAACC,iRAQC,2DAAaC;AAAb,AACE,IAGMC,IAAE,yGAAA,zGAACC,8HAA6BF;IAEhCG,MAAQC,AAAY,wBAAA;IACpBC,MAAI,eAAA,fAAaF;IACjBG,IAAE,AAAeH;IACjBI,IAAE,AAAgBJ;AARxB,AASE,AAAYE;;AACZ,WAAA,IAAA,fAASA;;AACT,AAASA,WAAIC,EAAEC;;AACf,aAAA,bAASF,WAAIC;;AACb,WAAA,XAASD,eAAME;;AAEf,AAASF;;AAET,iBAAA,hBAAM,AAAIA;;AACV,oBAAA,IAAA,jBAAWA,qBAAQC,EAAEC;GA3B3B,yEAgCE;AAAA,AAAA,0FAAA,uEAAA,AAAAC,gBAOmBZ;;;AAEzB,8CAAA,9CAAMa,oGACHb;AADH,AAAA,0FAAA,2EAAA,mFAAA,oEAAA,2CAAA,uDAAA,2CAAA,uDAAA,8BAAA,mFAAA,wFAAA,uJAAA,mFAAA,oEAAA,2CAAA,uDAAA,2CAAA,uDAAA,/ZAMKD,uCAAUC","names":["tunnl71.electron-game.canvas/my-canvas","canvas-state","dom-node","reagent.core.atom","reagent.core.create_class","this","_","cljs.core.println","cvs","js/document","ctx","w","h","cljs.core/deref","tunnl71.electron-game.canvas/canvas-wrapped"],"sourcesContent":["(ns tunnl71.electron-game.canvas\n  (:require\n   [reagent.core :as r]\n   [tunnl71.electron-game.canvas :refer [canvas-wrapped]]))\n\n(defn my-canvas\n  [canvas-state]\n  (let [dom-node (r/atom nil)]\n    (r/create-class\n     {\n      :display-name \"my canvas component\"\n      ;; :component-did-update\n      ;; (fn [ this ]\n      ;;   #_(draw-canvas-contents (.-firstChild @dom-node) ))\n\n      :component-did-mount\n      (fn draw-bg [this]\n        (let [\n              ;; foo (r/current-component  )\n              ;; _ (println \"yo\" foo)\n              _ (println \"current component \" this)\n              ;; cvs (-> js/document (.getElementById \"my-canvas-component\"))\n              cvs (-> js/document (.getElementById \"canvas\"))\n              ctx (.getContext cvs \"2d\")\n              w (.-clientWidth cvs)\n              h (.-clientHeight cvs)]\n          (.beginPath ctx)\n          (.moveTo ctx 0 0)\n          (.lineTo ctx w h)\n          (.moveTo ctx w 0)\n          (.lineTo ctx 0 h)\n          \n          (.stroke ctx)\n\n          (set! (-> ctx .-fillStyle ) \"black\")\n          (.fillRect ctx 0 0 w h)))\n\n      \n\n      :reagent-render\n      (fn []\n        ;; @window-width ;; Trigger re-render on window resizes\n        ;; [:canvas#canvas {:width 230 :height 350 }]\n\n        ;; r-render is called before the compoment mounts, so\n        ;; protect against the null dom-node that occurs on the first\n        ;; render\n        [:canvas#canvas @canvas-state])})))\n\n(defn canvas-wrapped\n  [canvas-state]\n  ;; canvas\n  [:div.w3-cell-row\n   [:div.w3-cell {:style {:width \"33%\"}}]\n   [:div.w3-cell.w3-border\n    [my-canvas canvas-state]]\n   [:div.w3-cell {:style {:width \"33%\"}}]])\n\n"]}