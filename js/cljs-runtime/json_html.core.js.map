{"version":3,"sources":["json_html/core.cljc"],"mappings":"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","names":["json-html.core/render-keyword","k","cljs.core.juxt","cljs.core/namespace","cljs.core/name","cljs.core.remove","cljs.core/nil?","clojure.string.join","json-html.core/str-compare","k1","k2","cljs.core/compare","json-html.core/sort-map","m","cljs.core.mapv","p__29310","vec__29315","cljs.core.nth","v","cljs.core._EQ_","cljs.core/type","js/Object","cljs.core.js__GT_clj","e29319","cljs.core.into","cljs.core/sorted-map","js/Error","_","cljs.core/sorted-map-by","json-html.core/sort-set","s","e29320","cljs.core/sorted-set","cljs.core/sorted-set-by","json-html.core/url-regex","cljs.core/re-pattern","json-html.core/linkify-links","string","clojure.string/replace","json-html$core$Render$render$dyn","x__5393__auto__","m__5394__auto__","json-html.core/render","goog/typeOf","m__5392__auto__","cljs.core/missing-protocol","json-html.core/Render","this","json-html.core/escape-html","clojure.string/escape","json-html.core/obj->clj","obj","cljs.core.reduce","props","cljs.core.assoc","cljs.core.keyword","js/Object.keys","json-html.core/render-collection","col","cljs.core/empty?","iter__5523__auto__","s__29330","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__29332","cljs.core/chunk-buffer","i__29331","vec__29339","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__29329","cljs.core/chunk-rest","vec__29342","cljs.core/first","cljs.core/cons","cljs.core/rest","i","cljs.core.map_indexed","cljs.core/vector","json-html.core/render-html","json-html.core/render-set","s__29348","b__29350","i__29349","iter__29347","item","json-html.core/render-map","s__29361","b__29363","i__29362","vec__29371","iter__29360","vec__29386","json-html.core/render-string","clojure.string/blank?","t","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/Keyword","cljs.core/Symbol","js/String","js/Date","js/Boolean","js/Number","js/Array","G__29393","cljs.core/IMap","cljs.core/ISet","cljs.core/ICollection","G__29408","json-html.core/edn->hiccup","edn","json-html.core/edn->html","json-html.html/html","json-html.core/json->hiccup","json","json-html.core/json->html","cljs.core/chunk-first"],"sourcesContent":["(ns json-html.core\n  #?(:clj\n     (:require\n       [clojure.data.json :as json]\n       [clojure.string :as st]\n       [json-html.html :refer [html escape-html]])\n     :cljs\n     (:require\n      [clojure.string :as st]\n      [json-html.html :refer [html]]))\n  #?(:clj\n     (:import\n      [clojure.lang IPersistentMap IPersistentSet IPersistentCollection Keyword Symbol])))\n\n(defn render-keyword [k]\n  (str \":\" (->> k ((juxt namespace name)) (remove nil?) (st/join \"/\"))))\n\n(defn str-compare [k1 k2]\n  (compare (str k1) (str k2)))\n\n(defn sort-map [m]\n  #?(:clj  (try\n             (into (sorted-map) m)\n             (catch Exception _\n               (into (sorted-map-by str-compare) m)))\n     :cljs (let [m (mapv (fn [[k v]]\n                           [(if (= (type k) js/Object) (js->clj k) k) v])\n                         m)]\n             (try\n               (into (sorted-map) m)\n               (catch js/Error _\n                 (into (sorted-map-by str-compare) m))))))\n\n(defn sort-set [s]\n  (try\n    (into (sorted-set) s)\n    (catch #?(:clj Exception :cljs js/Error) _\n      (into (sorted-set-by str-compare) s))))\n\n(def url-regex                                         ;; good enough...\n  (re-pattern \"(\\\\b(https?|ftp|file|ldap)://[-A-Za-z0-9+&@#/%?=~_|!:,.;]*[-A-Za-z0-9+&@#/%=~_|])\"))\n\n(defn linkify-links\n  \"Make links clickable.\"\n  [string]\n  (clojure.string/replace string url-regex \"<a class='jh-type-string-link' href=$1>$1</a>\"))\n\n(defprotocol Render\n  (render [this] \"Renders the element a Hiccup structure\"))\n\n#?(:clj\n   (do\n     (extend-protocol Render\n       nil\n       (render [_] [:span.jh-empty nil])\n\n       java.util.Date\n       (render [this]\n         [:span.jh-type-date\n          (.format (java.text.SimpleDateFormat. \"MMM dd, yyyy HH:mm:ss\") this)])\n\n       Character\n       (render [this] [:span.jh-type-string (str this)])\n\n       Boolean\n       (render [this] [:span.jh-type-bool this])\n\n       Integer\n       (render [this] [:span.jh-type-number this])\n\n       Double\n       (render [this] [:span.jh-type-number this])\n\n       Long\n       (render [this] [:span.jh-type-number this])\n\n       Float\n       (render [this] [:span.jh-type-number this])\n\n       Keyword\n       (render [this] [:span.jh-type-string (render-keyword this)])\n\n       Symbol\n       (render [this] [:span.jh-type-string (str this)])\n\n       String\n       (render [this] [:span.jh-type-string\n                       (if (.isEmpty (.trim this))\n                         [:span.jh-empty-string]\n                         (escape-html this))])\n\n       IPersistentMap\n       (render [this]\n         (if (empty? this)\n           [:div.jh-type-object [:span.jh-empty-map]]\n           [:table.jh-type-object\n            [:tbody\n             (for [[k v] (sort-map this)]\n               [:tr [:th.jh-key.jh-object-key (render k)]\n                [:td.jh-value.jh-object-value (render v)]])]]))\n\n       IPersistentSet\n       (render [this]\n         (if (empty? this)\n           [:div.jh-type-set [:span.jh-empty-set]]\n           [:ul (for [item (sort-set this)] [:li.jh-value (render item)])]))\n\n       IPersistentCollection\n       (render [this]\n         (if (empty? this)\n           [:div.jh-type-object [:span.jh-empty-collection]]\n           [:table.jh-type-object\n            [:tbody\n             (for [[i v] (map-indexed vector this)]\n               [:tr [:th.jh-key.jh-array-key i]\n                [:td.jh-value.jh-array-value (render v)]])]]))\n\n       Object\n       (render [this]\n         [:span.jh-type-string (.toString this)]))\n\n     (defn edn->html [edn]\n       (-> (html\n            [:div.jh-root\n             (render edn)])\n           (linkify-links)))\n\n     (defn json->html [json]\n       (-> json json/read-str edn->html))))\n\n#?(:cljs\n   (do\n     (defn escape-html [s]\n       (st/escape s\n                  {\"&\" \"&amp;\"\n                   \">\" \"&gt;\"\n                   \"<\" \"&lt;\"\n                   \"\\\"\" \"&quot;\"}))\n\n     (defn- obj->clj [obj]\n       (reduce\n        (fn [props k]\n          (assoc props (keyword k) (aget obj k)))\n        {}\n        (js/Object.keys obj)))\n\n     (declare render-html)\n\n     (defn render-collection [col]\n       (if (empty? col)\n         [:div.jh-type-object [:span.jh-empty-collection]]\n         [:table.jh-type-object\n          [:tbody\n           (for [[i v] (map-indexed vector col)]\n             ^{:key i} [:tr [:th.jh-key.jh-array-key i]\n                        [:td.jh-value.jh-array-value (render-html v)]])]]))\n\n     (defn render-set [s]\n       (if (empty? s)\n         [:div.jh-type-set [:span.jh-empty-set]]\n         [:ul (for [item (sort-set s)] [:li.jh-value (render-html item)])]))\n\n     (defn render-map [m]\n       (if (empty? m)\n         [:div.jh-type-object [:span.jh-empty-map]]\n         [:table.jh-type-object\n          [:tbody\n           (for [[k v] (sort-map m)]\n             ^{:key k} [:tr [:th.jh-key.jh-object-key (render-html k)]\n                        [:td.jh-value.jh-object-value (render-html v)]])]]))\n\n     (defn render-string [s]\n       [:span.jh-type-string\n        (if (st/blank? s)\n          [:span.jh-empty-string]\n          (escape-html s))])\n\n     (defn render-html [v]\n       (let [t (type v)]\n         (cond\n           (satisfies? Render v) (render v)\n           (= t Keyword) [:span.jh-type-string (render-keyword v)]\n           (= t Symbol) [:span.jh-type-string (str v)]\n           (= t js/String) [:span.jh-type-string (render-string v)]\n           (= t js/Date) [:span.jh-type-date (.toString v)]\n           (= t js/Boolean) [:span.jh-type-bool (str v)]\n           (= t js/Number) [:span.jh-type-number v]\n           (= t js/Array) (render-html (js->clj v))\n           (satisfies? IMap v) (render-map v)\n           (satisfies? ISet v) (render-set v)\n           (satisfies? ICollection v) (render-collection v)\n           (= t js/Object) (render-html (obj->clj v))\n           nil [:span.jh-empty nil])))\n\n     (defn edn->hiccup [edn]\n       [:div.jh-root (render-html edn)])\n\n     (defn edn->html [edn]\n       (linkify-links (html (edn->hiccup edn))))\n\n     (defn json->hiccup [json]\n       [:div.jh-root (render-html (js->clj json))])\n\n     (defn json->html [json]\n       (linkify-links (html (json->hiccup json))))))\n"],"x_google_ignoreList":[0]}