{"version":3,"sources":["json_html/html.cljc"],"mappings":"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","names":["json-html.html/normalize-body","body","cljs.core/coll?","cljs.core.apply","cljs.core/str","cljs.core.doall","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","json-html.html/as-str","seq29282","self__5755__auto__","cljs.core/seq","xs","cljs.core.map","json-html.html/escape-html","text","json_html.html.as_str","clojure.string/replace","json-html.html/xml-attribute","id","value","cljs.core/name","p__29283","vec__29284","cljs.core.nth","json-html.html/render-attribute","name","cljs.core/not","json-html.html/render-attr-map","attrs","cljs.core.sort","p__29289","map__29290","cljs.core/--destructure-map","cljs.core.get","json-html.html/merge-attributes","class","map-attrs","cljs.core.merge","p1__29287#","p2__29288#","cljs.core.merge_with","p__29295","vec__29297","seq__29298","first__29299","cljs.core/first","cljs.core/next","json-html.html/normalize-element","tag","content","vec__29300","re-tag","_","cljs.core/re-matches","tag-attrs","cljs.core/map?","p__29303","vec__29304","seq__29305","first__29306","json-html.html/render-element","cljs.core/flatten","json-html.html/html","hiccup","clojure.walk/postwalk","node","cljs.core/vector?"],"sourcesContent":["(ns json-html.html\n  (:require\n    [clojure.string :as string]\n    [clojure.walk :refer [postwalk]]))\n\n(defn normalize-body [body]\n  (if (coll? body) (apply str (doall body)) (str body)))\n\n(defn as-str\n  \"Converts its arguments into a string using to-str.\"\n  [& xs]\n  (apply str (map normalize-body xs)))\n\n(defn escape-html\n  \"Change special characters into HTML character entities.\"\n  [text]\n  (-> (as-str text)\n      (string/replace #\"&\" \"&amp;\")\n      (string/replace #\"<\" \"&lt;\")\n      (string/replace #\">\" \"&gt;\")\n      (string/replace #\"'\" \"&apos;\")))\n\n(defn xml-attribute [id value]\n  (str \" \" (as-str (name id)) \"=\\\"\" (escape-html value) \"\\\"\"))\n\n(defn render-attribute [[name value]]\n  (cond\n    (true? value) (xml-attribute name name)\n    (not value) \"\"\n    :else (xml-attribute name value)))\n\n(defn render-attr-map [attrs]\n  (apply str (sort (map render-attribute attrs))))\n\n(defn- merge-attributes [{:keys [id class]} map-attrs]\n  (->> map-attrs\n       (merge (if id {:id id}))\n       (merge-with #(if %1 (str %1 \" \" %2) %2) (if class {:class class}))))\n\n(defn normalize-element [[tag & content]]\n  (let [re-tag    #\"([^\\s\\.#]+)(?:#([^\\s\\.#]+))?(?:\\.([^\\s#]+))?\"\n        [_ tag id class] (re-matches re-tag (as-str (name tag)))\n        tag-attrs {:id    id\n                   :class (if class (string/replace class #\"\\.\" \" \"))}\n        map-attrs (first content)]\n    (if (map? map-attrs)\n      [tag (merge-attributes tag-attrs map-attrs) (next content)]\n      [tag tag-attrs content])))\n\n(defn render-element [[tag attrs & content]]\n  (str \"<\" (name tag) (render-attr-map attrs) \">\" (as-str (flatten content)) \"</\" (name tag) \">\"))\n\n(defn html [hiccup]\n  (postwalk\n    (fn [node]\n      (if (vector? node)\n        (-> node normalize-element render-element)\n        node))\n    hiccup))\n"],"x_google_ignoreList":[0]}