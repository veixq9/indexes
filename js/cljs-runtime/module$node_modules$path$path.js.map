{
"version":3,
"file":"module$node_modules$path$path.js",
"lineCount":17,
"mappings":"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",
"sources":["node_modules/path/path.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$path$path\"] = function(global,require,module,exports) {\nvar process = require('process');\n// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\n\r\nvar isWindows = process.platform === 'win32';\r\nvar util = require('util');\r\n\r\n\r\n// resolves . and .. elements in a path array with directory names there\r\n// must be no slashes or device names (c:\\) in the array\r\n// (so also no leading and trailing slashes - it does not distinguish\r\n// relative and absolute paths)\r\nfunction normalizeArray(parts, allowAboveRoot) {\r\n  var res = [];\r\n  for (var i = 0; i < parts.length; i++) {\r\n    var p = parts[i];\r\n\r\n    // ignore empty parts\r\n    if (!p || p === '.')\r\n      continue;\r\n\r\n    if (p === '..') {\r\n      if (res.length && res[res.length - 1] !== '..') {\r\n        res.pop();\r\n      } else if (allowAboveRoot) {\r\n        res.push('..');\r\n      }\r\n    } else {\r\n      res.push(p);\r\n    }\r\n  }\r\n\r\n  return res;\r\n}\r\n\r\n// returns an array with empty elements removed from either end of the input\r\n// array or the original array if no elements need to be removed\r\nfunction trimArray(arr) {\r\n  var lastIndex = arr.length - 1;\r\n  var start = 0;\r\n  for (; start <= lastIndex; start++) {\r\n    if (arr[start])\r\n      break;\r\n  }\r\n\r\n  var end = lastIndex;\r\n  for (; end >= 0; end--) {\r\n    if (arr[end])\r\n      break;\r\n  }\r\n\r\n  if (start === 0 && end === lastIndex)\r\n    return arr;\r\n  if (start > end)\r\n    return [];\r\n  return arr.slice(start, end + 1);\r\n}\r\n\r\n// Regex to split a windows path into three parts: [*, device, slash,\r\n// tail] windows-only\r\nvar splitDeviceRe =\r\n    /^([a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/]+[^\\\\\\/]+)?([\\\\\\/])?([\\s\\S]*?)$/;\r\n\r\n// Regex to split the tail part of the above into [*, dir, basename, ext]\r\nvar splitTailRe =\r\n    /^([\\s\\S]*?)((?:\\.{1,2}|[^\\\\\\/]+?|)(\\.[^.\\/\\\\]*|))(?:[\\\\\\/]*)$/;\r\n\r\nvar win32 = {};\r\n\r\n// Function to split a filename into [root, dir, basename, ext]\r\nfunction win32SplitPath(filename) {\r\n  // Separate device+slash from tail\r\n  var result = splitDeviceRe.exec(filename),\r\n      device = (result[1] || '') + (result[2] || ''),\r\n      tail = result[3] || '';\r\n  // Split the tail into dir, basename and extension\r\n  var result2 = splitTailRe.exec(tail),\r\n      dir = result2[1],\r\n      basename = result2[2],\r\n      ext = result2[3];\r\n  return [device, dir, basename, ext];\r\n}\r\n\r\nfunction win32StatPath(path) {\r\n  var result = splitDeviceRe.exec(path),\r\n      device = result[1] || '',\r\n      isUnc = !!device && device[1] !== ':';\r\n  return {\r\n    device: device,\r\n    isUnc: isUnc,\r\n    isAbsolute: isUnc || !!result[2], // UNC paths are always absolute\r\n    tail: result[3]\r\n  };\r\n}\r\n\r\nfunction normalizeUNCRoot(device) {\r\n  return '\\\\\\\\' + device.replace(/^[\\\\\\/]+/, '').replace(/[\\\\\\/]+/g, '\\\\');\r\n}\r\n\r\n// path.resolve([from ...], to)\r\nwin32.resolve = function() {\r\n  var resolvedDevice = '',\r\n      resolvedTail = '',\r\n      resolvedAbsolute = false;\r\n\r\n  for (var i = arguments.length - 1; i >= -1; i--) {\r\n    var path;\r\n    if (i >= 0) {\r\n      path = arguments[i];\r\n    } else if (!resolvedDevice) {\r\n      path = process.cwd();\r\n    } else {\r\n      // Windows has the concept of drive-specific current working\r\n      // directories. If we've resolved a drive letter but not yet an\r\n      // absolute path, get cwd for that drive. We're sure the device is not\r\n      // an unc path at this points, because unc paths are always absolute.\r\n      path = process.env['=' + resolvedDevice];\r\n      // Verify that a drive-local cwd was found and that it actually points\r\n      // to our drive. If not, default to the drive's root.\r\n      if (!path || path.substr(0, 3).toLowerCase() !==\r\n          resolvedDevice.toLowerCase() + '\\\\') {\r\n        path = resolvedDevice + '\\\\';\r\n      }\r\n    }\r\n\r\n    // Skip empty and invalid entries\r\n    if (!util.isString(path)) {\r\n      throw new TypeError('Arguments to path.resolve must be strings');\r\n    } else if (!path) {\r\n      continue;\r\n    }\r\n\r\n    var result = win32StatPath(path),\r\n        device = result.device,\r\n        isUnc = result.isUnc,\r\n        isAbsolute = result.isAbsolute,\r\n        tail = result.tail;\r\n\r\n    if (device &&\r\n        resolvedDevice &&\r\n        device.toLowerCase() !== resolvedDevice.toLowerCase()) {\r\n      // This path points to another device so it is not applicable\r\n      continue;\r\n    }\r\n\r\n    if (!resolvedDevice) {\r\n      resolvedDevice = device;\r\n    }\r\n    if (!resolvedAbsolute) {\r\n      resolvedTail = tail + '\\\\' + resolvedTail;\r\n      resolvedAbsolute = isAbsolute;\r\n    }\r\n\r\n    if (resolvedDevice && resolvedAbsolute) {\r\n      break;\r\n    }\r\n  }\r\n\r\n  // Convert slashes to backslashes when `resolvedDevice` points to an UNC\r\n  // root. Also squash multiple slashes into a single one where appropriate.\r\n  if (isUnc) {\r\n    resolvedDevice = normalizeUNCRoot(resolvedDevice);\r\n  }\r\n\r\n  // At this point the path should be resolved to a full absolute path,\r\n  // but handle relative paths to be safe (might happen when process.cwd()\r\n  // fails)\r\n\r\n  // Normalize the tail path\r\n  resolvedTail = normalizeArray(resolvedTail.split(/[\\\\\\/]+/),\r\n                                !resolvedAbsolute).join('\\\\');\r\n\r\n  return (resolvedDevice + (resolvedAbsolute ? '\\\\' : '') + resolvedTail) ||\r\n         '.';\r\n};\r\n\r\n\r\nwin32.normalize = function(path) {\r\n  var result = win32StatPath(path),\r\n      device = result.device,\r\n      isUnc = result.isUnc,\r\n      isAbsolute = result.isAbsolute,\r\n      tail = result.tail,\r\n      trailingSlash = /[\\\\\\/]$/.test(tail);\r\n\r\n  // Normalize the tail path\r\n  tail = normalizeArray(tail.split(/[\\\\\\/]+/), !isAbsolute).join('\\\\');\r\n\r\n  if (!tail && !isAbsolute) {\r\n    tail = '.';\r\n  }\r\n  if (tail && trailingSlash) {\r\n    tail += '\\\\';\r\n  }\r\n\r\n  // Convert slashes to backslashes when `device` points to an UNC root.\r\n  // Also squash multiple slashes into a single one where appropriate.\r\n  if (isUnc) {\r\n    device = normalizeUNCRoot(device);\r\n  }\r\n\r\n  return device + (isAbsolute ? '\\\\' : '') + tail;\r\n};\r\n\r\n\r\nwin32.isAbsolute = function(path) {\r\n  return win32StatPath(path).isAbsolute;\r\n};\r\n\r\nwin32.join = function() {\r\n  var paths = [];\r\n  for (var i = 0; i < arguments.length; i++) {\r\n    var arg = arguments[i];\r\n    if (!util.isString(arg)) {\r\n      throw new TypeError('Arguments to path.join must be strings');\r\n    }\r\n    if (arg) {\r\n      paths.push(arg);\r\n    }\r\n  }\r\n\r\n  var joined = paths.join('\\\\');\r\n\r\n  // Make sure that the joined path doesn't start with two slashes, because\r\n  // normalize() will mistake it for an UNC path then.\r\n  //\r\n  // This step is skipped when it is very clear that the user actually\r\n  // intended to point at an UNC path. This is assumed when the first\r\n  // non-empty string arguments starts with exactly two slashes followed by\r\n  // at least one more non-slash character.\r\n  //\r\n  // Note that for normalize() to treat a path as an UNC path it needs to\r\n  // have at least 2 components, so we don't filter for that here.\r\n  // This means that the user can use join to construct UNC paths from\r\n  // a server name and a share name; for example:\r\n  //   path.join('//server', 'share') -> '\\\\\\\\server\\\\share\\')\r\n  if (!/^[\\\\\\/]{2}[^\\\\\\/]/.test(paths[0])) {\r\n    joined = joined.replace(/^[\\\\\\/]{2,}/, '\\\\');\r\n  }\r\n\r\n  return win32.normalize(joined);\r\n};\r\n\r\n\r\n// path.relative(from, to)\r\n// it will solve the relative path from 'from' to 'to', for instance:\r\n// from = 'C:\\\\orandea\\\\test\\\\aaa'\r\n// to = 'C:\\\\orandea\\\\impl\\\\bbb'\r\n// The output of the function should be: '..\\\\..\\\\impl\\\\bbb'\r\nwin32.relative = function(from, to) {\r\n  from = win32.resolve(from);\r\n  to = win32.resolve(to);\r\n\r\n  // windows is not case sensitive\r\n  var lowerFrom = from.toLowerCase();\r\n  var lowerTo = to.toLowerCase();\r\n\r\n  var toParts = trimArray(to.split('\\\\'));\r\n\r\n  var lowerFromParts = trimArray(lowerFrom.split('\\\\'));\r\n  var lowerToParts = trimArray(lowerTo.split('\\\\'));\r\n\r\n  var length = Math.min(lowerFromParts.length, lowerToParts.length);\r\n  var samePartsLength = length;\r\n  for (var i = 0; i < length; i++) {\r\n    if (lowerFromParts[i] !== lowerToParts[i]) {\r\n      samePartsLength = i;\r\n      break;\r\n    }\r\n  }\r\n\r\n  if (samePartsLength == 0) {\r\n    return to;\r\n  }\r\n\r\n  var outputParts = [];\r\n  for (var i = samePartsLength; i < lowerFromParts.length; i++) {\r\n    outputParts.push('..');\r\n  }\r\n\r\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\r\n\r\n  return outputParts.join('\\\\');\r\n};\r\n\r\n\r\nwin32._makeLong = function(path) {\r\n  // Note: this will *probably* throw somewhere.\r\n  if (!util.isString(path))\r\n    return path;\r\n\r\n  if (!path) {\r\n    return '';\r\n  }\r\n\r\n  var resolvedPath = win32.resolve(path);\r\n\r\n  if (/^[a-zA-Z]\\:\\\\/.test(resolvedPath)) {\r\n    // path is local filesystem path, which needs to be converted\r\n    // to long UNC path.\r\n    return '\\\\\\\\?\\\\' + resolvedPath;\r\n  } else if (/^\\\\\\\\[^?.]/.test(resolvedPath)) {\r\n    // path is network UNC path, which needs to be converted\r\n    // to long UNC path.\r\n    return '\\\\\\\\?\\\\UNC\\\\' + resolvedPath.substring(2);\r\n  }\r\n\r\n  return path;\r\n};\r\n\r\n\r\nwin32.dirname = function(path) {\r\n  var result = win32SplitPath(path),\r\n      root = result[0],\r\n      dir = result[1];\r\n\r\n  if (!root && !dir) {\r\n    // No dirname whatsoever\r\n    return '.';\r\n  }\r\n\r\n  if (dir) {\r\n    // It has a dirname, strip trailing slash\r\n    dir = dir.substr(0, dir.length - 1);\r\n  }\r\n\r\n  return root + dir;\r\n};\r\n\r\n\r\nwin32.basename = function(path, ext) {\r\n  var f = win32SplitPath(path)[2];\r\n  // TODO: make this comparison case-insensitive on windows?\r\n  if (ext && f.substr(-1 * ext.length) === ext) {\r\n    f = f.substr(0, f.length - ext.length);\r\n  }\r\n  return f;\r\n};\r\n\r\n\r\nwin32.extname = function(path) {\r\n  return win32SplitPath(path)[3];\r\n};\r\n\r\n\r\nwin32.format = function(pathObject) {\r\n  if (!util.isObject(pathObject)) {\r\n    throw new TypeError(\r\n        \"Parameter 'pathObject' must be an object, not \" + typeof pathObject\r\n    );\r\n  }\r\n\r\n  var root = pathObject.root || '';\r\n\r\n  if (!util.isString(root)) {\r\n    throw new TypeError(\r\n        \"'pathObject.root' must be a string or undefined, not \" +\r\n        typeof pathObject.root\r\n    );\r\n  }\r\n\r\n  var dir = pathObject.dir;\r\n  var base = pathObject.base || '';\r\n  if (!dir) {\r\n    return base;\r\n  }\r\n  if (dir[dir.length - 1] === win32.sep) {\r\n    return dir + base;\r\n  }\r\n  return dir + win32.sep + base;\r\n};\r\n\r\n\r\nwin32.parse = function(pathString) {\r\n  if (!util.isString(pathString)) {\r\n    throw new TypeError(\r\n        \"Parameter 'pathString' must be a string, not \" + typeof pathString\r\n    );\r\n  }\r\n  var allParts = win32SplitPath(pathString);\r\n  if (!allParts || allParts.length !== 4) {\r\n    throw new TypeError(\"Invalid path '\" + pathString + \"'\");\r\n  }\r\n  return {\r\n    root: allParts[0],\r\n    dir: allParts[0] + allParts[1].slice(0, -1),\r\n    base: allParts[2],\r\n    ext: allParts[3],\r\n    name: allParts[2].slice(0, allParts[2].length - allParts[3].length)\r\n  };\r\n};\r\n\r\n\r\nwin32.sep = '\\\\';\r\nwin32.delimiter = ';';\r\n\r\n\r\n// Split a filename into [root, dir, basename, ext], unix version\r\n// 'root' is just a slash, or nothing.\r\nvar splitPathRe =\r\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\r\nvar posix = {};\r\n\r\n\r\nfunction posixSplitPath(filename) {\r\n  return splitPathRe.exec(filename).slice(1);\r\n}\r\n\r\n\r\n// path.resolve([from ...], to)\r\n// posix version\r\nposix.resolve = function() {\r\n  var resolvedPath = '',\r\n      resolvedAbsolute = false;\r\n\r\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\r\n    var path = (i >= 0) ? arguments[i] : process.cwd();\r\n\r\n    // Skip empty and invalid entries\r\n    if (!util.isString(path)) {\r\n      throw new TypeError('Arguments to path.resolve must be strings');\r\n    } else if (!path) {\r\n      continue;\r\n    }\r\n\r\n    resolvedPath = path + '/' + resolvedPath;\r\n    resolvedAbsolute = path[0] === '/';\r\n  }\r\n\r\n  // At this point the path should be resolved to a full absolute path, but\r\n  // handle relative paths to be safe (might happen when process.cwd() fails)\r\n\r\n  // Normalize the path\r\n  resolvedPath = normalizeArray(resolvedPath.split('/'),\r\n                                !resolvedAbsolute).join('/');\r\n\r\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\r\n};\r\n\r\n// path.normalize(path)\r\n// posix version\r\nposix.normalize = function(path) {\r\n  var isAbsolute = posix.isAbsolute(path),\r\n      trailingSlash = path && path[path.length - 1] === '/';\r\n\r\n  // Normalize the path\r\n  path = normalizeArray(path.split('/'), !isAbsolute).join('/');\r\n\r\n  if (!path && !isAbsolute) {\r\n    path = '.';\r\n  }\r\n  if (path && trailingSlash) {\r\n    path += '/';\r\n  }\r\n\r\n  return (isAbsolute ? '/' : '') + path;\r\n};\r\n\r\n// posix version\r\nposix.isAbsolute = function(path) {\r\n  return path.charAt(0) === '/';\r\n};\r\n\r\n// posix version\r\nposix.join = function() {\r\n  var path = '';\r\n  for (var i = 0; i < arguments.length; i++) {\r\n    var segment = arguments[i];\r\n    if (!util.isString(segment)) {\r\n      throw new TypeError('Arguments to path.join must be strings');\r\n    }\r\n    if (segment) {\r\n      if (!path) {\r\n        path += segment;\r\n      } else {\r\n        path += '/' + segment;\r\n      }\r\n    }\r\n  }\r\n  return posix.normalize(path);\r\n};\r\n\r\n\r\n// path.relative(from, to)\r\n// posix version\r\nposix.relative = function(from, to) {\r\n  from = posix.resolve(from).substr(1);\r\n  to = posix.resolve(to).substr(1);\r\n\r\n  var fromParts = trimArray(from.split('/'));\r\n  var toParts = trimArray(to.split('/'));\r\n\r\n  var length = Math.min(fromParts.length, toParts.length);\r\n  var samePartsLength = length;\r\n  for (var i = 0; i < length; i++) {\r\n    if (fromParts[i] !== toParts[i]) {\r\n      samePartsLength = i;\r\n      break;\r\n    }\r\n  }\r\n\r\n  var outputParts = [];\r\n  for (var i = samePartsLength; i < fromParts.length; i++) {\r\n    outputParts.push('..');\r\n  }\r\n\r\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\r\n\r\n  return outputParts.join('/');\r\n};\r\n\r\n\r\nposix._makeLong = function(path) {\r\n  return path;\r\n};\r\n\r\n\r\nposix.dirname = function(path) {\r\n  var result = posixSplitPath(path),\r\n      root = result[0],\r\n      dir = result[1];\r\n\r\n  if (!root && !dir) {\r\n    // No dirname whatsoever\r\n    return '.';\r\n  }\r\n\r\n  if (dir) {\r\n    // It has a dirname, strip trailing slash\r\n    dir = dir.substr(0, dir.length - 1);\r\n  }\r\n\r\n  return root + dir;\r\n};\r\n\r\n\r\nposix.basename = function(path, ext) {\r\n  var f = posixSplitPath(path)[2];\r\n  // TODO: make this comparison case-insensitive on windows?\r\n  if (ext && f.substr(-1 * ext.length) === ext) {\r\n    f = f.substr(0, f.length - ext.length);\r\n  }\r\n  return f;\r\n};\r\n\r\n\r\nposix.extname = function(path) {\r\n  return posixSplitPath(path)[3];\r\n};\r\n\r\n\r\nposix.format = function(pathObject) {\r\n  if (!util.isObject(pathObject)) {\r\n    throw new TypeError(\r\n        \"Parameter 'pathObject' must be an object, not \" + typeof pathObject\r\n    );\r\n  }\r\n\r\n  var root = pathObject.root || '';\r\n\r\n  if (!util.isString(root)) {\r\n    throw new TypeError(\r\n        \"'pathObject.root' must be a string or undefined, not \" +\r\n        typeof pathObject.root\r\n    );\r\n  }\r\n\r\n  var dir = pathObject.dir ? pathObject.dir + posix.sep : '';\r\n  var base = pathObject.base || '';\r\n  return dir + base;\r\n};\r\n\r\n\r\nposix.parse = function(pathString) {\r\n  if (!util.isString(pathString)) {\r\n    throw new TypeError(\r\n        \"Parameter 'pathString' must be a string, not \" + typeof pathString\r\n    );\r\n  }\r\n  var allParts = posixSplitPath(pathString);\r\n  if (!allParts || allParts.length !== 4) {\r\n    throw new TypeError(\"Invalid path '\" + pathString + \"'\");\r\n  }\r\n  allParts[1] = allParts[1] || '';\r\n  allParts[2] = allParts[2] || '';\r\n  allParts[3] = allParts[3] || '';\r\n\r\n  return {\r\n    root: allParts[0],\r\n    dir: allParts[0] + allParts[1].slice(0, -1),\r\n    base: allParts[2],\r\n    ext: allParts[3],\r\n    name: allParts[2].slice(0, allParts[2].length - allParts[3].length)\r\n  };\r\n};\r\n\r\n\r\nposix.sep = '/';\r\nposix.delimiter = ':';\r\n\r\n\r\nif (isWindows)\r\n  module.exports = win32;\r\nelse /* posix */\r\n  module.exports = posix;\r\n\r\nmodule.exports.posix = posix;\r\nmodule.exports.win32 = win32;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","normalizeArray","parts","allowAboveRoot","res","i","length","p","pop","push","trimArray","arr","lastIndex","start","end","slice","win32SplitPath","filename","result","splitDeviceRe","exec","device","result2","splitTailRe","dir","basename","ext","win32StatPath","path","isUnc","isAbsolute","tail","normalizeUNCRoot","replace","process","isWindows","platform","util","win32","win32.resolve","resolvedDevice","resolvedTail","resolvedAbsolute","arguments","env","substr","toLowerCase","cwd","isString","TypeError","split","join","win32.normalize","trailingSlash","test","win32.isAbsolute","win32.join","paths","arg","joined","normalize","win32.relative","from","to","resolve","lowerFrom","lowerTo","toParts","lowerFromParts","lowerToParts","Math","min","samePartsLength","outputParts","concat","win32._makeLong","resolvedPath","substring","win32.dirname","root","win32.basename","f","win32.extname","win32.format","pathObject","isObject","base","sep","win32.parse","pathString","allParts","name","splitPathRe","posix","posix.resolve","posix.normalize","posix.isAbsolute","charAt","posix.join","segment","posix.relative","fromParts","posix._makeLong","posix.dirname","posix.basename","posix.extname","posix.format","posix.parse"]
}
