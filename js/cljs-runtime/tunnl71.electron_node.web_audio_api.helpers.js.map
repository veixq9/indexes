{"version":3,"sources":["tunnl71/electron_node/web_audio_api/helpers.cljs"],"mappings":"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","names":["tunnl71.electron-node.web-audio-api.helpers/audio-context","js/AudioContext","tunnl71.electron-node.web-audio-api.helpers/offline-context","js/OfflineAudioContext","tunnl71.electron-node.web-audio-api.helpers/now","tunnl71.electron-node.web-audio-api.helpers/node:gain","ac","p__17403","map__17406","cljs.core/--destructure-map","cljs.core.get","tunnl71.electron-node.web-audio-api.helpers/panner","x","y","z","panningModel","distanceModel","refDistance","maxDistance","rollOfFactor","coneInnerAngle","coneOuterAngle","coneOuterGain","ks_","defaults","ks","cljs.core.merge","p","cljs.core/clj->js","state","cljs.core.atom","cljs.core/add-watch","p__17557","map__17561","tunnl71.electron-node.web-audio-api.helpers/alternate-stereo-pan","stereo-panner","dt","cljs.core.doall","cljs.core.take","cljs.core.map","v","t","tunnl71.electron-node.signals/cos","Math/PI","cljs.core/iterate","cljs.core.partial","cljs.core/+","tunnl71.electron-node.web-audio-api.helpers/node:panner-equalpower","tunnl71.electron-node.web-audio-api.helpers/panner-3d","tunnl71.electron-node.web-audio-api.helpers/node:stereo-panner","tunnl71.electron-node.web-audio-api.helpers/connect","source","nodes","n","ns","cljs.core/empty?","cljs.core/first","cljs.core/rest","tunnl71.electron-node.web-audio-api.helpers/new-source!","audio-context","source-path","decoded-source","js/fetch","result","ab","cljs.core.println","decoded","cljs.core/reset!","js/AudioBufferSourceNode","p__17644","map__17647","tunnl71.electron-node.web-audio-api.helpers/add-pann-effect!","dx","dy","dz","x0","y0","z0","amplitude","t0","ts","p1__17640#","dws","d","cljs.core/cycle","cljs.core.concat","cljs.core.repeat","cljs.core/-","dxs","dys","dzs","xs","cljs.core.reductions","ys","zs","p__17683","vec__17684","cljs.core.nth","cljs.core/vector","p__17699","map__17700","tunnl71.electron-node.web-audio-api.helpers/just-play!","when","offset","duration","js/setTimeout","cljs.core/deref"],"sourcesContent":["(ns tunnl71.electron-node.web-audio-api.helpers\n  (:require\n   [tunnl71.electron-node.signals]\n   ;; [\"tone\"]\n   ))\n\n(defn audio-context [] (new js/AudioContext ))\n\n;; =================  ========================================\n(defn offline-context\n  []\n  (new js/OfflineAudioContext 2 (* 44100 40) 44100))\n\n;; =================  ========================================\n\n(defn now []\n  audio-context.currentTime)\n#_(defn gain!\n    [target dt]\n    (-> gain-node (.-gain) (.linearRampToValueAtTime target (+ audio-context.currentTime dt))))\n\n(defn node:gain [ac] (-> audio-context (.createGain )))\n\n;; panner\n(comment\n  (defprotocol Associable\n    (assoc!! [this k v]))\n  (defprotocol Creatable\n    (create! [this]))\n  (defrecord Panner [x\n                     y\n                     z\n                     panningModel\n                     distanceModel\n                     refDistance\n                     maxDistance\n                     rollOfFactor\n                     coneInnerAngle\n                     coneOuterAngle\n                     coneOuterGain]\n    Associable\n    (assoc!! [panner k v] (-> panner (.-orientationX) (.setValueAtTime 1 audio-context.currentTime)))\n\n    Creatable\n    (create! [this ] this)\n    )\n\n  (->Panner 1 2 3))\n(defn panner\n  ;; INCOMPLETE\n  [{:keys [x\n           y\n           z\n           panningModel\n           distanceModel\n           refDistance\n           maxDistance\n           rollOfFactor\n           coneInnerAngle\n           coneOuterAngle\n           coneOuterGain] \n    :or {} :as ks_}]\n\n  (let [\n        defaults {:x 0\n                  :y 0\n                  :z 0\n                  :panningModel  \"equalpower\"\n                  :distanceModel \"inverse\"\n                  :refDistance 1\n                  :maxDistance 10000\n                  :rollOfFactor   1\n                  :coneInnerAngle 360\n                  :coneOuterAngle 0\n                  :coneOuterGain 0\n                  }\n        ks (merge defaults ks_)\n        p (-> audio-context (.createPanner\n                             (clj->js ks)))\n        state (atom ks)]\n    (add-watch state :x (fn set-val!\n                          []\n                          (-> panner (.-orientationX) (.setValueAtTime 1 audio-context.currentTime))\n                          (-> panner (.-orientationY) (.setValueAtTime 1 audio-context.currentTime))\n                          (-> panner (.-orientationZ) (.setValueAtTime 0 audio-context.currentTime))))\n    state))\n;; (panner {:fo \"eb\"})\n(defn alternate-stereo-pan\n  [{:keys [stereo-panner dt] :or {dt 0.5}}]\n  (doall (take 100 (map (fn [v t]\n                          (-> stereo-panner (.valueOf) (.-pan) (.setValueAtTime v t)))\n                        (tunnl71.electron-node.signals/cos Math/PI )\n                        (iterate (partial + dt) (now))))))\n(defn node:panner-equalpower\n  []\n  (-> audio-context (.createPanner (clj->js {:panningModel \"equalpower\"\n                                             ;; :distanceModel \"inverse\"\n                                             ;; :refDistance 1\n                                             ;; :maxDistance 10000\n                                             ;; :rollOfFactor 1\n                                             ;; :coneInnerAngle 360\n                                             ;; :coneOuterAngle 0\n                                             ;; :coneOuterGain 0\n                                             }))))\n(defn panner-3d\n  []\n  (-> audio-context (.createPanner (clj->js {:panningModel \"hr???\"\n                                             :distanceModel \"inverse\"\n                                             :refDistance 1\n                                             :maxDistance 10000\n                                             :rollOfFactor 1\n                                             :coneInnerAngle 360\n                                             :coneOuterAngle 0\n                                             :coneOuterGain 0\n                                             }))))\n(defn node:stereo-panner [] (-> audio-context (.createStereoPanner )))\n\n(defn connect\n  [source nodes]\n  (loop [n source\n         ns nodes]\n    (if (empty? ns)\n      (.connect n audio-context.destination)\n      (do\n        (.connect n (first ns))\n        (recur (first ns) (rest ns))))))\n\n(defn new-source!\n  \"path -> atom source\"\n  [audio-context source-path]\n  (let [decoded-source (atom nil)]\n    (-> (js/fetch\n         source-path)\n        (.then (fn [result]\n                 (-> (-> result (.arrayBuffer))\n                     (.then (fn [ab]\n                              (println ab)\n                              (.decodeAudioData audio-context ab)))\n\n                     (.then (fn [decoded]\n                              (println \"decoded\" decoded)\n                              (reset! decoded-source (new js/AudioBufferSourceNode audio-context (clj->js {:buffer  decoded})))))))))\n\n    #_(while (nil? @decoded-source)\n        (js/setTimeout #(do (println \"fucky fucky\")) \"3000\"))\n    decoded-source\n    ))\n\n\n\n(defn add-pann-effect!\n  [{:keys [n dt dx dy dz x0 y0 z0 amplitude] :or {n 1 dt 0.1 dz 0.1 dx 0.1 dy 0.1 x0 panner.positionX.value\n                                                  y0 panner.positionX.value\n                                                  z0 panner.positionZ.value0\n                                                  amplitude 32\n                                                  }}]\n  (let [\n        t0 (now)\n        ts (iterate #(+ % dt) t0)\n\n        dws (fn [d] (cycle (concat (repeat amplitude d) (map - (repeat amplitude d)) (map - (repeat amplitude d)) (repeat amplitude d))))\n        dxs (dws dx)\n        dys (dws dy)\n        dzs (dws dz)\n        xs (reductions + x0 dxs)\n        ys (reductions + y0 dys)\n        zs (reductions + z0 dzs)\n\n        ;; ys (cycle (take 4 (iterate (partial + dy) y0)))\n        ]\n    (doall (take n\n                 (map (fn [[x y z] t]\n                        (-> panner (.-positionX) (.setValueAtTime x t))\n                        (-> panner (.-positionY) (.setValueAtTime y t))\n                        (-> panner (.-positionZ) (.setValueAtTime z t)))\n                      (map vector xs ys zs) ts)))))\n\n(defn just-play!\n  [ac source-path {:keys [when offset duration nodes] :or {nodes []}}]\n  (let [decoded-source (new-source! ac source-path)]\n    (js/setTimeout #(do (connect @decoded-source nodes)\n                        (-> @decoded-source (.start when offset duration)))\n                   4000)\n    decoded-source\n    )) \n\n"]}