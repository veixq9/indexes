{
"version":3,
"file":"module$node_modules$audiobuffer_to_blob$index.js",
"lineCount":3,
"mappings":"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",
"sources":["node_modules/audiobuffer-to-blob/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$audiobuffer_to_blob$index\"] = function(global,require,module,exports) {\nfunction audioBufferToBlob(audioBuffer, type) {\n  const numberOfChannels = audioBuffer.numberOfChannels;\n  const sampleRate = audioBuffer.sampleRate;\n  const length = audioBuffer.length;\n  const interleaved = new Float32Array(length * numberOfChannels);\n  for (let channel = 0; channel < numberOfChannels; channel++) {\n    const channelData = audioBuffer.getChannelData(channel);\n    for (let i = 0; i < length; i++) {\n      interleaved[i * numberOfChannels + channel] = channelData[i];\n    }\n  }\n  const dataView = encodeWAV(interleaved, numberOfChannels, sampleRate);\n  const blob = new Blob([dataView], { type: type });\n  return blob;\n}\n\nfunction encodeWAV(samples, channels, sampleRate) {\n  const buffer = new ArrayBuffer(44 + samples.length * 2);\n  const view = new DataView(buffer);\n  writeString(view, 0, 'RIFF');\n  view.setUint32(4, 36 + samples.length * 2, true);\n  writeString(view, 8, 'WAVE');\n  writeString(view, 12, 'fmt ');\n  view.setUint32(16, 16, true);\n  view.setUint16(20, 1, true);\n  view.setUint16(22, channels, true);\n  view.setUint32(24, sampleRate, true);\n  view.setUint32(28, sampleRate * channels * 2, true);\n  view.setUint16(32, channels * 2, true);\n  view.setUint16(34, 16, true);\n  writeString(view, 36, 'data');\n  view.setUint32(40, samples.length * 2, true);\n  floatTo16BitPCM(view, 44, samples);\n  return view;\n}\n\nfunction floatTo16BitPCM(output, offset, input) {\n  for (let i = 0; i < input.length; i++, offset += 2) {\n    const s = Math.max(-1, Math.min(1, input[i]));\n    output.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7fff, true);\n  }\n}\n\nfunction writeString(view, offset, string) {\n  for (let i = 0; i < string.length; i++) {\n    view.setUint8(offset + i, string.charCodeAt(i));\n  }\n}\n\nmodule.exports = audioBufferToBlob;\n\n};"],
"names":["shadow$provide","global","require","module","exports","writeString","view","offset","string","i","length","setUint8","charCodeAt","audioBufferToBlob","audioBuffer","type","numberOfChannels","sampleRate","interleaved","Float32Array","channel","channelData","getChannelData","buffer","ArrayBuffer","DataView","setUint32","setUint16","s","Math","max","min","setInt16","blob","Blob"]
}
