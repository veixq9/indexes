{"version":3,"sources":["clojure/core/matrix/impl/wrappers.cljc"],"mappings":"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","names":["cljs.core/PROTOCOL_SENTINEL","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","clojure.core.matrix.impl.wrappers/ScalarWrapper","clojure.core.matrix.impl.wrappers/->ScalarWrapper","value","m","length","clojure.core.matrix.protocols/new-vector","rows","columns","clojure.core.matrix.protocols/new-matrix","dims","clojure.core.matrix.protocols/new-matrix-nd","data","cljs.core/long","clojure.core.matrix.protocols/dimensionality","clojure.core.matrix.protocols/is-scalar?","clojure.core.matrix.protocols/get-0d","clojure.core.matrix.protocols/clone","dimension-number","cljs.core.ex_info","row","column","indexes","cljs.core/seq","x","v","y","cljs.core/not","cljs.core/count","clojure.core.matrix.impl.wrappers/SliceWrapper","clojure.core.matrix.impl.wrappers/->SliceWrapper","array","slice","clojure.core.matrix.protocols/get-major-slice-seq","clojure.core.matrix.protocols/construct-matrix","cljs.core/next","clojure.core.matrix.protocols/get-shape","clojure.core.matrix.protocols/dimension-count","clojure.core.matrix.protocols/get-2d","clojure.core.matrix.protocols/get-nd","cljs.core/cons","clojure.core.matrix.protocols/get-1d","clojure.core.matrix.protocols/set-1d!","clojure.core.matrix.protocols/is-vector?","cljs.core.mapv","clojure.core.matrix.protocols/convert-to-nested-vectors","clojure.core.matrix.protocols/set-2d!","clojure.core.matrix.protocols/set-nd!","clojure.core.matrix.protocols/is-mutable?","G__36842","G__36843","clojure.core.matrix.impl.wrappers/wrap-slice","clojure.core.matrix.impl.wrappers/NDWrapper","clojure.core.matrix.impl.wrappers/->NDWrapper","shape","dim-map","index-maps","source-position","i","clojure.core.matrix.protocols/get-major-slice","not-found","cljs.core/integer?","clojure.core.matrix.protocols/set-1d","clojure.core.matrix.protocols/coerce-param","clojure.core.matrix.implementations.get_canonical_object","clojure.core.matrix.protocols/set-2d","clojure.core.matrix.protocols/set-nd","start","cljs.core.not_EQ_","vlen","end","old-index-map","new-index-map","cljs.core.long_array","n__5636__auto__","clojure.core.matrix.utils.long_array_of","clojure.core.matrix.utils.object_array_of","clojure.core.matrix.utils/copy-long-array","ix","im","i36861","tdim__36658__auto__","i36862","i36863","i36864","cljs.core.nth","i36857","i36858","i36859","n","cljs.core/vec","i36860","dim","nsp","sdim","n__28998__auto__","length__28999__auto__","new-xs__29000__auto__","j__29001__auto__","clojure.core.matrix.protocols/persistent-vector-coerce","cljs.core/type","clojure.core.matrix.impl.wrappers/wrap-nd","shp","clojure.core.matrix.utils/long-range","cljs.core.object_array","p1__36877#","cljs.core.map","cljs.core.range","clojure.core.matrix.impl.wrappers/wrap-selection","indices","cljs.core/long-array","cljs.core.repeat","clojure.core.matrix.impl.wrappers/wrap-submatrix","dim-ranges","_","a","cnt","new-shape","p__36878","vec__36879","len","p__36882","vec__36883","clojure.core.matrix.impl.wrappers/wrap-broadcast","target-shape","tshape","tdims","mshape","mdims","cljs.core.concat","iter__5523__auto__","s__36887","cljs.core/LazySeq","temp__5804__auto__","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","b__36889","cljs.core/chunk-buffer","i__36888","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__36886","cljs.core/chunk-rest","cljs.core/first","cljs.core/rest","arr","mdim","mdc","tdc","clojure.core.matrix.impl.wrappers/wrap-scalar","clojure.core.matrix.implementations.register_implementation","cljs.core/chunk-first"],"sourcesContent":["(ns clojure.core.matrix.impl.wrappers\n  \"Implementations for specialised wrapper types.\n\n   These wrapper types enable efficient of convenient implementation of various core.matrix protocols.\"\n  (:require [clojure.core.matrix.protocols :as mp]\n            [clojure.core.matrix.implementations :as imp]\n            [clojure.core.matrix.impl.persistent-vector]\n            [clojure.core.matrix.utils :as u])\n  #?(:clj (:require\n            [clojure.core.matrix.macros :refer [TODO error]]\n            [clojure.core.matrix.macros-clj :refer [abutnth areverse]])\n     :cljs (:require-macros\n             [clojure.core.matrix.macros :refer [TODO error c-for]]\n             [clojure.core.matrix.macros-cljs :refer [abutnth areverse]]\n             [clojure.core.matrix.impl.wrappers :refer [set-source-index]]))\n  #?(:clj\n      (:import [clojure.lang Seqable Indexed])))\n\n;; =============================================\n;; WRAPPER IMPLEMENTATIONS\n;;\n;; wrappers are used to implement specific shapes / types of arrays\n;; that are useful to implement certain array operations (typically as return values)\n\n#?(:clj (do\n(set! *warn-on-reflection* true)\n(set! *unchecked-math* :warn-on-boxed)\n))\n\n(declare wrap-slice wrap-nd wrap-scalar)\n\n;; =============================================\n;; ScalarWrapper\n;;\n;; wraps a single scalar as a mutable 0-D array\n\n(deftype ScalarWrapper [^{:volatile-mutable true} value]\n  Object\n    (toString [m] (str value))\n\n  mp/PImplementation\n    (implementation-key [m]\n      :scalar-wrapper)\n    ;; we delegate to persistent-vector implementation for new matrices.\n    (meta-info [m]\n      {:doc \"Wraps a single scalar as a mutable 0-D array\"})\n    (new-vector [m length]\n      (mp/new-vector [] length))\n    (new-matrix [m rows columns]\n      (mp/new-matrix [] rows columns))\n    (new-matrix-nd [m dims]\n      (mp/new-matrix-nd [] dims))\n    (construct-matrix [m data]\n      (if (== 0 (long (mp/dimensionality data)))\n        (if (mp/is-scalar? data)\n          (ScalarWrapper. data)\n          (ScalarWrapper. (mp/get-0d data)))\n        (mp/clone data)))\n    (supports-dimensionality? [m dims]\n      (== (long dims) 0))\n\n  mp/PDimensionInfo\n    (dimensionality [m]\n      0)\n    (get-shape [m]\n      [])\n    (is-scalar? [m]\n      false) ;; note that a ScalarWrapper is not itself a scalar!!\n    (is-vector? [m]\n      false)\n    (dimension-count [m dimension-number]\n      (error \"Can't get dimension-count of ScalarWrapper: no dimensions exist\"))\n\n  mp/PIndexedAccess\n    (get-1d [m row]\n      (error \"Can't get-1d on ScalarWrapper.\"))\n    (get-2d [m row column]\n      (error \"Can't get-2d on ScalarWrapper.\"))\n    (get-nd [m indexes]\n      (if (seq indexes)\n        (error \"Can't get-1d on ScalarWrapper.\")\n        value))\n\n  mp/PIndexedSetting\n    (set-1d [m x v]\n      (error \"Can't do 1D set on 0D array\"))\n    (set-2d [m x y v]\n      (error \"Can't do 2D set on 0D array\"))\n    (set-nd [m indexes v]\n      (if (not (seq indexes))\n        (ScalarWrapper. v)\n        (error \"Can't set on 0D array with dimensionality: \" (count indexes))))\n    (is-mutable? [m] true)\n\n  ;; in nested vector format, we don't want the wrapper....\n  mp/PConversion\n    (convert-to-nested-vectors [m]\n      value)\n\n  mp/PZeroDimensionAccess\n    (get-0d [m]\n      value)\n    (set-0d! [m v]\n      (set! value v))\n\n  mp/PMatrixCloning\n    (clone [m] (ScalarWrapper. value)))\n\n;; =============================================\n;; SliceWrapper\n;;\n;; wraps a row-major slice of an array\n\n(deftype SliceWrapper [array ^long slice]\n  #?(:clj Seqable :cljs ISeqable)\n    (#?(:clj seq :cljs -seq) [m]\n      (mp/get-major-slice-seq m))\n\n  mp/PImplementation\n    (implementation-key [m]\n      :slice-wrapper)\n    ;; we delegate to persistent-vector implementation for new matrices.\n    (meta-info [m]\n      {:doc \"Wraps a row-major slice of an array\"})\n    (new-vector [m length]\n      (mp/new-vector [] length))\n    (new-matrix [m rows columns]\n      (mp/new-matrix [] rows columns))\n    (new-matrix-nd [m dims]\n      (mp/new-matrix-nd [] dims))\n    (construct-matrix [m data]\n      (mp/construct-matrix [] data))\n    (supports-dimensionality? [m dims]\n      true)\n\n  mp/PDimensionInfo\n    (dimensionality [m]\n      (dec (long (mp/dimensionality array))))\n    (get-shape [m]\n      (next (mp/get-shape array)))\n    (is-scalar? [m]\n      false)\n    (is-vector? [m]\n      (== 2 (long (mp/dimensionality array)))) ;; i.e. the slice has dimensionality 1\n    (dimension-count [m dimension-number]\n      (let [dimension-number (long dimension-number)]\n        (if (< dimension-number 0)\n         (error \"Can't access negative dimension!\")\n         (mp/dimension-count array (inc dimension-number)))))\n\n  mp/PIndexedAccess\n    (get-1d [m row]\n      (mp/get-2d array slice row))\n    (get-2d [m row column]\n      (mp/get-nd array [slice row column]))\n    (get-nd [m indexes]\n      (mp/get-nd array (cons slice indexes)))\n\n  mp/PZeroDimensionAccess\n    (get-0d [m]\n      (mp/get-1d array slice))\n    (set-0d! [m value]\n      (mp/set-1d! array slice value))\n\n  mp/PConversion\n    (convert-to-nested-vectors [m]\n      (if (mp/is-vector? array)\n        (mp/get-1d array slice)\n        (mapv mp/convert-to-nested-vectors (mp/get-major-slice-seq m))))\n\n  mp/PIndexedSetting\n    (set-1d [m row v]\n      (let [m (mp/clone m)]\n        (mp/set-1d! m row v)\n        m))\n    (set-2d [m row column v]\n      (let [m (mp/clone m)]\n        (mp/set-2d! m row column v)\n        m))\n    (set-nd [m indexes v]\n      (let [m (mp/clone m)]\n        (mp/set-nd! m indexes v)\n        m))\n    (is-mutable? [m]\n      (mp/is-mutable? array)) ;; i.e. is the underlying array mutable\n\n  mp/PIndexedSettingMutable\n    (set-1d! [m row v]\n      (mp/set-2d! array slice row v))\n    (set-2d! [m row column v]\n      (mp/set-nd! array [slice row column] v))\n    (set-nd! [m indexes v]\n      (mp/set-nd! array (cons slice indexes) v))\n\n  mp/PMatrixCloning\n    (clone [m] (wrap-slice (mp/clone array) slice))\n\n  Object\n    (toString [m] (str (mp/convert-to-nested-vectors m))))\n\n\n;; =============================================\n;; NDWrapper\n;;\n;; wraps an N-dimensional subset or broadcast of an array\n;; supports aritrary permutations of dimensions and indexes\n#?(:clj\n(defmacro set-source-index\n  \"Sets up an index into the source vector for dimension i at position val\"\n  [ix i val]\n  (let [isym (gensym \"i\")]\n    `(let [~isym ~i\n           tdim# (aget ~'dim-map ~isym)]\n       (when (>= tdim# 0)\n         (aset ~ix tdim# (aget ~(vary-meta `(aget ~'index-maps ~isym) assoc :tag 'longs) ~val))))))\n)\n\n(deftype NDWrapper\n  [array ;; source array (any valid core.matrix matrix)\n   ^longs shape ;; shape of NDWrapper\n   ^longs dim-map ;; map of NDWrapper dimensions to source dimensions\n   ^objects index-maps ;; maps of each NDWrapper dimension's indexes to source dimension indexes\n   ^longs source-position ;; position in source array for non-specified dimensions\n   ]\n  #?(:clj Seqable :cljs ISeqable)\n    (#?(:clj seq :cljs -seq) [m]\n      (mp/get-major-slice-seq m))\n\n  #?(:clj Indexed :cljs IIndexed)\n    (#?(:clj nth :cljs -nth) [m i]\n      (mp/get-major-slice m i))\n\n    (#?(:clj nth :cljs -nth) [m i not-found]\n      (if (and (integer? i) (<= 0 i) (< i (aget shape 0)))\n        (mp/get-major-slice m i)\n        not-found))\n\n    #?(:cljs ICounted)\n    (#?(:clj count :cljs -count) [m]\n      (aget shape 0))\n\n  mp/PImplementation\n    (implementation-key [m]\n      :nd-wrapper)\n    ;; we delegate to persistent-vector implementation for new matrices.\n    (meta-info [m]\n      {:doc \"Wraps an N-dimensional subset or broadcast of an array\"})\n    (new-vector [m length]\n      (mp/new-vector [] length))\n    (new-matrix [m rows columns]\n      (mp/new-matrix [] rows columns))\n    (new-matrix-nd [m dims]\n      (mp/new-matrix-nd [] dims))\n    (construct-matrix [m data]\n      (mp/construct-matrix [] data))\n    (supports-dimensionality? [m dims]\n      true)\n\n  mp/PIndexedSetting\n    (set-1d [m x v]\n      (mp/set-1d (mp/coerce-param (imp/get-canonical-object) m) x v))\n    (set-2d [m x y v]\n      (mp/set-2d (mp/coerce-param (imp/get-canonical-object) m) x y v))\n    (set-nd [m indexes v]\n      (mp/set-nd (mp/coerce-param (imp/get-canonical-object) m) indexes v))\n    (is-mutable? [m] (mp/is-mutable? array))\n\n  mp/PSubVector\n    (subvector [m start length]\n      (when (not= 1 (alength shape)) (error \"Can't take subvector: wrong dimensionality = \" (alength shape)))\n      (let [vlen (long (aget shape 0))\n            start (long start)\n            length (long length)\n            end (+ start length)\n            ^longs old-index-map (aget index-maps 0)\n            ^longs new-index-map (long-array length)]\n        (when (< start 0) (error \"Start index out of bounds: \" start))\n        (when (> end vlen) (error \"End index out of bounds: \" end))\n        (dotimes [i length]\n          (aset new-index-map i (aget old-index-map (+ start i))))\n        (NDWrapper.\n          array\n          (u/long-array-of length)\n          dim-map\n          (u/object-array-of new-index-map)\n          (u/copy-long-array source-position))))\n\n  mp/PDimensionInfo\n    (dimensionality [m]\n      (alength shape))\n    (get-shape [m]\n      shape)\n    (is-scalar? [m]\n      false)\n    (is-vector? [m]\n      (== 1 (alength shape)))\n    (dimension-count [m dimension-number]\n      (aget shape (int dimension-number)))\n\n  mp/PZeroDimensionAccess\n    (get-0d [m]\n      (mp/get-nd array source-position))\n    (set-0d! [m value]\n      (mp/set-nd! array source-position value))\n\n  mp/PIndexedAccess\n    (get-1d [m row]\n      (let [ix (u/copy-long-array source-position)\n            ^longs im (aget index-maps 0)]\n        (set-source-index ix 0 row)\n        (mp/get-nd array ix)))\n    (get-2d [m row column]\n      (let [ix (u/copy-long-array source-position)]\n        (set-source-index ix 0 row)\n        (set-source-index ix 1 column)\n        (mp/get-nd array ix)))\n    (get-nd [m indexes]\n      (let [^longs ix (u/copy-long-array source-position)]\n        (dotimes [i (alength shape)]\n          (set-source-index ix i (nth indexes i)))\n        (mp/get-nd array ix)))\n\n    mp/PIndexedSettingMutable\n    (set-1d! [m row v]\n      (let [ix (u/copy-long-array source-position)\n            ^longs im (aget index-maps 0)]\n        (set-source-index ix 0 row)\n        (mp/set-nd! array ix v)))\n    (set-2d! [m row column v]\n      (let [ix (u/copy-long-array source-position)]\n        (set-source-index ix 0 row)\n        (set-source-index ix 1 column)\n        (mp/set-nd! array ix v)))\n    (set-nd! [m indexes v]\n      (let [^longs ix (u/copy-long-array source-position)\n            n (alength shape)]\n        (when (not= n (count indexes))\n          (error \"set-nd! called with index \" (vec indexes) \" indexes on wrapped array of shape \" shape))\n        (dotimes [i (alength shape)]\n          (set-source-index ix i (nth indexes i)))\n        (mp/set-nd! array ix v)))\n\n    mp/PSliceView2\n      (get-slice-view [m dim i]\n        (let [i (long i)\n              dim (long dim)\n              nsp (u/copy-long-array source-position)\n              sdim (long (aget dim-map dim))]\n          (aset nsp sdim i)\n          (NDWrapper. array\n                      (abutnth dim shape)\n                      (abutnth dim dim-map)\n                      (abutnth dim index-maps)\n                      nsp)))\n\n  Object\n    (toString [m]\n      (str (mp/persistent-vector-coerce m))))\n\n(defn wrap-slice\n  \"Creates a view of a major slice of an array.\"\n  ([m slice]\n    (let [slice (long slice)]\n      (when (>= slice (long (mp/dimension-count m 0)))\n        (error \"Slice \" slice \" does not exist on \" (#?(:clj class :cljs type) m)))\n      (SliceWrapper. m slice))))\n\n(defn wrap-nd\n  \"Wraps an array in a NDWrapper view. Useful for taking submatrices, subviews etc.\"\n  ([m]\n      (let [shp (long-array (mp/get-shape m))\n            dims (alength shp)]\n        (NDWrapper. m\n                  shp\n                  (u/long-range dims)\n                  (object-array (map #(u/long-range (mp/dimension-count m %)) (range dims)))\n                  (long-array dims)))))\n\n(defn wrap-selection\n  \"Wraps an array using a selection of indexes for each dimension.\"\n  [m indices]\n  (let [shp (long-array (map count indices))\n        dims (count shp)]\n    (NDWrapper.\n      m\n      shp\n      (long-array (range dims))\n      (object-array (map long-array indices))\n      (long-array (repeat dims 0)))))\n\n(defn wrap-submatrix\n  \"Wraps an array using a selection of [start length] ranges for each dimension.\"\n  [m dim-ranges]\n  (let [shp (mp/get-shape m)\n        dims (count shp)\n        _ (if-not (== dims (count dim-ranges)) (error \"submatrix ranges \" dim-ranges \" do not match matrix dimensionality of \" shp))\n        dim-ranges (mapv (fn [a cnt] (if a (vec a) [0 cnt])) dim-ranges shp)\n        new-shape (long-array (map (fn [[start len]] len) dim-ranges))]\n    (NDWrapper.\n      m\n      new-shape\n      (long-array (range (count shp)))\n      (object-array\n        (map (fn [[^long start ^long len]] (long-array (range start (+ start len))))\n             dim-ranges))\n      (long-array (repeat dims 0)))))\n\n(defn wrap-broadcast\n  \"Wraps an array with broadcasting to the given target shape.\"\n  [m target-shape]\n  (let [tshape (long-array target-shape)\n        tdims (alength tshape)\n        mshape (long-array (mp/get-shape m))\n        mdims (alength mshape)\n        dim-map (long-array (concat (repeat (- tdims mdims) -1) (range mdims)))]\n    (NDWrapper.\n      m\n      tshape\n      dim-map\n      (object-array\n        (for [i (range tdims)]\n          (let [i (long i)\n                arr (long-array (aget tshape i))\n                mdim (- i (- tdims mdims))]\n            (when (>= mdim 0)\n              (let [mdc (aget mshape mdim)\n                    tdc (aget tshape i)]\n                (cond\n                  (== mdc 1) nil\n                  (== mdc tdc) (dotimes [i mdc] (aset arr i i))\n                  :else (error \"Can't broadcast shape \" (seq mshape)\n                               \" to target shape \" (seq tshape)))))\n            arr)))\n      (long-array mdims))))\n\n(defn wrap-scalar\n  \"Wraps a scalar value into a mutable 0D array.\"\n  ([m]\n      (cond\n        (mp/is-scalar? m)\n          (ScalarWrapper. m)\n        :else\n          (ScalarWrapper. (mp/get-0d m)))))\n\n;; note we construct these types directly because default implementations are not yet loaded\n;; i.e. the wrap-xxxx functions will probably not yet work\n(imp/register-implementation (ScalarWrapper. 13))\n\n(imp/register-implementation (NDWrapper. [1]\n                                         (long-array 0)\n                                         (long-array 0)\n                                         (object-array 0)\n                                         (long-array [0])))\n\n;(imp/register-implementation (SliceWrapper. [1 2] 0))\n"],"x_google_ignoreList":[0]}