{"version":3,"sources":["thi/ng/strf/core.cljc"],"mappings":"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","names":["var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","thi.ng.strf.core/parse-int","p__33447","vec__33450","cljs.core.nth","seq33442","G__33443","cljs.core/first","cljs.core/next","G__33444","self__5754__auto__","x","radix","default","x'","js/parseInt","js/isNaN","thi.ng.strf.core/parse-long","p__33458","vec__33459","seq33455","G__33456","G__33457","thi.ng.strf.core.parse_int","thi.ng.strf.core/parse-float","p__33464","vec__33465","seq33462","G__33463","js/parseFloat","thi.ng.strf.core/parse-double","p__33474","vec__33475","seq33470","G__33471","thi.ng.strf.core.parse_float","thi.ng.strf.core/parse-boolean","cljs.core._EQ_","clojure.string/lower-case","thi.ng.strf.core/int","cljs.core/int","thi.ng.strf.core/long","thi.ng.strf.core/float","cljs.core/memoize","prec","js/Number","thi.ng.strf.core/double","thi.ng.strf.core/pad-left","len","fill","cljs.core.apply","cljs.core/str","cljs.core.repeat","l","cljs.core/count","cljs.core.subs","thi.ng.strf.core/pad-right","thi.ng.strf.core/hex","pad","G__33494","thi.ng.strf.core/trunc-left","thi.ng.strf.core/trunc-right","thi.ng.strf.core/format","seq33529","G__33530","fmt","args","s","cljs.core/transient","temp__5802__auto__","f","cljs.core.conj_BANG_","G__33560","cljs.core/persistent!","thi.ng.strf.core/date-fields","d","thi.ng.strf.core/time-fields","thi.ng.strf.core/datetime-fields","thi.ng.strf.core/date-formatters","d2","cljs.core.comp","vec__33586","y","m","thi.ng.strf.core.format","vec__33608","vec__33617","p1__33582#","cljs.core/mod","G__33642","thi.ng.strf.core/format-date","js/Error","fexpr__33650","cljs.core/fn?","fexpr__33654","thi.ng.strf.core/now","js/Date","thi.ng.strf.core/timestamp","thi.ng.strf.core/format-16bit-hex","thi.ng.strf.core/rand-bits","bits","G__33669","cljs.core.rand","thi.ng.strf.core/rand-bits-hex","G__33689","fexpr__33688","Math/ceil","thi.ng.strf.core/rand-16bits-hex","G__33704","cljs.core/rand-int","thi.ng.strf.core/new-uuid","G__33721","G__33722","thi.ng.strf.core/html-entities","thi.ng.strf.core/as-str","cljs.core/Keyword","cljs.core/Symbol","cljs.core/name","thi.ng.strf.core/escape-html","clojure.string/escape"],"sourcesContent":["(ns thi.ng.strf.core\n  (:refer-clojure :exclude [float int long double format])\n  (:require\n   [clojure.string :as str])\n  #?(:clj (:import [java.util Calendar Date Locale])))\n\n(defn parse-int\n  [^String x radix & [default]]\n  #?(:clj\n     (try (Integer/parseInt x radix) (catch Exception e default))\n     :cljs\n     (let [x' (js/parseInt x radix)] (if (js/isNaN x') default x'))))\n\n(defn parse-long\n  [^String x radix & [default]]\n  #?(:clj\n     (try (Long/parseLong x radix) (catch Exception e default))\n     :cljs\n     (parse-int x radix default)))\n\n(defn parse-float\n  [^String x & [default]]\n  #?(:clj\n     (try (Float/parseFloat x) (catch Exception e default))\n     :cljs\n     (let [x' (js/parseFloat x)] (if (js/isNaN x') default x'))))\n\n(defn parse-double\n  [^String x & [default]]\n  #?(:clj\n     (try (Double/parseDouble x) (catch Exception e default))\n     :cljs\n     (parse-float x default)))\n\n(defn parse-boolean\n  [^String x]\n  #?(:clj\n     (Boolean/parseBoolean x)\n     :cljs\n     (= \"true\" (str/lower-case x))))\n\n(def int clojure.core/int)\n\n(def long #?(:clj clojure.core/long :cljs int))\n\n(def float\n  (memoize\n   (fn [prec]\n     #?(:clj\n        (let [fmt (str \"%1.\" prec \"f\")]\n          (fn [x]\n            (String/format Locale/US fmt (to-array [(clojure.core/float x)]))))\n        :cljs\n        (fn [x] (.toFixed (js/Number. x) prec))))))\n\n(def double\n  (memoize\n   (fn [prec]\n     #?(:clj\n        (let [fmt (str \"%1.\" prec \"f\")]\n          (fn [x] (String/format Locale/US fmt (to-array [(clojure.core/double x)]))))\n        :cljs\n        (fn [x] (.toFixed (js/Number. x) prec))))))\n\n(def pad-left\n  (memoize\n   (fn [len fill]\n     (let [fill (apply str (repeat len fill))]\n       (fn [x]\n         (let [l (count x)]\n           (if (< l len) (str (subs fill 0 (- len l)) x) x)))))))\n\n(def pad-right\n  (memoize\n   (fn [len fill]\n     (let [fill (apply str (repeat len fill))]\n       (fn [x]\n         (let [l (count x)]\n           (if (< l len) (str x (subs fill 0 (- len l))) x)))))))\n\n(def hex\n  (memoize\n   (fn [len]\n     #?(:clj\n        (let [fmt (str \"%0\" len \"x\")]\n          (fn [x] (clojure.core/format fmt (long x))))\n        :cljs\n        (let [pad (pad-left len \"0\")]\n          (fn [x] (pad (.toString (js/Number. (int x)) 16))))))))\n\n(defn trunc-left\n  [len]\n  (fn [x]\n    (let [l (count x)]\n      (if (<= l len) x (subs x 0 len)))))\n\n(defn trunc-right\n  [len]\n  (fn [x]\n    (let [l (count x)]\n      (if (<= l len) x (subs x (- l len))))))\n\n(defn format\n  [fmt & args]\n  #?(:clj\n     (loop [s (StringBuilder.), fmt fmt, args args]\n       (if-let [f (first fmt)]\n         (if (string? f)\n           (recur (.append s f) (next fmt) args)\n           (recur (.append s (f (first args))) (next fmt) (next args)))\n         (.toString s)))\n     :cljs\n     (loop [s (transient []), fmt fmt, args args]\n       (if-let [f (first fmt)]\n         (if (string? f)\n           (recur (conj! s f) (next fmt) args)\n           (recur (conj! s (f (first args))) (next fmt) (next args)))\n         (apply str (persistent! s))))))\n\n#?(:clj\n   (defn calendar-instance\n     ^Calendar [d] (doto (Calendar/getInstance) (.setTime ^Date d))))\n\n(defn date-fields\n  [d]\n  #?(:clj\n     (let [c (calendar-instance d)]\n       [(.get c Calendar/YEAR)\n        (inc (.get c Calendar/MONTH))\n        (.get c Calendar/DAY_OF_MONTH)])\n     :cljs\n     [[(.getFullYear d)\n       (inc (.getMonth d))\n       (.getDate d)]]))\n\n(defn time-fields\n  [d]\n  #?(:clj\n     (let [c (calendar-instance d)]\n       [(.get c Calendar/HOUR_OF_DAY)\n        (inc (.get c Calendar/MINUTE))\n        (.get c Calendar/SECOND)])\n     :cljs\n     [[(.getHours d)\n       (.getMinutes d)\n       (.getSeconds d)]]))\n\n(defn datetime-fields\n  [d]\n  #?(:clj\n     (let [c (calendar-instance d)]\n       [(.get c Calendar/YEAR)\n        (inc (.get c Calendar/MONTH))\n        (.get c Calendar/DAY_OF_MONTH)\n        (.get c Calendar/HOUR_OF_DAY)\n        (inc (.get c Calendar/MINUTE))\n        (.get c Calendar/SECOND)])\n     :cljs\n     [[(.getFullYear d)\n       (inc (.getMonth d))\n       (.getDate d)\n       (.getHours d)\n       (.getMinutes d)\n       (.getSeconds d)]]))\n\n(def date-formatters\n  (let [d2 (comp (pad-left 2 \"0\") str)]\n    {:yyyy-mm-dd\n     (fn [d]\n       (apply format [str \"-\" d2 \"-\" d2] (date-fields d)))\n     :yyyy-mm-dd-hh-mm-ss\n     (fn [d]\n       (apply format [str \"-\" d2 \"-\" d2 \" \" d2 \":\" d2 \":\" d2] (datetime-fields d)))\n     :yyyymmdd-hhmmss\n     (fn [d]\n       (apply format [str d2 d2 \"-\" d2 d2 d2] (datetime-fields d)))\n     :dd-mm-yyyy\n     (fn [d]\n       (let [[y m d] (date-fields d)]\n         (format [d2 \"/\" d2 \"/\" str] d m y)))\n     :mm-dd-yyyy\n     (fn [d]\n       (let [[y m d] (date-fields d)]\n         (format [d2 \"/\" d2 \"/\" str] m d y)))\n     :dd-mm-yy\n     (fn [d]\n       (let [[y m d] (date-fields d)]\n         (format [d2 \"/\" d2 \"/\" (comp d2 #(mod % 100))] d m y)))\n     :hh-mm-ss\n     (fn [d]\n       (apply format [d2 \":\" d2 \":\" d2] (time-fields d)))}))\n\n(defn format-date\n  ([d] ((date-formatters :yyyy-mm-dd-hh-mm-ss) d))\n  ([fmt d] (if (fn? fmt) (fmt d) ((date-formatters fmt) d))))\n\n(defn now\n  [] #?(:clj (Date.) :cljs (js/Date.)))\n\n(defn timestamp\n  [] #?(:clj (System/currentTimeMillis) :cljs (.getTime (js/Date.))))\n\n(def ^:private format-16bit-hex (pad-left 4 \\0))\n\n(defn rand-bits\n  [bits] (int (* (rand) (bit-shift-left 1 bits))))\n\n(defn rand-bits-hex\n  [bits]\n  ((pad-left (Math/ceil (/ bits 4)) \\0)\n   (#?(:clj Integer/toString :cljs .toString) (rand-bits bits) 16)))\n\n(defn rand-16bits-hex\n  [] (format-16bit-hex (#?(:clj Integer/toString :cljs .toString) (rand-int 0x10000) 16)))\n\n(defn new-uuid\n  []\n  #?(:clj\n     (str (java.util.UUID/randomUUID))\n     :cljs (str\n            (rand-16bits-hex) (rand-16bits-hex)\n            \\- (rand-16bits-hex)\n            \\- (-> (rand-bits 16) (bit-and 0x0fff) (bit-or 0x4000) (.toString 16) (format-16bit-hex))\n            \\- (-> (rand-bits 16) (bit-and 0x3fff) (bit-or 0x8000) (.toString 16) (format-16bit-hex))\n            \\- (rand-16bits-hex) (rand-16bits-hex) (rand-16bits-hex))))\n\n(def html-entities\n  {\\& \"&amp;\"\n   \\< \"&lt;\"\n   \\> \"&gt;\"\n   \\\" \"&quot;\"})\n\n(defn as-str [x]\n  (if (or (keyword? x) (symbol? x))\n    (name x)\n    (str x)))\n\n(defn escape-html\n  [x] (str/escape (as-str x) html-entities))\n"],"x_google_ignoreList":[0]}