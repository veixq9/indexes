{"version":3,"sources":["tunnl71/electron_game/render.cljs"],"mappings":"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","names":["tunnl71.electron-game.render/draw!","es","js/window.requestAnimationFrame","seq__48196","cljs.core/seq","chunk__48197","count__48198","i__48199","temp__5804__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","v","cljs.core.sort_by","cljs.core/<","cljs.core.filter","cljs.core/map?","cljs.core/vals","draw","p__48200","p__48201","map__48202","cljs.core/--destructure-map","cljs.core.get","vec__48203","cljs.core.nth","tunnl71.electron-game.render/serialize-indexes","width-in-blocks","x","y","tunnl71.electron-game.render/window","w","h","iter__5523__auto__","s__48207","cljs.core/LazySeq","xs__6360__auto__","iterys__5519__auto__","s__48209","c__5521__auto__","size__5522__auto__","b__48211","cljs.core/chunk-buffer","i__48210","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__48208","cljs.core/cons","cljs.core/rest","fs__5520__auto__","cljs.core.concat","iter__48206","+x","cljs.core.range","+y","p__48212","map__48213","tunnl71.electron-game.render/random-window","height-in-blocks","cljs.core/rand-int","tunnl71.electron-game.render/step-entities","state","tunnl71.electron-game.render/step!","state'","cljs.core/deref","cljs.core.merge","seq__48214","chunk__48215","count__48216","i__48217","e","step","cljs.core/reset!","cljs.core.swap_BANG_","cljs.core/update","cljs.core/inc","tunnl71.electron-game.render/speed-up","cljs.core.partial","cljs.core/+","tunnl71.electron-game.render/speed-down","this","x__5130__auto__","y__5131__auto__","tunnl71.electron-game.render/pause","with-let48218","reagent.ratom/with-let-values","temp__5808__auto__","reagent.ratom/*ratom-context*","c__20863__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init48219","cljs.core/not","res48220","previous-state","reagent.core.atom","cljs.core._EQ_","tunnl71.electron-game.render/rc-state","tunnl71.tools.core/edn->hiccup","cljs.core.dissoc","tunnl71.electron-game.render/frame-canvas","canvas-state","tunnl71.electron-game.render/root-frame","reagent.core/cursor","cljs.core/enable-console-print!","js/tunnl71","js/tunnl71.electron-game","js/tunnl71.electron-game.render","js/tunnl71.electron-game.render.state","tunnl71.electron-game.render/state","counter","tunnl71.tools.core/counter","n","l","block-count","context","js/document","blocks","cljs.core/vec","cljs.core.repeat","blocks-2d","cljs.core.mapv","cljs.core.partition","nums","block-types","block-map","cljs.core/zipmap","color-map","m0","tunnl71.electron_game.matrix.step","p1__48221#","cljs.core.comp","tunnl71.electron-game.matrix/draw!","tunnl71.electron-game.matrix/test-matrix","ctx","seq__48222","chunk__48227","count__48228","i__48229","seq__48230","chunk__48231","count__48232","i__48233","seq__48223","chunk__48224","count__48225","i__48226","state_","cljs.core.atom","cljs.core/cycle","p__48234","map__48235","color","offset-x","offset-y","cljs.core/rand-nth","heart","id","p__48236","map__48237","imp","p__48238","map__48239","m1","tunnl71.electron-game.render/render","cljs.core.println","tick-per-second","reagent.core.track_BANG_","with-let48240","init48241","res48242","interval-id","tick-per-second_","tick-per-second__","js/clearInterval","cljs.core.not_EQ_","js/setInterval","reagent.dom.render"],"sourcesContent":["(ns tunnl71.electron-game.render\n  (:require\n   [reagent.core :as r]\n   [reagent.dom :as rd]\n   [react-dom :as react-dom]\n\n   [tunnl71.tools.core :as t]\n   [clojure.core.async :as a]\n\n   [clojure.spec.alpha :as s]\n   [com.rpl.specter :as sp]\n\n   [clojure.core.matrix :as m]\n   tunnl71.electron-game.matrix\n   )\n  )\n\n\n\n\n\n{:react-components-aka-frames\n [\n  (defn draw!\n    [es]\n    (js/window.requestAnimationFrame\n     #(doseq [v (sort-by :p < (filter map? (vals es)))]\n        ;; (println v)\n        (when-let [draw (:draw v)]\n          (draw v)))\n     #_(doseq [e (sort-by (fn [e_] (or (:p e_) 0)) < es)]\n         ((or (:draw e) draw) e ctx))\n\n     ;; draw every entity over surface of drawn blocks\n     #_(doseq [{:keys [draw] :as e} entity]\n         (draw e ctx)))\n    )\n  ;; ================= dungeon ========================================\n  (defn serialize-indexes\n    [{:keys [width-in-blocks]} [x y]]\n    (+ x (* y width-in-blocks))) \n\n  (defn window\n    \"positions in block terms\"\n    [x y w h]\n    (for [+x (range w) +y (range h)]\n      {\n       :x (+ x +x)\n       :y (+ y +y)}))\n\n  (defn random-window\n    \"positions in block terms\"\n    [{:keys [width-in-blocks height-in-blocks]} w h]\n    (let [x (rand-int width-in-blocks) y (rand-int height-in-blocks)]\n      (window x y w h)))\n\n  ;; ================= step! ========================================\n  (defn step-entities\n    [^map state]\n\n    ;; step entities\n\n    ;; (update state :entity\n    ;;         (fn [es]\n    ;;           (map (fn [e] (fn [state_]\n    ;;                          ((:step e) e state_))))))\n    \n    ;; (let [steps (apply comp (for [e (:entity state)]\n    ;;                           (fn [state_] ((:step e) e state_))))]\n    ;;   (t/--> state\n    ;;          #(update % :tick/elapsed inc)\n    ;;          steps\n    ;;          ;; prolly should put this in its own namespace to make ! clear\n    ;;          ))\n    )\n\n  (defn step!\n    [^ratom state]\n    (let [state' (merge @state (doseq [e (filter map? (vals @state))]\n                                 (when-let [step (:step e)]\n                                   (step e))))]\n      (reset! state state')\n      (draw! state')\n      (swap! state update :tick/elapsed inc)))\n\n  \n\n  (comment\n\n    ((fn [{:keys [x y w h color] :as this} ctx]\n       (set! (.-fillStyle ctx) color)\n       (-> ctx\n           (.fillRect x y w h)))\n     (get @state 7)\n     (context)\n     )\n    \n    )\n\n\n\n  #_(defn step!\n      [state]\n      (t/--> state\n             #(swap! % update :tick/elapsed inc))\n      (doseq [e @entity]\n        (when-let [step_ (:step e)]\n          (step_ state e)))\n      (draw! @state)\n      \n      #_(swap! state update :blocks shuffle)\n      (println (dissoc @state :blocks)))\n  {\n   :component/speed \n   #{\n     (defn speed-up\n       [state]\n       (fn [state]\n         [:button.w3-button.w3-hover-black {:on-click #(swap! state (partial + 0.25))}\n          \">>\"\n          ]))\n\n     (defn speed-down\n       [state]\n       (fn [state]\n         [:button.w3-button.w3-hover-black {:on-click #(swap! state (fn[this] (max (- this 0.25) 0)))}\n          \"<<\"\n          ]))\n\n     (defn pause\n       [state]\n       (r/with-let [previous-state (r/atom nil)]\n         (fn [state]\n           [:button.w3-button.w3-hover-black {:on-click #(if (= 0 @state)\n                                                           (reset! state @previous-state)\n                                                           (do (reset! previous-state @state)\n                                                               (reset! state 0)))}\n            (if (= 0 @state)\n              \"\u25b6\"\n              \"\u23f8\"\n              )])))}\n   }\n\n  (defn rc-state\n    [state]\n    (fn [state]\n      [:div (t/edn->hiccup (dissoc state :blocks))]))\n\n  (defn frame-canvas\n    [canvas-state]\n    (fn [canvas-state]\n      [:canvas#canvas canvas-state]))\n\n  (defn root-frame\n    [state]\n    (fn [state]\n      [:div.w3-left {:style {:font-size \"150%\" :float :left :color \"white\" :background-color \"green\"}}\n       [:h1 \"\"]\n       [:div.w3-center\n        [:h1 \"Phase Automata\"]\n        #_[:h5 \"(in)definite swaps\"]]\n       [:div.w3-center\n        [speed-down (r/cursor state [:tick/per-second])]\n        [pause (r/cursor state [:tick/per-second])]\n        [speed-up (r/cursor state [:tick/per-second])]]\n       [:div.w3-center\n        [frame-canvas @(r/cursor state [:canvas])]]\n       [:footer\n        [rc-state @state]\n        [:div.w3-center [:i \"tunnl71\"]]]]))]}\n\n\n(enable-console-print!)\n\n(defonce state\n  (let [counter (t/counter)\n        w 1500\n        h 1500\n        n (* w h)\n        l 30\n\n        width-in-blocks (/ w l)\n        height-in-blocks (/ h l)\n        block-count (/ n (* l l))\n\n\n        context #(-> js/document (.getElementById \"canvas\") (.getContext \"2d\"))\n        blocks (vec (repeat block-count -1))\n        blocks-2d (mapv vec (partition height-in-blocks blocks))\n        nums [-1 1 2 3 5 7 21]\n        block-types '(:full :space :portal :heart :treasury :imp)\n        block-map (zipmap block-types nums)\n        color-map (zipmap nums [\"black\" \"brown\" \"purple\" \"darkBlue\" \"gold\" \"green\" \"silver\"])\n        \n        m0 {:n n\n            :w w\n            :h h\n            :l l\n            :width-in-blocks width-in-blocks\n            :height-in-blocks height-in-blocks\n\n            :tunnl71.electron-game.matrix {\n                                           :p 1\n                                           :step (fn [this]\n                                                   (tunnl71.electron-game.matrix/step (:core this)))\n                                           :draw (comp #(tunnl71.electron-game.matrix/draw!  % w h l) :core)\n                                           :core tunnl71.electron-game.matrix/test-matrix}\n\n            :blocks {\n                     :p 0\n                     :core blocks\n                     :draw (fn [this]\n                             (let [ctx (-> js/document (.getElementById \"canvas\") (.getContext \"2d\"))]\n                               (doseq [x (range 0 w l) y (range 0 h l)]\n                                 (set! (.-fillStyle ctx) \"black\")\n                                 (-> ctx\n                                     (.fillRect x y l l)))))}\n            \n            :block-map block-map\n            :color-map color-map\n            :tick/per-second 0.5\n            :tick/elapsed 0\n            :canvas {:width w\n                     :height h\n                     }\n\n            :mobiles {:imp {:money \"the impin\"}}\n            :circular (let [state_ (atom (cycle '(\"/\" \"\u2014\" \"\\\\ \" \"|\")))]\n                        {\n                         :p 7\n                         :tag #{:foo}, :id (counter),\n                         ;; :v (first @state_)\n                         :x 103,\n                         :y 407,\n                         :w l,\n                         :h l, :color \"white\"\n                         :step (fn [this] (swap! state_ rest))\n                         :draw (fn [{:keys [x y w h color v] :as this}]\n                                 (let [ctx (-> js/document (.getElementById \"canvas\") (.getContext \"2d\"))]\n                                   (set! (.-font ctx) \"84px serif\")\n                                   (-> ctx\n                                       (.fillText (first @state_) x y))))})\n\n            }\n\n        ;; add entities such as heart and imp\n        offset-x (* 10 l)\n        offset-y (* 10 l)\n        x (rand-nth (range offset-x (- w offset-x) l))\n        y (rand-nth (range offset-y (- h offset-y) l))\n        heart (let [id (counter)]\n                {id {:tag #{:heart}\n                     :p 2\n                     :id id\n                     :x x\n                     :y y\n                     :w (* l 4)\n                     :h (* l 4)\n                     :color \"blue\"\n                     :draw (fn [{:keys [x y w h color] :as this}]\n                             (let [ctx (-> js/document (.getElementById \"canvas\") (.getContext \"2d\"))]\n                               (set! (.-fillStyle ctx) color)\n                               (-> ctx\n                                   (.fillRect x y w h))))}})\n\n        imp (let [id (counter)]\n              {id {:tag #{:imp}\n                   :id id\n                   :p 3\n                   :agenda [:explore]\n                   :x x\n                   :y y\n                   :w l\n                   :h l\n                   :color \"yellow\"\n                   :draw (fn [{:keys [x y w h color] :as this} ]\n                           (let [ctx (context)]\n                             (set! (.-fillStyle ctx) color)\n                             (-> ctx\n                                 (.fillRect x y w h))))\n                   #_:step\n                   #_(fn ^{:out \"state\"}\n                       [state_ imp]\n                       (let [{:keys [x y id] :as imp} imp\n                             area-indexes (for [i (range (- x 1) (+ x 2) l)\n                                                j (range (- y 1) (+ y 2) l)]\n                                            [i j]\n                                            #_(serialize-indexes (:width-in-blocks state_) [i j]))\n                             _ (println area-indexes)\n                             [x_ y_] (rand-nth area-indexes)\n                             ;; area (get-in (:blocks @state) area-indexes)\n                             ;; [x_ y_ :as move-target] (rand-nth area-indexes)\n                             ;; move-target-block (get-in (:blocks @state) [move-target])\n                             ]\n                         (update-in state_ [:entity id] assoc :x x_ :y y_)))\n                   }})\n\n        ;; action\n        #_imp-step #_(let [id (counter)]\n                       {id {:tag #{:step}\n                            :arg-tag :imp\n                            :fn (fn ^{:out \"state\"}\n                                  [state_ imp]\n                                  (let [{:keys [x y id] :as imp} imp\n                                        area-indexes (for [i (range (- x 1) (+ x 2) l)\n                                                           j (range (- y 1) (+ y 2) l)]\n                                                       [i j]\n                                                       #_(serialize-indexes (:width-in-blocks state_) [i j]))\n                                        _ (println area-indexes)\n                                        [x_ y_] (rand-nth area-indexes)\n                                        ;; area (get-in (:blocks @state) area-indexes)\n                                        ;; [x_ y_ :as move-target] (rand-nth area-indexes)\n                                        ;; move-target-block (get-in (:blocks @state) [move-target])\n                                        ]\n                                    (update-in state_ [:entity id] assoc :x x_ :y y_)))}})\n        m1 (merge m0 heart imp)]\n    (r/atom m1)\n    \n    ))\n\n(defn ^:dev/after-load render []\n  (println \"init! cybergame\")\n\n  ;; set ticker\n  (let [tick-per-second (r/cursor state [:tick/per-second])]\n    (r/track! (r/with-let [interval-id (r/atom nil)]\n                (fn [tick-per-second_]\n                  (let [tick-per-second__ @tick-per-second_]\n                    (js/clearInterval @interval-id)\n                    (when (not= 0 tick-per-second__)\n                      (reset! interval-id\n                              (js/setInterval\n                               step!\n                               (/ 1000 tick-per-second__) state))))))\n              tick-per-second ))\n\n  (step! state)\n\n\n  \n  (rd/render\n   [root-frame state]\n\n   (-> js/document (.getElementById \"app\")))\n\n  ;; begin!\n\n  )\n\n\n\n\n\n\n\n\n\n\n\n#_(defn ^:dev/after-load start! []\n    (rd/render\n     [root-component]\n     (js/document.getElementById \"app-container\")))\n"]}