{"version":3,"sources":["clojure/core/matrix/impl/double_array.cljs"],"mappings":"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","names":["clojure.core.matrix.impl.double-array/new-double-array","shape","dims","cljs.core/count","cljs.core.double_array","cljs.core/first","ns","cljs.core/next","rn","cljs.core/long","r0","cljs.core.into_array","cljs.core/cons","iter__5523__auto__","s__36891","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","b__36893","cljs.core/chunk-buffer","i__36892","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__36890","cljs.core/chunk-rest","cljs.core/rest","i","cljs.core.range","clojure.core.matrix.impl.double-array/construct-double-array","data","clojure.core.matrix.protocols/dimensionality","n","clojure.core.matrix.protocols/dimension-count","r","n__5636__auto__","clojure.core.matrix.protocols/get-1d","clojure.core.matrix.protocols/get-0d","clojure.core.matrix.protocols/PImmutableAssignment","clojure.core.matrix.protocols/assign","m","source","clojure.core.matrix.protocols/PAssignment","clojure.core.matrix.protocols/assign!","clojure.core.matrix.protocols/assign-array!","clojure.core.matrix.protocols/set-1d!","cljs.core.nth","arr","start","length","clojure.core.matrix.protocols/PImplementation","clojure.core.matrix.protocols/implementation-key","clojure.core.matrix.protocols/meta-info","clojure.core.matrix.protocols/new-vector","clojure.core.matrix.protocols/new-matrix","clojure.core.matrix.protocols/new-matrix-nd","clojure.core.matrix.protocols/construct-matrix","clojure.core.matrix.protocols/supports-dimensionality?","rows","columns","cljs.core.ex_info","clojure.core.matrix.protocols/PDimensionInfo","clojure.core.matrix.protocols/is-vector?","clojure.core.matrix.protocols/is-scalar?","clojure.core.matrix.protocols/get-shape","cljs.core/List","x","clojure.core.matrix.protocols/PReshaping","clojure.core.matrix.protocols/reshape","cljs.core._EQ_","gv","clojure.core.matrix.protocols/generic-value","es","cljs.core.concat","clojure.core.matrix.protocols/element-seq","cljs.core.repeat","partition-shape","temp__5802__auto__","s","plen","cljs.core.reduce","cljs.core/*","p1__36936#","cljs.core.map","cljs.core.partition","fs","parts","or__5045__auto__","cljs.core.take","clojure.core.matrix.protocols/PTypeInfo","clojure.core.matrix.protocols/element-type","js/Number","clojure.core.matrix.protocols/PIndexedAccess","clojure.core.matrix.protocols/get-2d","clojure.core.matrix.protocols/get-nd","row","column","indexes","clojure.core.matrix.protocols/PIndexedSetting","clojure.core.matrix.protocols/set-1d","clojure.core.matrix.protocols/set-2d","clojure.core.matrix.protocols/set-nd","clojure.core.matrix.protocols/is-mutable?","v","y","clojure.core.matrix.protocols/PIndexedSettingMutable","clojure.core.matrix.protocols/set-2d!","clojure.core.matrix.protocols/set-nd!","clojure.core.matrix.protocols/PMutableMatrixConstruction","clojure.core.matrix.protocols/mutable-matrix","clojure.core.matrix.protocols/PMatrixScaling","clojure.core.matrix.protocols/scale","clojure.core.matrix.protocols/pre-scale","a","len","clojure.core.matrix.protocols/PMatrixMutableScaling","clojure.core.matrix.protocols/scale!","clojure.core.matrix.protocols/pre-scale!","clojure.core.matrix.protocols/PConversion","clojure.core.matrix.protocols/convert-to-nested-vectors","cljs.core/vec","clojure.core.matrix.protocols/PFunctionalOperations","clojure.core.matrix.protocols/element-map","clojure.core.matrix.protocols/element-map!","clojure.core.matrix.protocols/element-reduce","f","cnt","G__36938","clojure.core.matrix.protocols/broadcast-coerce","G__36939","G__36940","more","p1__36937#","cljs.core.mapv","more-count","vs","j","cljs.core.apply","init","clojure.core.matrix.protocols/PIndexImplementation","clojure.core.matrix.protocols/index?","clojure.core.matrix.protocols/index-to-longs","clojure.core.matrix.protocols/index-to-ints","clojure.core.matrix.protocols/index-from-longs","clojure.core.matrix.protocols/index-from-ints","clojure.core.matrix.protocols/index-coerce","xs","cljs.core.long_array","cljs.core.int_array","clojure.core.matrix.protocols/PBroadcast","clojure.core.matrix.protocols/broadcast","new-shape","nshape","mshape","mdims","ndims","clojure.core.matrix.utils/same-shape-object?","clojure.core.matrix.impl.wrappers/wrap-broadcast","clojure.core.matrix.protocols/PNumerical","clojure.core.matrix.protocols/numerical?","clojure.core.matrix.protocols/PSubVector","clojure.core.matrix.protocols/subvector","clojure.core.matrix.impl.wrappers/wrap-nd","clojure.core.matrix.protocols/PMatrixEquality","clojure.core.matrix.protocols/matrix-equals","b","clojure.core.matrix.protocols/same-shape?","x__28676__auto__","cljs.core/not-any?","cljs.core/false?","cljs.core/==","clojure.core.matrix.protocols/PSameShape","clojure.core.matrix.protocols/PSelect","clojure.core.matrix.protocols/select","area","clojure.core.matrix.protocols/select-view","clojure.core.matrix.impl.wrappers/wrap-selection","clojure.core.matrix.protocols/PLogistic","clojure.core.matrix.protocols/logistic","clojure.core.matrix.impl.common/logistic-fn","clojure.core.matrix.protocols/PLogisticMutable","clojure.core.matrix.protocols/logistic!","clojure.core.matrix.protocols/PSoftplus","clojure.core.matrix.protocols/softplus","clojure.core.matrix.impl.common/softplus-fn","clojure.core.matrix.protocols/PSoftmax","clojure.core.matrix.protocols/softmax","em","clojure.core.matrix.protocols/exp","clojure.core.matrix.protocols/element-divide","clojure.core.matrix.protocols/element-sum","clojure.core.matrix.protocols/PSoftmaxMutable","clojure.core.matrix.protocols/softmax!","clojure.core.matrix.protocols/exp!","clojure.core.matrix.protocols/element-divide!","clojure.core.matrix.protocols/PSoftplusMutable","clojure.core.matrix.protocols/softplus!","clojure.core.matrix.protocols/PReLU","clojure.core.matrix.protocols/relu","clojure.core.matrix.impl.common/relu-fn","clojure.core.matrix.protocols/PReLUMutable","clojure.core.matrix.protocols/relu!","clojure.core.matrix.protocols/PMatrixPredicates","clojure.core.matrix.protocols/identity-matrix?","clojure.core.matrix.protocols/zero-matrix?","clojure.core.matrix.protocols/symmetric?","rc","cc","elem","p1__36941#","cljs.core/every?","G__36942","and__5043__auto__","clojure.core.matrix.impl.common/square?","clojure.core.matrix.impl.common/symmetric-matrix-entries?","clojure.core.matrix.protocols/transpose","clojure.core.matrix.protocols/PSummable","cljs.core/+","clojure.core.matrix.protocols/matrix-add","clojure.core.matrix.protocols/PMatrixMultiply","clojure.core.matrix.protocols/matrix-multiply","clojure.core.matrix.protocols/element-multiply","adims","clojure.core.matrix.protocols/vector-dot","vec__36943","arows","acols","vec__36946","mrows","mcols","vec__36949","vec__36952","mutable","new-m-type","clojure.core.matrix.implementations.get_canonical_object","new-m","k","vec__36955","clojure.core.matrix.protocols/broadcast-compatible","clojure.core.matrix.protocols/PMatrixMultiplyMutable","clojure.core.matrix.protocols/element-multiply!","clojure.core.matrix.protocols/matrix-multiply!","clojure.core.matrix.protocols/PMatrixDivide","cljs.core/type","clojure.core.matrix.protocols/PMatrixDivideMutable","cljs.core//","vec__36958","clojure.core.matrix.protocols/PBroadcastCoerce","clojure.core.matrix.protocols/coerce-param","clojure.core.matrix.protocols/broadcast-like","clojure.core.matrix.protocols/PCoercion","param","cljs.core/ISeq","clojure.core.matrix.protocols/PBroadcastLike","sm","sa","clojure.core.matrix.protocols/PMatrixOps","clojure.core.matrix.protocols/trace","clojure.core.matrix.protocols/determinant","clojure.core.matrix.protocols/inverse","Math/min","res","cljs.core/chunk-first"],"sourcesContent":["(ns clojure.core.matrix.impl.double-array\n  \"Implementation supporting:\n\n   - Javascript double[] arrays as core.matrix 1D vectors\n  \"\n  (:require [clojure.core.matrix.protocols :as mp]\n            [clojure.core.matrix.implementations :as imp]\n            [clojure.core.matrix.impl.wrappers :as wrap]\n            [clojure.core.matrix.impl.common :refer [logistic-fn softplus-fn relu-fn\n                                                     square? symmetric-matrix-entries?]]\n            [clojure.core.matrix.utils :as u])\n  (:require-macros [clojure.core.matrix.macros :refer [scalar-coerce error is-double-array? c-for]]))\n\n(defn new-double-array\n  \"Creates a new zero-filled nested double array of the given shape\"\n  [shape]\n  (let [dims (count shape)]\n    (cond\n      (== 0 dims) 0.0\n      (== 1 dims) (double-array (int (first shape)))\n      :else\n        (let [ns (next shape)\n              rn (long (first shape))\n              r0 (new-double-array ns)]\n          (into-array (cons r0 (for [i (range (dec rn))] (new-double-array ns))))))))\n\n(defn construct-double-array [data]\n  (let [dims (long (mp/dimensionality data))]\n    (cond\n     (== dims 1)\n       (let [n (long (mp/dimension-count data 0))\n             r (double-array n)]\n           (dotimes [i n]\n             (aset r i (double (mp/get-1d data i))))\n           r)\n     (== dims 0)\n       (double (mp/get-0d data))\n     :default\n       nil)))\n\n(extend-protocol mp/PImmutableAssignment\n  array\n  (assign [m source] ))\n\n(extend-protocol mp/PAssignment\n  array\n  (assign! [m source]\n    (dotimes [i (count source)]\n      (mp/set-1d! m i (nth source i)))\n    m)\n  (assign-array! [m arr start length]\n    (let [length (long length)\n          start (long start)]\n      (dotimes [i length]\n        (mp/set-1d! m i (nth arr (+ start i)))))\n    m))\n\n(extend-protocol mp/PImplementation\n  array\n  (implementation-key [m] :number-array)\n  (meta-info [m]\n    {:doc \"Clojure.core.matrix implementation for JS arrays\"})\n  (new-vector [m length] (double-array (int length)))\n  (new-matrix [m rows columns]\n    (new-double-array [rows columns]))\n  (new-matrix-nd [m shape]\n    (new-double-array shape))\n  (construct-matrix [m data]\n    (let [dims (long (mp/dimensionality data))]\n      (cond\n        (== dims 2) (error \"Double arrays in cljs only support a single dimension currently - submit a patch!\")\n        (== dims 1)\n          (let [n (long (mp/dimension-count data 0))\n                arr (double-array n)]\n            (dotimes [i n]\n              (aset arr i (double (mp/get-1d data i))))\n            arr)\n        (== dims 0)\n          (double (mp/get-0d data))\n        :default\n          nil)))\n  (supports-dimensionality? [m dims]\n    (let [dims (long dims)]\n      (or (== dims 1) (== dims 2)))))\n\n(extend-protocol mp/PDimensionInfo\n  array\n  (dimensionality [m] 1)\n  (is-vector? [m] true)\n  (is-scalar? [m] false)\n  (get-shape [m] (list (count m)))\n  (dimension-count [m x]\n    (if (== (long x) 0)\n      (count m)\n      (error \"Double array does not have dimension: \" x))))\n\n(extend-protocol mp/PReshaping\n  array\n  (reshape [m shape]\n    (if (= (mp/get-shape m) shape) ;; Short circuit if already the desired shape\n      m\n      (let [gv (mp/generic-value m) ;; generic value for array padding. Typically nil or zero\n            es (concat (mp/element-seq m) (repeat gv))\n            partition-shape (fn partition-shape [es shape]\n                              (if-let [s (seq shape)]\n                                (let [ns (next s)\n                                      plen (reduce * 1 ns)]\n                                  (map #(partition-shape % ns) (partition plen es)))\n                                (first es)))]\n        (if-let [shape (seq shape)]\n          (let [fs (long (first shape))\n                parts (partition-shape es shape)]\n            (or\n              (mp/construct-matrix m (take fs parts))\n              (mp/construct-matrix [] (take fs parts))))\n          (first es))))))\n\n(extend-protocol mp/PTypeInfo\n  array\n  (element-type [m] js/Number))\n\n(extend-protocol mp/PIndexedAccess\n  array\n  (get-1d [m x] (aget m (int x)))\n  (get-2d [m row column]\n      (error \"Can't do get-2D from 1D double array\"))\n  (get-nd [m indexes]\n    (if (== 1 (count indexes))\n      (aget m (int (first indexes)))\n      (error \"Can't get from double array with dimensionality: \" (count indexes)))))\n\n(extend-protocol mp/PIndexedSetting\n  array\n  (set-1d [m x v]\n    (let [arr (.slice m)]\n      (aset arr (int x) v)\n      arr))\n  (set-2d [m x y v]\n    (error \"Can't do 2D set on double array\"))\n  (set-nd [m indexes v]\n    (if (== 1 (count indexes))\n      (let [arr (.slice m)\n            x (int (first indexes))]\n        (aset arr (int x) v)\n        arr)\n      (error \"Can't set on double array with dimensionality: \" (count indexes))))\n  (is-mutable? [m] true))\n\n(extend-protocol mp/PIndexedSettingMutable\n  array\n  (set-1d! [m x v]\n    (aset m (int x) v)\n    m)\n  (set-2d! [m x y v]\n    (error \"Can't do 2D set on double array\"))\n  (set-nd! [m indexes v]\n    (if (== 1 (count indexes))\n      (do\n        (aset m (int (first indexes)) v)\n        m)\n      (error \"Can't set on double array with dimensionality: \" (count indexes)))))\n\n(extend-protocol mp/PMutableMatrixConstruction\n  array\n  (mutable-matrix [m] (.slice m)))\n\n(extend-protocol mp/PMatrixScaling\n  array\n  (scale [m a]\n    (let [m m\n          len (alength m)\n          arr (double-array len)\n          a (double a)]\n      (dotimes [i len] (aset arr i (* a (aget m i))))\n      arr))\n  (pre-scale [m a]\n    (let [m m\n          len (alength m)\n          arr (double-array len)\n          a (double a)]\n      (dotimes [i len] (aset arr i (* a (aget m i))))\n      arr)))\n\n(extend-protocol mp/PMatrixMutableScaling\n  array\n  (scale! [m a]\n    (let [m m\n          a (double a)]\n      (dotimes [i (alength m)] (aset m i (* a (aget m i))))))\n\n  (pre-scale! [m a]\n    (let [m m\n          a (double a)]\n      (dotimes [i (alength m)] (aset m i (* a (aget m i)))))))\n\n(extend-protocol mp/PConversion\n  array\n  (convert-to-nested-vectors [m]\n    (vec m)))\n\n(extend-protocol mp/PFunctionalOperations\n  array\n  (element-seq [m] m)\n\n  (element-map\n    ([m f]\n     (let [cnt (alength m)\n           r (double-array cnt)]\n       (dotimes [i cnt]\n         (aset r i (f (aget m i))))\n       r))\n    ([m f a]\n     (let [r (double-array m)\n           a (mp/broadcast-coerce r a)]\n       (dotimes [i (alength m)]\n         (aset r i (f (aget m i) (aget a i))))\n       r))\n    ([m f a more]\n     (let [r (double-array m)\n           a (mp/broadcast-coerce m a)\n           more (mapv #(mp/broadcast-coerce m %) more)\n           more-count (long (count more))\n           vs (double-array more-count)]\n       (dotimes [i (alength m)]\n         (dotimes [j more-count] (aset vs j (aget (more j) i)))\n         (aset r i (double (apply f (aget m i) (aget a i) vs))))\n       r)))\n\n  (element-map!\n    ([m f]\n     (mp/assign! m (mp/element-map m f)))\n    ([m f a]\n     (mp/assign! m (mp/element-map m f a)))\n    ([m f a more]\n     (mp/assign! m (mp/element-map m f a more))))\n\n  (element-reduce\n    ([m f]\n     (let [m m]\n       (reduce f m)))\n    ([m f init]\n     (let [m m]\n       (reduce f init m)))))\n\n(extend-protocol mp/PIndexImplementation\n  array\n\t  (index? [m] true)\n\t  (index-to-longs [m] m)\n\t  (index-to-ints [m] m)\n\t  (index-from-longs [m xs]\n      (long-array xs))\n\t  (index-from-ints [m xs]\n      (int-array xs))\n\t  (index-coerce [m a]\n      m))\n\n(extend-protocol mp/PBroadcast\n  array\n  (broadcast [m new-shape]\n    (let [nshape new-shape\n          mshape (mp/get-shape m)\n          mdims (count mshape)\n          ndims (count nshape)]\n      (cond\n        (and (== mdims ndims) (u/same-shape-object? nshape mshape)) m\n        :else (wrap/wrap-broadcast m new-shape)))))\n\n(extend-protocol mp/PNumerical\n  array\n  (numerical? [m] true))\n\n(extend-protocol mp/PSubVector\n  array\n  (subvector [m start length]\n    (mp/subvector (wrap/wrap-nd m) start length)))\n\n(extend-protocol mp/PMatrixEquality\n  array\n  (matrix-equals [a b]\n    (cond\n      (identical? a b) true\n      (mp/same-shape? a b)\n      (if (== 0 (long (mp/dimensionality a)))\n        (== (mp/get-0d a) (scalar-coerce b))\n        (not-any? false? (map == (mp/element-seq a) (mp/element-seq b))))\n      :else false)))\n\n(extend-protocol mp/PSameShape\n  array\n  (same-shape? [a b]\n    (u/same-shape-object? (mp/get-shape a) (mp/get-shape b))))\n\n(extend-protocol mp/PSelect\n  array\n  (select [a area]\n    (or (mp/select-view a area)\n        (wrap/wrap-selection a area))))\n\n(extend-protocol mp/PLogistic\n  array\n  (logistic [m]\n      (mp/element-map m logistic-fn)))\n\n(extend-protocol mp/PLogisticMutable\n  array\n  (logistic! [m]\n    (mp/element-map! m logistic-fn)))\n\n(extend-protocol mp/PSoftplus\n  array\n  (softplus [m]\n    (mp/element-map m softplus-fn)))\n\n(extend-protocol mp/PSoftmax\n  array\n  (softmax [m]\n    (let [em (mp/exp m)]\n      (mp/element-divide em (mp/element-sum em)))))\n\n(extend-protocol mp/PSoftmaxMutable\n  array\n  (softmax! [m]\n    (mp/exp! m)\n    (mp/element-divide! m (mp/element-sum m))\n    m))\n\n(extend-protocol mp/PSoftplusMutable\n  array\n  (softplus! [m]\n    (mp/element-map! m softplus-fn)))\n\n(extend-protocol mp/PReLU\n  array\n  (relu [m]\n    (mp/element-map m relu-fn)))\n\n(extend-protocol mp/PReLUMutable\n  array\n  (relu! [m]\n    (mp/element-map! m relu-fn)))\n\n(extend-protocol mp/PMatrixPredicates\n  array\n  (identity-matrix? [m]\n    (let [rc (long (mp/dimension-count m 0))\n          cc (long (mp/dimension-count m 1))]\n      (if (and (== (long (mp/dimensionality m)) 2) (== rc cc))\n        (loop [i (long 0)]\n          (if (< i rc)\n            (if (loop [j (long 0)]\n                  (if (< j cc)\n                    (let [elem (mp/get-2d m i j)]\n                      (if (number? elem)\n                        (if (== i j)\n                          (if (== (double elem) 1.0) (recur (inc j)) false)\n                          (if (zero? elem) (recur (inc j)) false))\n                        false))\n                    true))\n              (recur (inc i))\n              false)\n            true))\n        false)))\n  (zero-matrix? [m]\n    (every? #(and (number? %) (zero? %)) (mp/element-seq m)))\n  (symmetric? [m]\n    (case (long (mp/dimensionality m))\n      0 true\n      1 true\n      2 (and (square? m) (symmetric-matrix-entries? m))\n      (= m (mp/transpose m))))\n\n  number\n  (identity-matrix? [m] (= 1 m))\n  (zero-matrix? [m] (zero? m))\n  (symmetric? [m] true))\n\n(extend-protocol mp/PSummable\n  array\n  (element-sum [a]\n    (mp/element-reduce a (if (mp/numerical? a) + mp/matrix-add))))\n\n(extend-protocol mp/PMatrixMultiply\n  array\n  (matrix-multiply [m a]\n    (let [mdims (long (mp/dimensionality m))\n          adims (long (mp/dimensionality a))]\n      (cond\n        (== adims 0) (mp/scale m a)\n        (and (== mdims 1) (== adims 1)) (mp/vector-dot m a)\n        (and (== mdims 1) (== adims 2))\n        (let [[arows acols] (mp/get-shape a)]\n          (mp/reshape (mp/matrix-multiply (mp/reshape m [1 arows]) a)\n                      [acols]))\n        (and (== mdims 2) (== adims 1))\n        (let [[mrows mcols] (mp/get-shape m)]\n          (mp/reshape (mp/matrix-multiply m (mp/reshape a [mcols 1]))\n                      [mcols]))\n        (and (== mdims 2) (== adims 2))\n        (let [mutable (mp/is-mutable? m)\n              [^long mrows ^long mcols] (mp/get-shape m)\n              [^long arows ^long acols] (mp/get-shape a)\n              new-m-type (if mutable m (imp/get-canonical-object :ndarray))\n              new-m (mp/new-matrix new-m-type mrows acols)]\n          ;; TODO: optimize cache-locality (http://bit.ly/12FgFbl)\n          (c-for [i (long 0) (< i mrows) (inc i)\n                  j (long 0) (< j acols) (inc j)]\n                 (mp/set-2d! new-m i j 0))\n          (c-for [i (long 0) (< i mrows) (inc i)\n                  j (long 0) (< j acols) (inc j)\n                  k (long 0) (< k mcols) (inc k)]\n                 (mp/set-2d! new-m i j (+ (mp/get-2d new-m i j)\n                                          (* (mp/get-2d m i k)\n                                             (mp/get-2d a k j)))))\n          new-m))))\n  (element-multiply [m a]\n    (if (number? a)\n      (mp/scale m a)\n      (let [[m a] (mp/broadcast-compatible m a)]\n        (mp/element-map m clojure.core/* a)))))\n\n(extend-protocol mp/PMatrixMultiplyMutable\n  array\n  (element-multiply! [m a]\n    (mp/assign! m (mp/element-multiply m a)))\n  (matrix-multiply! [m a]\n    (mp/assign! m (mp/matrix-multiply m a))))\n\n(extend-protocol mp/PMatrixDivide\n  array\n  (element-divide\n    ([m]\n     (if (mp/get-shape m)\n       (mp/element-map m mp/element-divide)\n       (error \"Don't know how to take reciprocal of \" (type m))))\n    ([m a]\n     (mp/element-multiply m (mp/element-divide a)))))\n\n(extend-protocol mp/PMatrixDivideMutable\n  array\n  (element-divide!\n    ([m] (mp/element-map! m /))\n    ([m a]\n     (let [[m a] (mp/broadcast-compatible m a)]\n       (mp/element-map! m / a)))))\n\n(extend-protocol mp/PBroadcastCoerce\n  array\n  (broadcast-coerce [m a]\n    (mp/coerce-param m (mp/broadcast-like m a))))\n\n(extend-protocol mp/PCoercion\n  array\n  (coerce-param [m param]\n    (let [param (if (instance? ISeq param) (mp/convert-to-nested-vectors param) param)]\n      (or (mp/construct-matrix m param)\n          param))))\n\n(extend-protocol mp/PBroadcastLike\n  array\n  (broadcast-like [m a]\n    (let [sm (mp/get-shape m) sa (mp/get-shape a)]\n      (if (u/same-shape-object? sm sa)\n        a\n        (mp/broadcast a sm)))))\n\n(extend-protocol mp/PMatrixOps\n  array\n  (trace [m]\n    (when-not (== 2 (long (mp/dimensionality m))) (error \"Trace requires a 2D matrix\"))\n    (let [rc (long (mp/dimension-count m 0))\n          cc (long (mp/dimension-count m 1))\n          dims (Math/min rc cc)]\n      (loop [i 0 res 0.0]\n        (if (>= i dims)\n          res\n          (recur (inc i) (+ res (double (mp/get-2d m i i))))))))\n\n  (determinant [m] nil)\n  (inverse [m] nil))\n\n\n"],"x_google_ignoreList":[0]}