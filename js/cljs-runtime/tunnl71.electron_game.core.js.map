{"version":3,"sources":["tunnl71/electron_game/core.cljs"],"mappings":"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","names":["tunnl71.electron-game.core/init-state!","counter","tunnl71.tools.core/counter","w","h","n","l","width-in-blocks","height-in-blocks","block-count","context","js/document","m0","cljs.core.async.chan","state","p1__51540#","cljs.core.swap_BANG_","cljs.core/update","tunnl71.electron-game.core/step-clock!","cljs.core/update-in","cljs.core/inc","tunnl71.electron-game.core/step!","seq__51541","cljs.core/seq","cljs.core/deref","chunk__51542","count__51543","i__51544","vec__51551","cljs.core.nth","temp__5804__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__51554","cljs.core/first","cljs.core/next","k","v","cljs.core/tap>","tunnl71.electron-game.core/draw!","js/window.requestAnimationFrame","seq__51557","chunk__51558","count__51559","i__51560","vec__51569","vec__51573","draw!","G__51572","G__51576","tunnl71.electron-game.core/draw-ticker-init!","cljs.core/assoc-in","js/setInterval","tunnl71.electron-game.core/track-step-interval!","nu-cursor","reagent.core.track_BANG_","p1__51577#","js/clearInterval","nu","cljs.core._EQ_","i-id","tunnl71.electron-game.core/item-for-sale","cljs.core.println","with-let51580","reagent.ratom/with-let-values","temp__5808__auto__","reagent.ratom/*ratom-context*","c__19232__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init51581","cljs.core/not","res51582","generate-item","tunnl71.tools.core.uuid","p1__51578#","init-cost","costs","p1__51579#","cljs.core/iterate","tunnl71.tools.core.exp","costs-atom","reagent.core.atom","item","cost","item-sales-view","cljs.core.assoc","cljs.core/select-keys","kv","tunnl71.tools.core/edn->hiccup-true-to-form","cljs.core/rest","this","cljs.core.update_in","en","cljs.core.merge","tunnl71.electron-game.core/root-frame","tunnl71.electron-game.player/controls","cljs.core/frequencies","cljs.core.remove","cljs.core/nil?","cljs.core.map","cljs.core/vals","tunnl71.electron-game.canvas/my-canvas","reagent.core/cursor","state-sans-system","cljs.core.apply","cljs.core/dissoc","cljs.core/pr-str","tunnl71.electron-game.core/render","reagent.dom.render","tunnl71.electron-game.core/init!","js/tunnl71","js/tunnl71.electron-game","js/tunnl71.electron-game.core","js/tunnl71.electron-game.core.state","tunnl71.electron-game.core/state","tunnl71.electron-game.control/stop-executor!","tunnl71.electron-game.control/stop-tapper!","cljs.core/reset!","tunnl71.electron-game.control/init-tapper!","tunnl71.electron-game.control/init-executor!"],"sourcesContent":["(ns tunnl71.electron-game.core\n  (:require\n   [reagent.core :as r]\n   [reagent.dom :as rd]\n   [react-dom :as react-dom]\n\n   [tunnl71.tools.core :as t]\n   [clojure.core.async :as a]\n\n   [clojure.spec.alpha :as s]\n   [com.rpl.specter :as sp]\n\n   [clojure.core.matrix :as m]\n   tunnl71.electron-game.matrix\n   [tunnl71.data.keyword :as kw]\n\n   [thi.ng.color.core :as color]\n\n   [tunnl71.electron-game.canvas :refer [canvas-wrapped my-canvas]]\n   [tunnl71.electron-game.control :refer [init-tapper! init-executor! stop-executor! stop-tapper!]]\n   [tunnl71.electron-game.player :refer [controls]]\n   )) \n\n\n(defn init-state!\n  []\n  (let [counter (t/counter)\n        w 1000\n        h 1000\n        n (* w h)\n        l 30\n\n        width-in-blocks (/ w l)\n        height-in-blocks (/ h l)\n        block-count (/ n (* l l))\n\n        ;; task: replace with 'get-context'\n        context #(-> js/document (.getElementById \"canvas\") (.getContext \"2d\"))\n\n        m0 {\n\n            :inspiration [\"tree of dependencies \u00e1 l\u00e1 'evolution'\"\n                          \"larva tokens that mutate based on temperature\"\n\n                          \n                          ]\n            ;; actions\n            :executor :running\n            :actions (a/chan)\n            \n            ;; time\n            :clock {:nu 100 :elapsed 0}\n\n            ;; draw\n            :draw {:nu 10}\n            \n            ;; step\n            :step {:nu 1}\n            \n            ;; map\n            :canvas {:width w\n                     :height h\n                     :color \"#000000\"\n\n                     ;; derived and not supported by canvas\n                     :byblock {:n n\n                               :w w\n                               :h h\n                               :l l\n                               :width-in-blocks width-in-blocks\n                               :height-in-blocks height-in-blocks}\n                     }\n\n            ;; currencies\n            :orb 1000\n\n            ;; entities\n            :generator {:step (fn [state]\n                                (swap! state update :orb #(+ % 1)))}\n            ;; :tunnl71.electron-game.matrix {:core\n            ;;                                (tunnl71.electron-game.matrix/refresh)\n            ;;                                :draw! #(tunnl71.electron-game.matrix/draw! % w h l)\n            ;;                                :step #(swap! state update-in [:tunnl71.electron-game.matrix :core] tunnl71.electron-game.matrix/step)\n            ;;                                }\n            \n            }]\n    m0))\n\n(defn step-clock!\n  \"map -> map\"\n  [state]\n  (swap! state update-in [:clock :elapsed] inc))\n\n(defn step!\n  \"map -> map\"\n  [state]\n  (doseq [[k v] @state]\n    (when (some? (:step v))\n      (tap> (:step v)))))\n\n(defn draw!\n  [state]\n  (js/window.requestAnimationFrame\n   #(doseq [[k v] @state]\n      (when-let [draw! (:draw! v)]\n        (draw! (:core v))))))\n\n(defn draw-ticker-init!\n  [state ]\n  (swap! state assoc-in [:draw :interval-id]\n         (js/setInterval\n          draw!\n          (/ 1000 (:nu @state)) state)))\n\n#_(defn track-step-interval!\n    [state step-state]\n    (r/with-let [interval-id (r/atom nil)]\n      (r/track! (fn [nu_]\n                  (let [nu @nu_]\n                    (js/clearInterval @interval-id)\n                    (when-not (zero? nu)\n                      (let [i-id (js/setInterval\n                                  step!\n                                  (/ 1000 nu) state)]\n                        (reset! interval-id i-id))))\n                  (println @interval-id))\n                step-state)))\n\n#_(defn track-step-interval!\n    [state nu-cursor]\n    (r/with-let [interval-id (r/atom nil)]\n      (r/track! (fn [nu_]\n                  (let [nu @nu_]\n                    (js/clearInterval @interval-id)\n                    (when-not (zero? nu)\n                      (let [i-id (js/setInterval\n                                  step!\n                                  (/ 1000 nu) state)]\n                        (swap! state assoc-in [:step :interval-id] i-id)\n                        (reset! interval-id i-id))))\n                  (println @interval-id))\n                nu-cursor)))\n\n(defn track-step-interval!\n  [state nu-cursor]\n  (r/track! (fn [nu-cursor]\n              (swap! state update-in [:step :interval-id] #(js/clearInterval %))\n              (let [nu @nu-cursor]\n                (when (not (= 0 nu))\n                  (let [i-id (js/setInterval\n                              step!\n                              (/ 1000 nu) state)]\n                    (swap! state assoc-in [:step :interval-id] i-id)))))\n            nu-cursor))\n\n\n\n#_(defn remove-track-step-interval!\n    [i-id-cursor]\n    (js/clearInterval i-id-cursor))\n\n\n\n\n#_(defn init-step-interval!\n    [state step-state]\n    (r/with-let [interval-id (r/cursor step-state [:interval-id])\n                 nu-state (r/cursor step-state [:nu])]\n      (r/reaction)\n      (r/track! (fn [nu_]\n                  (let [nu @nu_]\n                    (js/clearInterval @interval-id)\n                    (when-not (= 0 nu)\n                      (reset! interval-id (js/setInterval\n                                           step!\n                                           (/ 1000 nu) state))))\n                  (println @interval-id))\n                nu-state)))\n\n\n(defn item-for-sale\n  [state]\n  (fn [state]\n    (println \"recreating item-for-sale\")\n    [:div.w3-round-xxlarge.w3-border\n     (r/with-let [generate-item (fn [] {\n                                        :id (str \"orb factory-\" (t/uuid))\n                                        :name \"orb factory\"\n                                        :description \"produces (1 orb / sec)\"\n                                        ;; :cost \"100 orb\"\n                                        :step (fn [state]\n                                                (swap! state update :orb #(+ % 1)))\n                                        :submodule nil\n                                        })\n                  init-cost 100\n                  costs (iterate #(int (+ % (- (t/exp (+ % 0.05) 2)\n                                               (t/exp % 2)))) init-cost)\n                  costs-atom (r/atom costs)]\n       (let [\n             item (generate-item)\n             cost (first @costs-atom)\n             item-sales-view  (assoc (select-keys item  [:name :description])\n                                     :cost cost)\n             kv {(:id item) item}]\n         [:div\n          (-> item-sales-view\n              (t/edn->hiccup-true-to-form))\n\n          [:div.w3-center\n           [:button.w3-button.w3-hover-black.w3-border\n            {:on-click #(do (println \"buyed \" \"at \" cost)\n                            (swap! costs-atom rest)\n                            (swap! state (fn [this] (-> this\n                                                        (update-in [:orb] (fn [en] (- en cost)))\n                                                        (merge kv)\n                                                        )))\n                            #_(reset! state (-> state\n                                                (update-in [:orb] (fn [en] (- en cost)))\n                                                (merge kv)))\n                            )} (str \"buy!\")]]]))]))\n\n(defn root-frame\n  [state]\n  (fn [state]\n    [:div.w3-container {:style {:font-size \"150%\"\n                                :color \"white\"\n                                :background-color \"#002152\"}}\n\n     [:div.w3-cell-row\n      [:div.w3-center\n       [:h1 \"Phase Automata\"]]]\n\n\n     [controls state]\n\n     [:div.w3-cell-row.w3-container\n      [:div.w3-cell.w3-cell-top {:style {:width \"33%\" }}\n       [:h1 \"UI\"]\n       [:p \"\u25cf \" (:orb @state)]\n       [:div \"assets \" (t/edn->hiccup-true-to-form (frequencies (remove nil? (map :name (vals @state)))))]\n       [:p \"cards \" ]\n       [:p \"units \" ]\n       [:p \"lots \" ]\n       [:p \"dice \" ]\n       [:div\n        [:h2 \"available menu\"]\n\n\n        [item-for-sale state]\n\n\n\n        ]\n       ]\n      [:div.w3-cell.w3-border\n       [my-canvas (r/cursor state [:canvas])]]\n      [:div.w3-cell.w3-cell-top.w3-container {:style {:width \"33%\"}}\n       #_[:p \"foobar\"]\n       ]]\n     \n     \n     [:div.w3-cell-row\n      [:hr]\n      [:footer\n       (let [state-sans-system (apply dissoc @state [:draw :step :clock :executor :actions :canvas])]\n         [t/edn->hiccup-true-to-form state-sans-system])\n       [:div.w3-center [:i \"tunnl71\"]]\n       [pr-str @state]\n       ]\n\n      \n      ]]))\n\n(defn render\n  [state]\n  (rd/render\n   [root-frame state]\n   (-> js/document (.getElementById \"app\"))))\n\n\n(defn ^:dev/after-load init! []\n  (println \"init! hello\")\n\n  (defonce state (r/atom nil))\n  (when (some? @state)\n    (do\n      #_(js/clearInterval (get-in @state [:step :interval-id]))\n      (swap! state assoc-in [:step :nu] 0)\n      (stop-executor! state)\n      (stop-tapper! state)\n      \n      ))\n\n  (reset! state (init-state!))\n\n  (init-tapper! state)\n  (init-executor! state)\n\n\n  ;; time:\n  ;; :time: clock\n  (swap! state assoc-in [:clock :interval-fn]\n         (js/setInterval step-clock!\n                         (/ 1000 (:nu (:clock @state)))\n                         state))\n\n  #_(init-step-interval! state (r/cursor state [:step]))\n  \n  (track-step-interval! state (r/cursor state [:step :nu]))\n  #_(r/track! (fn [step-state]\n                (let [{:keys [interval-id nu]} @step-state]\n                  (js/clearInterval interval-id)\n                  (when-not (zero? nu)\n                    (swap! step-state assoc :interval-id\n                           (js/setInterval\n                            step!\n                            (/ 1000 nu) state)))))\n              (r/cursor state [:step :nu]))\n  \n  ;; draw ticker\n  (draw-ticker-init! state)\n\n  ;; render\n  (render state))\n"]}