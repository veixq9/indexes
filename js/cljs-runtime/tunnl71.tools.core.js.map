{"version":3,"sources":["tunnl71/tools/core.cljs"],"mappings":"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","names":["var_args","G__29905","tunnl71.tools.core/uuid","js/Error","cljs.core/random-uuid","s","cljs.core/uuid","tunnl71.tools.core/vector->map","v","cljs.core/zipmap","cljs.core.range","tunnl71.tools.core/zip","c1","c2","cljs.core.map","cljs.core/vector","tunnl71.tools.core/split-every-2","coll","cljs.core.take_nth","cljs.core/rest","tunnl71.tools.core/quot-rem","n","m","cljs.core/quot","cljs.core/rem","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","tunnl71.tools.core/invoke","seq29917","G__29918","cljs.core/first","cljs.core/next","self__5754__auto__","f","args","cljs.core.apply","tunnl71.tools.core/$","cljs.core/partial","tunnl71.tools.core/flip","xs","cljs.core/reverse","tunnl71.tools.core/pipe","cljs.core/comp","tunnl71.tools.core/>>>","tunnl71.tools.core/-->","seq29937","G__29938","x","fs","fexpr__29940","G__29953","tunnl71.tools.core/bi-arrow","p__29960","vec__29961","cljs.core.nth","g","y","tunnl71.tools.core/diff-keys","seq29965","self__5755__auto__","cljs.core/seq","ms","clojure.set/difference","cljs.core.comp","cljs.core/set","cljs.core/keys","tunnl71.tools.core/presents","seq29967","G__29968","cljs.core/some","cljs.core.into","tunnl71.tools.core/part?","s1","s2","clojure.set/subset?","tunnl71.tools.core/belongs","tunnl71.tools.core/presents?","seq29974","G__29975","cljs.core/some?","cljs.core._EQ_","tunnl71.tools.core.presents_QMARK_","tunnl71.tools.core/belongs?","tunnl71.tools.core/factorial","cljs.core.reduce","cljs.core/*","G__29982","tunnl71.tools.core/exp","b","i","cljs.core.repeat","js/Math.exp","tunnl71.tools.core.exp","tunnl71.tools.core/coll->map","cljs.core/hash-map","cljs.core/every?","cljs.core/not","cljs.core/coll?","p1__30031#","tunnl71.tools.core/map-entry","k","cljs.core/MapEntry","tunnl71.tools.core/wrap","new-ns","cljs.core/reduce-kv","new-k","cljs.core.keyword","cljs.core/name","cljs.core.assoc","tunnl71.tools.core/derive-spec","specs","iter__5523__auto__","s__30039","cljs.core/LazySeq","temp__5804__auto__","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__30041","cljs.core/chunk-buffer","i__30040","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__30038","cljs.core/chunk-rest","cljs.core/cons","cljs.spec.alpha.valid_QMARK_","tunnl71.tools.core/walk-transform","data","halting-points","level","tunnl71.tools.core/edn->hiccup-palette","system","edn","cljs.core/map?","tunnl71.tools.core.uuid","s__30059","b__30061","i__30060","vec__30064","iter__30058","vec__30079","cljs.core/sequential?","cljs.core.pr_str","cljs.core/Keyword","cljs.core/deref","cljs.core/re-matches","cljs.core/boolean?","tunnl71.tools.core/edn->hiccup","s__30098","b__30100","i__30099","vec__30105","iter__30097","vec__30108","cljs.core/list?","s__30115","b__30117","i__30116","iter__30114","G__30137","tunnl71.tools.core/edn->hiccup-true-to-form","style","this","s__30140","b__30142","i__30141","vec__30153","iter__30139","vec__30157","cljs.core.merge","s__30165","b__30167","i__30166","iter__30164","s__30174","b__30176","i__30175","vec__30182","iter__30173","vec__30186","s__30194","b__30196","i__30195","iter__30193","this__5343__auto__","k__5344__auto__","this__5345__auto__","k30202","else__5346__auto__","G__30210","address","cljs.core.get","__extmap","this__5363__auto__","f__5364__auto__","init__5365__auto__","ret__5366__auto__","p__30214","vec__30215","k__5367__auto__","v__5368__auto__","this__5358__auto__","writer__5359__auto__","opts__5360__auto__","pr-pair__5361__auto__","keyval__5362__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__30201","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__5341__auto__","__meta","this__5338__auto__","__hash","this__5347__auto__","this__5339__auto__","h__5154__auto__","coll__5340__auto__","cljs.core/hash-unordered-coll","this30203","other30204","this__5353__auto__","k__5354__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core/not-empty","this__5350__auto__","G__30373","this__5351__auto__","k__5352__auto__","pred__30429","cljs.core/keyword-identical?","expr__30430","this__5356__auto__","this__5342__auto__","this__5348__auto__","entry__5349__auto__","cljs.core/vector?","cljs.core/-conj","tunnl71.tools.core/Ref","this__5389__auto__","cljs.core/List","writer__5390__auto__","cljs.core/-write","G__30205","extmap__5385__auto__","G__30453","cljs.core/record?","tunnl71.tools.core/->Ref","tunnl71.tools.core/map->Ref","G__30455","tunnl71.tools.core/edn->node","value","tunnl71.tools.core.edn__GT_node","root-k","cljs.core/vec","s__30457","b__30459","i__30458","vec__30460","iter__30456","vec__30463","G__30467","tunnl71.tools.core/edge->node","out","tunnl71.tools.core.edge__GT_node","cljs.core.mapv","s__30469","b__30471","i__30470","vec__30472","iter__30468","vec__30475","cljs.core/associative?","G__30479","tunnl71.tools.core/edge->node-mappy","tunnl71.tools.core.edge__GT_node_mappy","cljs.core/merge","p__30480","vec__30481","tunnl71.tools.core/node->edn-helper","node","tunnl71.tools.core/node->edn","result","G__30486","tunnl71.tools.core/label","ks","tunnl71.tools.core.label","tunnl71.tools.core/geometric-sum","a","r","Math/pow","tunnl71.tools.core/math-symbols","tunnl71.tools.core/divide-set","ratio","vec__30496","length-training","training-set","test-set","cljs.core/split-at","tunnl71.tools.core/countd","cljs.core/distinct","tunnl71.tools.core/random-take","p1__30503#","p2__30504#","cljs.core.repeatedly","cljs.core/rand-int","tunnl71.tools.core/nil-chain","seq30506","cljs.core.drop_while","cljs.core/nil?","p1__30505#","tunnl71.tools.core/to-keyword","clojure.string/replace","tunnl71.tools.core/add","tunnl71.tools.core/csv->edn","string","s-s-str","clojure.string/split-lines","p1__30511#","clojure.string.split","s-vs","p1__30512#","tunnl71.tools.core/counter","cljs.core.atom","cljs.core.swap_BANG_","cljs.core/inc","tunnl71.tools.core/add-id","doc","tunnl71.tools.core/transpose","vs","cljs.core/map","tunnl71.tools.core/->seqmap","mapseq","cljs.core/vals","p1__30520#","p2__30521#","G__30523","tunnl71.tools.core/tree->routes","t","tunnl71.tools.core.tree__GT_routes","p","s__30525","b__30527","i__30526","vec__30528","iter__30524","vec__30531","kx","vx","cljs.core/concat","tunnl71.tools.core/path","seq30540","p1__30534#","p1__30536#","p1__30537#","p1__30538#","p1__30539#","tunnl71.tools.core.___GT_","cljs.core.remove","p1__30535#","cljs.core.interpose","cljs.core/str","tunnl71.tools.core/mapply","seq30543","G__30544","cljs.core.partial","cljs.core/apply","tunnl71.tools.core/lconj","tunnl71.tools.core/concatv","seq30549","tunnl71.tools.core/drop-until","pred","tunnl71.tools.core/take-until","cljs.core.take_while","tunnl71.tools.core/dir","js/console.dir","tunnl71.tools.core/str->json","string_","js/JSON","tunnl71.tools.core/json->str","json_","tunnl71.tools.core/record","seq30555","G__30556","namesp","k-v-s","s__30558","b__30560","i__30559","vec__30563","iter__30557","vec__30569","cljs.core.partition","tunnl71.tools.core/encode","js/TextEncoder","tunnl71.tools.core/decode","uintarray","js/TextDecoder","tunnl71.tools.core/consume!","c__21307__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__21308__auto__","switch__21178__auto__","state_30583","state_val_30584","statearr-30585","cljs.core.async.impl.ioc-helpers/take!","inst_30581","cljs.core.async.impl.ioc-helpers/return-chan","inst_30574","statearr-30586","statearr-30587","statearr-30589","statearr-30590","inst_30579","statearr-30591","statearr-30595","state-machine__21179__auto__","ret-value__21180__auto__","result__21181__auto__","ex__21182__auto__","e30596","statearr-30597","statearr-30598","state__21309__auto__","statearr-30599","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","tunnl71.tools.core/seq->fn","seq_","cljs.core/volatile!","G__30601","tunnl71.tools.core/log","js/Math.log","tunnl71.tools.core/e","js/Math","tunnl71.tools.core.log","tunnl71.tools.core/add-keyboard-event-listener!","p1__30608#","goog.events/listen","js/document","cljs.core.println","tunnl71.tools.core/html->hiccup","hickory.core/as-hiccup","hickory.core/parse","cljs.core/nnext","tunnl71.tools.core/iterate-fix","cljs.core/reduced","cljs.core/iterate","tunnl71.tools.core/rangev","cljs.core/range","G__30616","tunnl71.tools.core/range+","end","start","step","cljs.core.take","tunnl71.tools.core.range_PLUS_","tunnl71.tools.core/rangev+","cljs.core.conj","tunnl71.tools.core/now","js/Date","cljs.core/chunk-first"],"sourcesContent":["(ns tunnl71.tools.core\n  (:require \n   [clojure.spec.alpha :as s]\n   [cljs-time.core]\n   [clojure.core.async :as a]\n\n   [json-html.core]\n\n\n   [cemerick.url :as url]\n   [reagent.core :as r]\n   [goog.events]\n   [hickory.core]\n   )\n  (:refer-clojure :exclude [uuid]))\n\n;; ================= common ========================================\n;; ================= clj ========================================\n(defn uuid\n  ([]\n   (cljs.core/random-uuid))\n  ([s]\n   (cljs.core/uuid s)))\n\n(defn vector->map\n  [v]\n  (zipmap (range) v))\n\n(defn zip [c1 c2] (map vector c1 c2))\n\n;;; made obsolete by discovery of _partition_\n(defn split-every-2 [coll]\n  (zip (take-nth 2 coll)\n       (take-nth 2 (rest coll))))\n\n(defn quot-rem [n, m] [quot n m, rem n m])\n\n;; ================= arrows, algebra, functional ========================================\n(defn invoke\n  [f & args]\n  (apply f args))\n\n;;; hacks\n(def $ partial)\n\n;;; arrows\n\n;;; the difference between feed and threading-macro is that threading macro threads something through forms that might not be values\n;;; functions evaluate their arguments first and then apply\n;;; java objects don't work with this\n(defn flip\n  [f]\n  (fn\n    [& xs]\n    (apply f (reverse xs))))\n\n(def pipe \"reverse composition\" (flip comp))\n\n;; (defn pipe [& fs] (apply comp (reverse fs)))\n(def >>> \"reverse composition\" pipe)\n;;; exercise: write a macro version for >>>\n\n(defn -->\n  [x & fs]\n  ((apply pipe fs) x))\n\n(defn bi-arrow\n  \"(a->b) -> (c->d) -> (a,c) -> (b,d)\"\n  ([f g [x y]]\n   [(f x) (g y)])\n\n  ([f g x y]\n   [(f x) (g y)]))\n\n;;; exercise: implement the following idea\n(defmacro <--\n  [symbol expression]\n  \"inverse of -->\")\n\n;; ================= sets ========================================\n\n;;;;  belonging\n;;; belonging with set theoretical semantics\n;;; because _some_ is fucking confusing\n(defn diff-keys\n  [& ms]\n  (apply clojure.set/difference (map (comp set keys) ms)))\n\n(defn presents\n  [coll & xs]\n  #_(.contains coll x)\n  #_(some? (some #{x} coll))\n  (some (into #{} xs) coll))\n\n(defn part?\n  [s1 s2]\n  (clojure.set/subset? (set s1) (set s2)))\n\n(def belongs (flip presents))\n(defn presents?\n  [coll & xs]\n  #_(apply (comp #(not= 0 (count %)) presents) coll xs)\n  (apply (comp some? presents) coll xs))\n\n(assert (= true (presents? [1 2 3] 2 3 4)))\n\n#_(def belongs? )\n\n(defn belongs?\n  [x coll]\n  ((comp some? belongs) x coll))\n\n;; ================= arithmetic ========================================\n(defn factorial\n  [n]\n  (reduce * (range 1 (inc n))))\n\n(defn exp\n  ([b i]\n   (reduce * (repeat i b)))\n  ([i]\n   (js/Math.exp i)))\n\n(assert (= 1 (exp 0)))\n(assert (= (js/Math.exp 1) (exp 1)))\n(assert (= (/ 1 (js/Math.exp 1)) (exp -1)))\n(assert (= 8 (exp 2 3)))\n\n;; ================= maps ========================================\n(defn coll->map\n  [coll]\n  (apply hash-map\n         (if (every? (comp not coll?) coll) ;; all are non-collections\n           coll\n           (map #(if (coll? %) (coll->map %) %) coll))))\n\n(defn map-entry\n  [k v]\n  (cljs.core/MapEntry. k v nil))\n\n(defn wrap\n  \"wraps a map in a name\"\n  [m new-ns]\n  (reduce-kv (fn [m k v]\n               (let [new-k (keyword (name new-ns) (name k))]\n                 (assoc m new-k v)))\n             {}\n             m))\n\n\n;;; PROBLEMATIC!!! it is weird for spec to be a collection\n(defn derive-spec\n  \"[spec] -> data -> spec\"\n  [specs x]\n  (first (for [s specs :when (s/valid? s x)] s)))\n\n;; ================= special ========================================\n;; ================= special ========================================\n;; ================= special ========================================\n(defn walk-transform\n  \"traverses data, keeping track of depth, avoiding the halting points\"\n  ([data halting-points f level]))\n\n(defn edn->hiccup-palette\n  ([system edn]\n   [:div.w3-container\n    (cond\n      (map? edn)\n      [:div.w3-container\n       (into [:ul.w3-ul {:key (uuid)}]\n             (for [[k v] edn]\n               [:li.w3-container\n                [:div.w3-row {:key (uuid)}\n                 [:div.w3-left.w3-padding {:style {:min-width \"10%\" :clear :right }} (edn->hiccup-palette system k)]\n                 [:div.w3-left.w3-padding (edn->hiccup-palette system v)]]]))]\n\n      (sequential? edn)\n      [:p (pr-str edn)]\n      #_[:div.w3-container.w3-row.w3-border\n         (for [x edn]\n           [:div.w3-container.w3-cell-col {:key (uuid)} (edn->hiccup system x)])]\n\n      (instance? cljs.core/Keyword edn)\n      [:p.w3-left {:style {:color (-> @system :palette/bleak :color)}} (pr-str edn) #_(clojure.string/replace (pr-str edn) #_(name edn) \"-\" \" \")]\n\n      (and (string? edn) (some? (re-matches #\"http.*\" edn)))\n      [:a {:href edn} [:p edn]]\n\n      (string? edn)\n      [:p.w3-left edn ]\n\n      (cljs.core/boolean? edn)\n      [:p (str edn)]\n\n      (nil? edn)\n      [:p \"nil\"]\n\n      :default\n      [:p.w3-left (str edn)])]))\n\n(defn edn->hiccup\n  ([edn]\n   #_(println \"printing edn \" edn)\n   [:div.w3-container\n    (cond\n      (map? edn)\n      [:div.w3-container\n       (into [:ul.w3-ul {:key (uuid)}]\n             (for [[k v] edn]\n               [:li.w3-container\n                [:div.w3-row {:key (uuid)}\n                 [:div.w3-left.w3-padding {:style {:min-width \"10%\" :clear :right }} (edn->hiccup k)]\n                 [:div.w3-left.w3-padding (edn->hiccup v)]]]))]\n\n      (list? edn)\n      [:pre (pr-str edn)]\n      ;; WARNING: this doesn't compile right in release builds\n      #_[:pre (with-out-str (cljs.pprint/pprint edn))]\n      \n      (sequential? edn)\n      [:div.w3-container.w3-row.w3-border\n       (for [x edn]\n         [:div.w3-container.w3-cell-col {:key (uuid)} (edn->hiccup x)])]\n\n      (instance? cljs.core/Keyword edn)\n      [:p.w3-left (pr-str edn) #_(clojure.string/replace (pr-str edn) #_(name edn) \"-\" \" \")]\n\n      (and (string? edn) (some? (re-matches #\"http.*\" edn)))\n      [:a {:href edn} [:p edn]]\n\n      (string? edn)\n      [:p.w3-left edn ]\n\n      (cljs.core/boolean? edn)\n      [:p (str edn)]\n\n      (nil? edn)\n      [:p \"nil\"]\n\n      :default\n      [:p.w3-left (str edn)])]))\n\n(defn edn->hiccup-true-to-form\n  ([edn style]\n   (let [this #'edn->hiccup-true-to-form]\n     [:div.w3-container\n      (cond\n        (map? edn)\n        [:<>\n         [:span style \"{\"]\n         (into [:div {:key (uuid)}]\n               (for [[k v] edn]\n                 [:div.w3-container.w3-row {:key (uuid)}\n                  [:div.w3-cell (merge {:style {:min-width \"10%\" :clear :right :color \"lightgreen\" }} style) (this k)]\n                  [:div.w3-cell {:style {:color \"lightgrey\"} } (this v)]]))\n         [:span style \"}\"]]\n\n        (list? edn)\n        [:pre (pr-str edn)]\n        #_[:pre (with-out-str (cljs.pprint/pprint edn))]\n        \n        (sequential? edn)\n        [:div.w3-container.w3-row.w3-border\n         (for [x edn]\n           [:div.w3-container.w3-cell-col {:key (uuid)} (this x)])]\n\n        (instance? cljs.core/Keyword edn)\n        [:p.w3-left (pr-str edn) #_(clojure.string/replace (pr-str edn) #_(name edn) \"-\" \" \")]\n\n        (and (string? edn) (some? (re-matches #\"http.*\" edn)))\n        [:a {:href edn} [:p edn]]\n\n        (string? edn)\n        [:p.w3-left edn ]\n\n        (cljs.core/boolean? edn)\n        [:p (str edn)]\n\n        (nil? edn)\n        [:p \"nil\"]\n\n        :default\n        [:p.w3-left (str edn)])]))\n  ([edn]\n   (let [this #'edn->hiccup-true-to-form]\n     [:div.w3-container\n      (cond\n        (map? edn)\n        [:<>\n         [:span {:style {:color \"green\"} } \"{\"]\n         (into [:div {:key (uuid)}]\n               (for [[k v] edn]\n                 [:div.w3-container.w3-row {:key (uuid)}\n                  [:div.w3-cell {:style {:min-width \"10%\" :clear :right :color \"lightgreen\" }} (this k)]\n                  [:div.w3-cell {:style {:color \"lightgrey\"} } (this v)]]))\n         [:span {:style {:color \"green\"} } \"}\"]]\n\n        (list? edn)\n        [:pre (pr-str edn)]\n        #_[:pre (with-out-str (cljs.pprint/pprint edn))]\n        \n        (sequential? edn)\n        [:div.w3-container.w3-row.w3-border\n         (for [x edn]\n           [:div.w3-container.w3-cell-col {:key (uuid)} (this x)])]\n\n        (instance? cljs.core/Keyword edn)\n        [:p.w3-left (pr-str edn) #_(clojure.string/replace (pr-str edn) #_(name edn) \"-\" \" \")]\n\n        (and (string? edn) (some? (re-matches #\"http.*\" edn)))\n        [:a {:href edn} [:p edn]]\n\n        (string? edn)\n        [:p.w3-left edn ]\n\n        (cljs.core/boolean? edn)\n        [:p (str edn)]\n\n        (nil? edn)\n        [:p \"nil\"]\n\n        :default\n        [:p.w3-left (str edn)])])))\n\n\n\n(defrecord Ref [address])\n\n\n;; ================= edge representation ========================================\n(defn edn->node\n  \"turns a nested edn-map to a tree of form {:in some-key @#{:out :outs} some-child(ren)}\\n\n  does NOT dig into vectors!\\n\n  possibly better names for it:\\n\n  io-map, edge-tree, ...\"\n  ([value]\n   (edn->node :$/root value))\n  ([root-k value]\n   (if (map? value)\n     {:in root-k\n      :outs (vec (for [[k v] value]\n                   (edn->node k v)))}\n     {:in root-k\n      :out value}\n     )))\n\n;;; seems to be better since includes associatives & not just edn\n(defn edge->node\n  \"turns a nested edn-map to a tree of form {:in some-key @#{:out :outs} some-child(ren)}\\n\n    treats VECTORS as int-indexed maps\n  possibly better names for it:\\n\n  io-map, edge-tree, ...\"\n  ([out]\n   (edge->node :$/root out))\n  ([root-k out]\n   (cond\n\n     (vector? out)\n     {:in root-k\n      :outs\n      (mapv (fn [i x] (edge->node i x)) (range) out)}\n     \n     (map? out)\n     {:in root-k\n      :outs \n      (vec (for [[k v] out]\n             (edge->node k v)))}\n\n     (not (associative? out))\n     {:in root-k\n      :out out}\n     )))\n\n(defn edge->node-mappy\n  ([out]\n   (edge->node-mappy :root out))\n  ([k out]\n   (cond\n     (vector? out)\n     {k (apply merge (mapv edge->node-mappy (range) out))}\n     \n     (map? out)\n     {k (apply merge (map (fn [[k v]] (edge->node-mappy k v)) out))}\n\n     (not (associative? out))\n     {k out})))\n\n(defn node->edn-helper\n  ([node]\n   (if (contains? node :out)\n     {(:in node) (:out node)}\n     {(:in node) (into {} (map node->edn-helper (:outs node)))})))\n\n(defn node->edn\n  ([node]\n   (let [result (node->edn-helper node)]\n     (if (contains? result :$/root)\n       (:$/root result)\n       result))))\n\n(comment\n  (if (contains? result :$/root)\n       (val result)\n       result)\n  (contains?  :$/root)\n\n  (vals (node->edn-helper\n    (edn->node {:style\n                {\n                 :font-size \"100%\"\n                 :color \"darkgrey\"\n                 :background-repeat \"repeat-y\"\n                 :foo {:bar \"kill me\"\n                       :aebf 0}\n                 }})))\n  \n\n  (clojure.walk/postwalk\n   #(assoc % )\n   (edn->node :root\n              {:style\n               {\n                :font-size \"100%\"\n                :color \"darkgrey\"\n                :background-repeat \"repeat-y\"\n                :foo {:bar \"kill me\"\n                      :aebf 0}\n                }}))\n\n  (clojure.walk/walk (fn [[k v]] (if (= k :in) )))\n  \n  {:in :root, :outs ({:in :style, :outs ({:in :font-size, :outs (\"100%\")} {:in :color, :outs (\"darkgrey\")} {:in :background-repeat, :outs (\"repeat-y\")} {:in :foo, :outs ({:in :bar, :outs (\"kill me\")} {:in :aebf, :outs (0)})})})}\n\n  \n  )\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;  keys -> values -> [key-value]\n(defn label\n  \"[k] -> [v] -> [kv]\"\n  ([ks coll]\n   (map (fn [& xs] (apply zipmap ks xs)) coll))\n  ([coll]\n   (label (first coll) (rest coll)))\n  #_(transduce (map (fn [xs] (into (sorted-map) (zipmap ks xs)))) conj coll))\n;;; TODO: write tests for label\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;  geometric sum\n(defn geometric-sum\n  \"sum of n terms with multiplying factor r.\n  a + ar + ar2 + ... + ar^(n - 1)\"\n  [n a r]\n  (* a (/ (- (Math/pow r n) 1) (- r 1))))\n\n;; ================= process timing ========================================\n(defmacro log-time-ref\n  \"Evaluates expr and instead of printing the time it took, conjoins it to the reference collection.  Returns the value of expr.\"\n  {:added \"1.0\"}\n  [a-ref expr]\n  `(let [start# (. System (nanoTime))\n         ret# ~expr]\n     (swap! ~a-ref conj (/ (double (- (. System (nanoTime)) start#)) 1000000.0))\n     ret#))\n\n(defmacro log-time\n  \"Evaluates expr and returns map containing time elapsed in ms and return value\"\n  {:added \"1.0\"}\n  [expr]\n  `(let [start# (. System (nanoTime))\n         ret# ~expr]\n\n     {:t (/ (double (- (. System (nanoTime)) start#)) 1000000.0)\n      :value ret#}))\n\n(comment\n  (log-time-map (do (Thread/sleep 1000) 3))\n  )\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;  math symbols\n(def math-symbols \"\u2211\u2207\u2202\u0394\u03b7\")\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;; string representation of function name\n;; (defn fn-name\n;;   \"function -> string\n;;   not perfect but effective\"\n;;   [f]\n;;   (apply str (butlast (re-find #\".*@\" (name (keyword (clojure.repl/demunge (str f))))))))\n\n\n\n\n;; ================= letdef macro ========================================\n(defmacro letdef\n  [statements & r]\n  `(do ~@(for [[n c] (partition 2 statements)]\n           `(def ~n ~c))\n       ~@r))\n\n(defmacro deflet\n  [& statements]\n  `(let [~@(apply concat (map rest statements))]))\n\n(comment\n  (letdef [x 11\n           y (+ x 11)\n           z (range 10)]\n          (map #(+ % x y) z))\n\n  (do (def x 11)\n      (def y (+ x 11))\n      (def z (range 10))\n      (map #(+ % x y) z))\n\n  (macroexpand '(letdef [x 11\n                         y (+ x 11)\n                         z (range 10)]\n                        (map #(+ % x y) z)))\n  )\n\n\n;; ================= divided ========================================\n(defn divide-set\n  [ratio xs]\n  (let [\n        n (count xs)\n        length-training (int (* n ratio))\n        [training-set, test-set] (split-at length-training xs)]\n    [training-set test-set]))\n\n;; ================= count distinct ========================================\n(def countd \"deprecated\" (comp count distinct))\n\n\n;; ================= other ========================================\n(defn random-take\n  [n coll]\n  (map #(nth %1 %2) (repeat n coll) (repeatedly #(rand-int (count coll)))))\n\n(defn nil-chain\n  [& fs]\n  (fn [x]\n    (first (drop-while nil? (map #(% x) fs)))))\n\n\n\n\n\n\n;; ================= utils ========================================\n(defn to-keyword\n  [s]\n  (keyword (clojure.string/replace s \" \" \"-\")))\n\n#_(defn tree->routes\n    \"TO BE REFINED\"\n    [r t]\n    (for [[b v] t]\n      (let [b' (str r b)]\n        (if-not (map? v)\n          (str b' v)\n          (tree->routes b' v)))))\n\n#_(defn consv\n    [x coll]\n    (cons x coll))\n\n(defn add\n  [coll x]\n  (concat coll [x]))\n\n(defn csv->edn\n  [string]\n  (let [s-s-str (->> (clojure.string/split-lines string #_@upload-file-state-out)\n                     (map #(clojure.string/split % #\",\")))\n        ks (first s-s-str)\n        s-vs (rest s-s-str)]\n    (map #(zipmap ks %) s-vs)))\n\n(defn counter\n  []\n  (let [x (atom -1)]\n    (fn []\n      (swap! x inc)\n      @x)))\n\n(defn add-id\n  [doc]\n  (assoc doc :tunnl71.id (counter)))\n\n(defn transpose\n  [vs]\n  (apply map vector vs))\n\n(defn ->seqmap\n  \"mapseq -> seqmap\"\n  [mapseq]\n  (let [ks (keys mapseq)\n        vs (vals mapseq)]\n    (map #(zipmap %1 %2) (repeat ks) (transpose vs))))\n\n(defn tree->routes\n  ([t]\n   (map rest (tree->routes [] nil t)))\n  ([p k v]\n   (if (map? v)\n     (let [result (for [[kx vx] v]\n                    (tree->routes (concat p [k]) kx vx))]\n       (apply concat result))\n     (let [result (concat p [k v])]\n       [result]))))\n\n(defn path\n  [& xs]\n  (--> xs\n       #(remove nil? %)\n       (fn [xs] (map #(if (keyword %) (name %) (str %)) xs))\n       #(interpose \"/\" %)\n       #(apply str %)\n       #(str \"/\" %)\n       #(clojure.string/replace % #\"/+\" \"/\")))\n\n(defn mapply\n  [f & xs]\n  (apply map (partial apply f) xs))\n\n\n;; #?(:cljs\n;;    (defn get-data!\n;;      [atom url]\n;;      (a/go (reset! atom (cljs.reader/read-string (:body (a/<! (client/get url))))))))\n\n\n;; ================= conj last ========================================\n(defn lconj\n  [coll x]\n  (concat [x] coll))\n\n(defn concatv\n  [& vs]\n  (vec (apply concat vs)))\n\n;; ================= coll operations ========================================\n(defn drop-until\n  [pred coll]\n  (first (drop-while (comp not pred) coll)))\n\n(defn take-until\n  [pred coll]\n  (take-while (comp not pred) coll))\n\n(comment\n  (take-until even? '(2 3 5 7 9 10 12 13))\n  (take-until even? '(1 3 5 7 9 10 12 13))\n  (drop-while odd? '(1 3 5 7 9 10 12 13))\n  )\n\n;; ================= inspection ========================================\n(defn dir\n  [x]\n  (js/console.dir x))\n\n(defn str->json\n  [string_]\n  (-> js/JSON (.parse string_)))\n\n(defn json->str\n  [json_]\n  (-> js/JSON (.stringify json_)))\n\n;; ================= record ========================================\n(defn record\n  \"namespace + k v + k v + ... -> namespaced-record\"\n  [namesp & k-v-s]\n  (into {}\n        (for [[k v] (partition 2 k-v-s)]\n          (map-entry (keyword namesp k) v))))\n\n(comment\n  ;; demo\n  (do (println (record :root.branch :leaf \"foobar\")))\n  )\n\n\n;; ================= encode decode crypto ========================================\n(defn encode\n  \"String -> Uint8Array\"\n  [s]\n  (-> (new js/TextEncoder) (.encode  s)))\n\n(defn decode\n  \"Uint8Array -> String\"\n  [uintarray]\n  (-> (new js/TextDecoder) (.decode uintarray)))\n\n\n(comment\n  ;; demo\n  (do (println (encode \"foobar\"))\n      (println (decode (encode \"foobar\"))))\n  )\n\n\n;; ================= async ========================================\n#_(defn consume!\n  [out]\n  (loop []\n    (a/go\n      (when (a/<! out)\n        (recur)))))\n\n(defn consume!\n  \"suck!\"\n  [out]\n  (a/go-loop []\n    (when (a/<! out)\n      (recur))))\n\n;; ================= sequence ========================================\n(defn seq->fn\n  [seq_]\n  (let [v (volatile! seq_)]\n    (fn []\n      (let [result (first @v)]\n        (vswap! v rest)\n        result))))\n\n\n;; ================= math log ========================================\n(defn log\n  ([a b]\n   (/ (js/Math.log a) (js/Math.log b)))\n  ([a]\n   (js/Math.log a)))\n\n(def e (-> js/Math (.exp 1)))\n\n(assert (= 5 (log 32 2)))\n\n\n;; ================= events ========================================\n(defn add-keyboard-event-listener!\n  []\n  (goog.events/listen  js/document \"keydown\" #(println (pr-str (.-keyCode %)))))\n\n;; ================= html ========================================\n(defn html->hiccup\n  [string_]\n  (-> (hickory.core/as-hiccup\n     (hickory.core/parse\n      string_))\n      first nnext next first nnext first))\n\n(comment\n  (html->hiccup \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi bi-file-earmark-person\\\" viewBox=\\\"0 0 16 16\\\">\n                        <path d=\\\"M11 8a3 3 0 1 1-6 0 3 3 0 0 1 6 0z\\\"/>\n                        <path d=\\\"M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2zM9.5 3A1.5 1.5 0 0 0 11 4.5h2v9.255S12 12 8 12s-5 1.755-5 1.755V2a1 1 0 0 1 1-1h5.5v2z\\\"/>\n                        </svg>\")\n  )\n\n\n;; ================= find fixpoint ========================================\n(defn iterate-fix\n  \"applies f until application becomes idempotent\"\n  [f x]\n  (reduce (fn [b a] (cond (= b a) (reduced b) :default a))  (iterate f x)))\n\n(comment\n  (iterate-fix #( % 11) 12312515398921)\n  )\n\n;; ================= range stuff: inclusive range,  ======================================\n(def rangev\n  (>>> range vec))\n\n(assert (= (rangev 2 10 3) (into [] (range 2 9 3)) [2 5 8]))\n\n(defn range+\n  \"end inclusive range\"\n  ([]\n   (range))\n  ([end]\n   (range (inc end)))\n  ([start end]\n   (range start (inc end)))\n  ([start end step]\n   (range start (inc end) step)))\n\n(assert (and\n         (= (take 10 (range+)) (take 10 (range)))\n         (= (range+ 0) '(0))\n         (= (range+ 1) '(0 1))\n         (= (range+ 3) '(0 1 2 3))\n         (= (range+ 2 3) '(2 3))\n         (= (range+ 99 99) '(99))\n         (= (range+ 99 99) (range 99 100))\n         (= (range+ 1000 1006 5) (range 1000 1006 5))\n         (= (range+ 1000 1006 2) (concat (range 1000 1006 2) '(1006)))))\n\n(def rangev+\n  (>>> range+ vec))\n        \n(assert (= (rangev+ 2 10 2) (conj (into [] (range 2 10 2)) 10) [2 4 6 8 10]))\n\n\n;; ================= now ========================================\n(defn now\n  []\n  (-> (new js/Date ) .toISOString))\n"]}