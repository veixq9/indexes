{"version":3,"sources":["thi/ng/typedarrays/core.cljs"],"mappings":";AAEA;;;wDAAA,xDAAMA;AAAN,AAEK,UAAK,4BAAA,3BAAM,QAAA,PAAMC;;AAEtB,sCAAA,wCAAA,eAAA,aAAA,YAAA,oBAAA,cAAA,aAAA,cAAA,eAAA,eAAA,2DAAA,sDAAA,sDAAA,uEAAA,yDAAA,uDAAA,yDAAA,4DAAA,pqBAAeC;AAWf;;;6CAAA,7CAAMC,kGAEHC;AAFH,AAGE,GAAI,6CAAA,7CAACC,sDAAW,AAACC,YAAYF;AAC3B,GAAI,OAAS,AAAqBA;AAChC,OAAUA;;AADZ;;;AADF;;;AAIF,qCAAA,rCAAMG,kFACHH;AADH,AAEE,GAAI,AAACI,uBAAOJ;AAAZ;;AAEE,oBAAI,AAACD,2CAAaC;4MACX,AAAeA,rGAEf,kBAAA,uCAAA,zDAACK,hBACDC,vFACA,uFAAA,hFAACC,4CAAIT;;AALZ;;;;AAOJ,oBAAMF;AAAN,AACE,AAACY,oBACA,WAAKC;AAAL,AACE,oBAAU,AAAA,AAAI,CAAMC,KAAQD;AAA5B;;AAAA,AACE,QAAM,AAAA,AAAI,CAAMC,KAAQD,yBAClB,WAAKE,KAAKC;AAAV,AACE,YAAA,RAASC;AAAT,AACE,IAAMF,WAAK,EAAI,QAAA,PAAMA,aACR,yBAAA,xBAAK,CAAG,AAAUE,eAAMF,aACxB,QAAA,PAAKA;IACZC,SAAK,kBAAI,AAACE,cAAcF,KACjB,EAAI,MAAA,LAAMA,WACR,uBAAA,tBAAK,CAAG,AAAUC,eAAMD,WACxB,AAACG,SAASH,GAAG,AAAUC,eACzB,AAAUA;IACjBG,MAAK,6BAAA,7BAACC,SAAS,CAAGL,SAAGD;IACrBO,OAAK,AAAeL;IACpBM,OAAK,IAAoBD,KAAKF;AAVpC,AAWE,cAAA,VAAOI;;AAAP,AACE,GAAM,CAAGA,UAAEJ;AAAX,AACE,CAAMG,KAAKC,WAAE,CAAMP,MAAK,CAAGF,WAAKS;;AAChC,eAAO,WAAA,VAAKA;;;;AAFd;;;;AAGFD;;;GAChB,AAACE,eAAKvB;;AAvBT;AAyBA;;;;+BAAA,/BAAMwB,sEAGHC;AAHH,AAIE,GACE,OAASA;AAAc,YAAAC,UAAeD;;AADxC,oBAEE,AAACxB,2CAAawB;AAAc,YAAAC,UAAeD;;AAF7C,AAIE,IAAMP,MAAI,AAACS,gBAAMF;IACXG,MAAI,KAAAF,UAAeR;AADzB,AAEE,cAAA,VAAOI;IAAKO,aAAKJ;;AAAjB,AACE,GAAM,CAAGH,UAAEJ;AAAX,AACE,CAAMU,IAAIN,WAAE,AAACd,gBAAMqB;;AACnB,eAAO,WAAA,VAAKP;eAAG,AAACQ,eAAKD;;;;;AAFvB;;;;AAGFD;;;;;AAEN,AAAA;;;;;oCAAA,4CAAAG,hFAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,gEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,gEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,kEAAA,lEAAMD,6EAIFE;AAJJ,AAIO,YAAAT,UAAe,AAAUS;;;AAJhC,CAAA,kEAAA,lEAAMF,6EAKFE,EAAEC,OAAOlB;AALb,AAKkB,YAAAQ,UAAe,AAAUS,SAAGC,OAAOlB;;;AALrD,CAAA,4DAAA,5DAAMe;;AAAN,AAOA;;;;gCAAA,hCAAMI,wEAGHZ;AAHH,AAIE,GACE,OAASA;AAAc,YAAAa,WAAgBb;;AADzC,oBAEE,AAACxB,2CAAawB;AAAc,YAAAa,WAAgBb;;AAF9C,AAIE,IAAMP,MAAI,AAACS,gBAAMF;IACXG,MAAI,KAAAU,WAAgBpB;AAD1B,AAEE,cAAA,VAAOI;IAAKO,aAAKJ;;AAAjB,AACE,GAAM,CAAGH,UAAEJ;AAAX,AACE,CAAMU,IAAIN,WAAE,AAACd,gBAAMqB;;AACnB,eAAO,WAAA,VAAKP;eAAG,AAACQ,eAAKD;;;;;AAFvB;;;;AAGFD;;;;;AAEN,AAAA;;;;;qCAAA,6CAAAG,lFAAMS;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,iEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,iEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAN,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,mEAAA,nEAAMM,8EAIFL;AAJJ,AAIO,YAAAG,WAAgB,AAAUH;;;AAJjC,CAAA,mEAAA,nEAAMK,8EAKFL,EAAEC,OAAOlB;AALb,AAKkB,YAAAoB,WAAgB,AAAUH,SAAGC,OAAOlB;;;AALtD,CAAA,6DAAA,7DAAMsB;;AAAN,AAOA;;;;wCAAA,xCAAMC,wFAGHhB;AAHH,AAIE,GACE,OAASA;AAAc,YAAAiB,kBAAuBjB;;AADhD,oBAEE,AAACxB,2CAAawB;AAAc,YAAAiB,kBAAuBjB;;AAFrD,AAIE,IAAMP,MAAI,AAACS,gBAAMF;IACXG,MAAI,KAAAc,kBAAuBxB;AADjC,AAEE,cAAA,VAAOI;IAAKO,aAAKJ;;AAAjB,AACE,GAAM,CAAGH,UAAEJ;AAAX,AACE,CAAMU,IAAIN,WAAE,AAACd,gBAAMqB;;AACnB,eAAO,WAAA,VAAKP;eAAG,AAACQ,eAAKD;;;;;AAFvB;;;;AAGFD;;;;;AAEN,AAAA;;;;;6CAAA,qDAAAG,lGAAMa;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,yEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,yEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAV,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,2EAAA,3EAAMU,sFAIFT;AAJJ,AAIO,YAAAO,kBAAuB,AAAUP;;;AAJxC,CAAA,2EAAA,3EAAMS,sFAKFT,EAAEC,OAAOlB;AALb,AAKkB,YAAAwB,kBAAuB,AAAUP,SAAGC,OAAOlB;;;AAL7D,CAAA,qEAAA,rEAAM0B;;AAAN,AAOA;;;;gCAAA,hCAAMC,wEAGHpB;AAHH,AAIE,GACE,OAASA;AAAc,YAAAqB,WAAgBrB;;AADzC,oBAEE,AAACxB,2CAAawB;AAAc,YAAAqB,WAAgBrB;;AAF9C,AAIE,IAAMP,MAAI,AAACS,gBAAMF;IACXG,MAAI,KAAAkB,WAAgB5B;AAD1B,AAEE,cAAA,VAAOI;IAAKO,aAAKJ;;AAAjB,AACE,GAAM,CAAGH,UAAEJ;AAAX,AACE,CAAMU,IAAIN,WAAE,AAACd,gBAAMqB;;AACnB,eAAO,WAAA,VAAKP;eAAG,AAACQ,eAAKD;;;;;AAFvB;;;;AAGFD;;;;;AAEN,AAAA;;;;;qCAAA,6CAAAG,lFAAMiB;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,iEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,iEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAd,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,mEAAA,nEAAMc,8EAIFb;AAJJ,AAIO,YAAAW,WAAgB,AAAUX;;;AAJjC,CAAA,mEAAA,nEAAMa,8EAKFb,EAAEC,OAAOlB;AALb,AAKkB,YAAA4B,WAAgB,AAAUX,SAAGC,OAAOlB;;;AALtD,CAAA,6DAAA,7DAAM8B;;AAAN,AAOA;;;;iCAAA,jCAAMC,0EAGHxB;AAHH,AAIE,GACE,OAASA;AAAc,YAAAyB,YAAiBzB;;AAD1C,oBAEE,AAACxB,2CAAawB;AAAc,YAAAyB,YAAiBzB;;AAF/C,AAIE,IAAMP,MAAI,AAACS,gBAAMF;IACXG,MAAI,KAAAsB,YAAiBhC;AAD3B,AAEE,cAAA,VAAOI;IAAKO,aAAKJ;;AAAjB,AACE,GAAM,CAAGH,UAAEJ;AAAX,AACE,CAAMU,IAAIN,WAAE,AAACd,gBAAMqB;;AACnB,eAAO,WAAA,VAAKP;eAAG,AAACQ,eAAKD;;;;;AAFvB;;;;AAGFD;;;;;AAEN,AAAA;;;;;sCAAA,8CAAAG,pFAAMqB;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,kEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,kEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAlB,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,oEAAA,pEAAMkB,+EAIFjB;AAJJ,AAIO,YAAAe,YAAiB,AAAUf;;;AAJlC,CAAA,oEAAA,pEAAMiB,+EAKFjB,EAAEC,OAAOlB;AALb,AAKkB,YAAAgC,YAAiB,AAAUf,SAAGC,OAAOlB;;;AALvD,CAAA,8DAAA,9DAAMkC;;AAAN,AAOA;;;;gCAAA,hCAAMC,wEAGH5B;AAHH,AAIE,GACE,OAASA;AAAc,YAAA6B,WAAgB7B;;AADzC,oBAEE,AAACxB,2CAAawB;AAAc,YAAA6B,WAAgB7B;;AAF9C,AAIE,IAAMP,MAAI,AAACS,gBAAMF;IACXG,MAAI,KAAA0B,WAAgBpC;AAD1B,AAEE,cAAA,VAAOI;IAAKO,aAAKJ;;AAAjB,AACE,GAAM,CAAGH,UAAEJ;AAAX,AACE,CAAMU,IAAIN,WAAE,AAACd,gBAAMqB;;AACnB,eAAO,WAAA,VAAKP;eAAG,AAACQ,eAAKD;;;;;AAFvB;;;;AAGFD;;;;;AAEN,AAAA;;;;;qCAAA,6CAAAG,lFAAMyB;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,iEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,iEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAtB,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,mEAAA,nEAAMsB,8EAIFrB;AAJJ,AAIO,YAAAmB,WAAgB,AAAUnB;;;AAJjC,CAAA,mEAAA,nEAAMqB,8EAKFrB,EAAEC,OAAOlB;AALb,AAKkB,YAAAoC,WAAgB,AAAUnB,SAAGC,OAAOlB;;;AALtD,CAAA,6DAAA,7DAAMsC;;AAAN,AAOA;;;;iCAAA,jCAAMC,0EAGHhC;AAHH,AAIE,GACE,OAASA;AAAc,YAAAiC,YAAiBjC;;AAD1C,oBAEE,AAACxB,2CAAawB;AAAc,YAAAiC,YAAiBjC;;AAF/C,AAIE,IAAMP,MAAI,AAACS,gBAAMF;IACXG,MAAI,KAAA8B,YAAiBxC;AAD3B,AAEE,cAAA,VAAOI;IAAKO,aAAKJ;;AAAjB,AACE,GAAM,CAAGH,UAAEJ;AAAX,AACE,CAAMU,IAAIN,WAAE,AAACd,gBAAMqB;;AACnB,eAAO,WAAA,VAAKP;eAAG,AAACQ,eAAKD;;;;;AAFvB;;;;AAGFD;;;;;AAEN,AAAA;;;;;sCAAA,8CAAAG,pFAAM6B;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,kEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,kEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA1B,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,oEAAA,pEAAM0B,+EAIFzB;AAJJ,AAIO,YAAAuB,YAAiB,AAAUvB;;;AAJlC,CAAA,oEAAA,pEAAMyB,+EAKFzB,EAAEC,OAAOlB;AALb,AAKkB,YAAAwC,YAAiB,AAAUvB,SAAGC,OAAOlB;;;AALvD,CAAA,8DAAA,9DAAM0C;;AAAN,AAOA;;;;kCAAA,lCAAMC,4EAGHpC;AAHH,AAIE,GACE,OAASA;AAAc,YAAAqC,aAAkBrC;;AAD3C,oBAEE,AAACxB,2CAAawB;AAAc,YAAAqC,aAAkBrC;;AAFhD,AAIE,IAAMP,MAAI,AAACS,gBAAMF;IACXG,MAAI,KAAAkC,aAAkB5C;AAD5B,AAEE,cAAA,VAAOI;IAAKO,aAAKJ;;AAAjB,AACE,GAAM,CAAGH,UAAEJ;AAAX,AACE,CAAMU,IAAIN,WAAE,AAACd,gBAAMqB;;AACnB,eAAO,WAAA,VAAKP;eAAG,AAACQ,eAAKD;;;;;AAFvB;;;;AAGFD;;;;;AAEN,AAAA;;;;;uCAAA,+CAAAG,tFAAMiC;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,mEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,mEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA9B,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,qEAAA,rEAAM8B,gFAIF7B;AAJJ,AAIO,YAAA2B,aAAkB,AAAU3B;;;AAJnC,CAAA,qEAAA,rEAAM6B,gFAKF7B,EAAEC,OAAOlB;AALb,AAKkB,YAAA4C,aAAkB,AAAU3B,SAAGC,OAAOlB;;;AALxD,CAAA,+DAAA,/DAAM8C;;AAAN,AAOA;;;;kCAAA,lCAAMC,4EAGHxC;AAHH,AAIE,GACE,OAASA;AAAc,YAAAyC,aAAkBzC;;AAD3C,oBAEE,AAACxB,2CAAawB;AAAc,YAAAyC,aAAkBzC;;AAFhD,AAIE,IAAMP,MAAI,AAACS,gBAAMF;IACXG,MAAI,KAAAsC,aAAkBhD;AAD5B,AAEE,cAAA,VAAOI;IAAKO,aAAKJ;;AAAjB,AACE,GAAM,CAAGH,UAAEJ;AAAX,AACE,CAAMU,IAAIN,WAAE,AAACd,gBAAMqB;;AACnB,eAAO,WAAA,VAAKP;eAAG,AAACQ,eAAKD;;;;;AAFvB;;;;AAGFD;;;;;AAEN,AAAA;;;;;uCAAA,+CAAAG,tFAAMqC;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,mEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,mEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAlC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,qEAAA,rEAAMkC,gFAIFjC;AAJJ,AAIO,YAAA+B,aAAkB,AAAU/B;;;AAJnC,CAAA,qEAAA,rEAAMiC,gFAKFjC,EAAEC,OAAOlB;AALb,AAKkB,YAAAgD,aAAkB,AAAU/B,SAAGC,OAAOlB;;;AALxD,CAAA,+DAAA,/DAAMkD;;AAAN","names":["thi.ng.typedarrays.core/typed-arrays-supported?","js/window","thi.ng.typedarrays.core/array-types","thi.ng.typedarrays.core/typed-array?","x","cljs.core._EQ_","goog/typeOf","thi.ng.typedarrays.core/array-type","cljs.core/array?","cljs.core/re-find","cljs.core/first","cljs.core.get","cljs.core/run!","type","js/self","from","to","this","goog/isNumber","Math/min","len","Math/max","ctor","dest","i","cljs.core/keys","thi.ng.typedarrays.core/int8","size-or-coll","js/Int8Array","cljs.core/count","buf","coll","cljs.core/next","var_args","G__35399","thi.ng.typedarrays.core/int8-view","js/Error","a","offset","thi.ng.typedarrays.core/uint8","js/Uint8Array","G__35403","thi.ng.typedarrays.core/uint8-view","thi.ng.typedarrays.core/uint8-clamped","js/Uint8ClampedArray","G__35406","thi.ng.typedarrays.core/uint8-clamped-view","thi.ng.typedarrays.core/int16","js/Int16Array","G__35408","thi.ng.typedarrays.core/int16-view","thi.ng.typedarrays.core/uint16","js/Uint16Array","G__35416","thi.ng.typedarrays.core/uint16-view","thi.ng.typedarrays.core/int32","js/Int32Array","G__35430","thi.ng.typedarrays.core/int32-view","thi.ng.typedarrays.core/uint32","js/Uint32Array","G__35433","thi.ng.typedarrays.core/uint32-view","thi.ng.typedarrays.core/float32","js/Float32Array","G__35439","thi.ng.typedarrays.core/float32-view","thi.ng.typedarrays.core/float64","js/Float64Array","G__35448","thi.ng.typedarrays.core/float64-view"],"sourcesContent":["(ns thi.ng.typedarrays.core)\n\n(defn typed-arrays-supported?\n  \"Returns true if JS runtime supports typed arrays\"\n  [] (not (nil? (aget js/window \"ArrayBuffer\"))))\n\n(def ^:private array-types\n  {\"Uint8Array\"        :uint8\n   \"Uint8ClampedArray\" :uint8-clamped\n   \"Uint16Array\"       :uint16\n   \"Uint32Array\"       :uint32\n   \"Int8Array\"         :int8\n   \"Int16Array\"        :int16\n   \"Int32Array\"        :int32\n   \"Float32Array\"      :float32\n   \"Float64Array\"      :float64})\n\n(defn typed-array?\n  \"Returns truthy value if the given arg is a typed array instance\"\n  [x]\n  (if (= \"object\" (goog/typeOf x))\n    (if (number? (.-BYTES_PER_ELEMENT x))\n      (.-buffer x))))\n\n(defn array-type\n  [x]\n  (if (array? x)\n    :array\n    (if (typed-array? x)\n      (->> (.-constructor x)\n           str\n           (re-find #\"((Uint|Int|Float)\\d+(Clamped)?Array)\")\n           first\n           (get array-types)))))\n\n(when typed-arrays-supported?\n  (run!\n   (fn [type]\n     (when-not (.. (aget js/self type) -prototype -slice)\n       (set! (.. (aget js/self type) -prototype -slice)\n             (fn [from to]\n               (this-as this\n                 (let [from (if (neg? from)\n                              (int (+ (.-length this) from))\n                              (int from))\n                       to   (if (goog/isNumber to)\n                              (if (neg? to)\n                                (int (+ (.-length this) to))\n                                (Math/min to (.-length this)))\n                              (.-length this))\n                       len  (Math/max (- to from) 0)\n                       ctor (.-constructor this)\n                       dest (js* \"new ~{}(~{})\" ctor len)]\n                   (loop [i 0]\n                     (when (< i len)\n                       (aset dest i (aget this (+ from i)))\n                       (recur (inc i))))\n                   dest))))))\n   (keys array-types)))\n\n(defn int8\n  \"Creates a native Int8Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created.\"\n  [size-or-coll]\n  (cond\n    (number? size-or-coll) (js/Int8Array. size-or-coll)\n    (typed-array? size-or-coll) (js/Int8Array. size-or-coll)\n    :else\n    (let [len (count size-or-coll)\n          buf (js/Int8Array. len)]\n      (loop [i 0, coll size-or-coll]\n        (when (< i len)\n          (aset buf i (first coll))\n          (recur (inc i) (next coll))))\n      buf)))\n\n(defn int8-view\n  \"Creates a Int8Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length.\"\n  ([a] (js/Int8Array. (.-buffer a)))\n  ([a offset len] (js/Int8Array. (.-buffer a) offset len)))\n\n(defn uint8\n  \"Creates a native Uint8Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created.\"\n  [size-or-coll]\n  (cond\n    (number? size-or-coll) (js/Uint8Array. size-or-coll)\n    (typed-array? size-or-coll) (js/Uint8Array. size-or-coll)\n    :else\n    (let [len (count size-or-coll)\n          buf (js/Uint8Array. len)]\n      (loop [i 0, coll size-or-coll]\n        (when (< i len)\n          (aset buf i (first coll))\n          (recur (inc i) (next coll))))\n      buf)))\n\n(defn uint8-view\n  \"Creates a Uint8Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length.\"\n  ([a] (js/Uint8Array. (.-buffer a)))\n  ([a offset len] (js/Uint8Array. (.-buffer a) offset len)))\n\n(defn uint8-clamped\n  \"Creates a native Uint8ClampedArray of the given size or from `coll`\n  If arg already is a typed array then a copy is created.\"\n  [size-or-coll]\n  (cond\n    (number? size-or-coll) (js/Uint8ClampedArray. size-or-coll)\n    (typed-array? size-or-coll) (js/Uint8ClampedArray. size-or-coll)\n    :else\n    (let [len (count size-or-coll)\n          buf (js/Uint8ClampedArray. len)]\n      (loop [i 0, coll size-or-coll]\n        (when (< i len)\n          (aset buf i (first coll))\n          (recur (inc i) (next coll))))\n      buf)))\n\n(defn uint8-clamped-view\n  \"Creates a Uint8ClampedArray view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length.\"\n  ([a] (js/Uint8ClampedArray. (.-buffer a)))\n  ([a offset len] (js/Uint8ClampedArray. (.-buffer a) offset len)))\n\n(defn int16\n  \"Creates a native Int16Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created.\"\n  [size-or-coll]\n  (cond\n    (number? size-or-coll) (js/Int16Array. size-or-coll)\n    (typed-array? size-or-coll) (js/Int16Array. size-or-coll)\n    :else\n    (let [len (count size-or-coll)\n          buf (js/Int16Array. len)]\n      (loop [i 0, coll size-or-coll]\n        (when (< i len)\n          (aset buf i (first coll))\n          (recur (inc i) (next coll))))\n      buf)))\n\n(defn int16-view\n  \"Creates a Int16Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length.\"\n  ([a] (js/Int16Array. (.-buffer a)))\n  ([a offset len] (js/Int16Array. (.-buffer a) offset len)))\n\n(defn uint16\n  \"Creates a native Uint16Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created.\"\n  [size-or-coll]\n  (cond\n    (number? size-or-coll) (js/Uint16Array. size-or-coll)\n    (typed-array? size-or-coll) (js/Uint16Array. size-or-coll)\n    :else\n    (let [len (count size-or-coll)\n          buf (js/Uint16Array. len)]\n      (loop [i 0, coll size-or-coll]\n        (when (< i len)\n          (aset buf i (first coll))\n          (recur (inc i) (next coll))))\n      buf)))\n\n(defn uint16-view\n  \"Creates a Uint16Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length.\"\n  ([a] (js/Uint16Array. (.-buffer a)))\n  ([a offset len] (js/Uint16Array. (.-buffer a) offset len)))\n\n(defn int32\n  \"Creates a native Int32Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created.\"\n  [size-or-coll]\n  (cond\n    (number? size-or-coll) (js/Int32Array. size-or-coll)\n    (typed-array? size-or-coll) (js/Int32Array. size-or-coll)\n    :else\n    (let [len (count size-or-coll)\n          buf (js/Int32Array. len)]\n      (loop [i 0, coll size-or-coll]\n        (when (< i len)\n          (aset buf i (first coll))\n          (recur (inc i) (next coll))))\n      buf)))\n\n(defn int32-view\n  \"Creates a Int32Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length.\"\n  ([a] (js/Int32Array. (.-buffer a)))\n  ([a offset len] (js/Int32Array. (.-buffer a) offset len)))\n\n(defn uint32\n  \"Creates a native Uint32Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created.\"\n  [size-or-coll]\n  (cond\n    (number? size-or-coll) (js/Uint32Array. size-or-coll)\n    (typed-array? size-or-coll) (js/Uint32Array. size-or-coll)\n    :else\n    (let [len (count size-or-coll)\n          buf (js/Uint32Array. len)]\n      (loop [i 0, coll size-or-coll]\n        (when (< i len)\n          (aset buf i (first coll))\n          (recur (inc i) (next coll))))\n      buf)))\n\n(defn uint32-view\n  \"Creates a Uint32Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length.\"\n  ([a] (js/Uint32Array. (.-buffer a)))\n  ([a offset len] (js/Uint32Array. (.-buffer a) offset len)))\n\n(defn float32\n  \"Creates a native Float32Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created.\"\n  [size-or-coll]\n  (cond\n    (number? size-or-coll) (js/Float32Array. size-or-coll)\n    (typed-array? size-or-coll) (js/Float32Array. size-or-coll)\n    :else\n    (let [len (count size-or-coll)\n          buf (js/Float32Array. len)]\n      (loop [i 0, coll size-or-coll]\n        (when (< i len)\n          (aset buf i (first coll))\n          (recur (inc i) (next coll))))\n      buf)))\n\n(defn float32-view\n  \"Creates a Float32Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length.\"\n  ([a] (js/Float32Array. (.-buffer a)))\n  ([a offset len] (js/Float32Array. (.-buffer a) offset len)))\n\n(defn float64\n  \"Creates a native Float64Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created.\"\n  [size-or-coll]\n  (cond\n    (number? size-or-coll) (js/Float64Array. size-or-coll)\n    (typed-array? size-or-coll) (js/Float64Array. size-or-coll)\n    :else\n    (let [len (count size-or-coll)\n          buf (js/Float64Array. len)]\n      (loop [i 0, coll size-or-coll]\n        (when (< i len)\n          (aset buf i (first coll))\n          (recur (inc i) (next coll))))\n      buf)))\n\n(defn float64-view\n  \"Creates a Float64Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length.\"\n  ([a] (js/Float64Array. (.-buffer a)))\n  ([a offset len] (js/Float64Array. (.-buffer a) offset len)))\n"],"x_google_ignoreList":[0]}